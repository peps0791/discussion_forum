<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Fixed point arithmetic on microcontrollers
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-154" class = "post">
			<h2>Question</h2>
			<div id="vote-154" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">8</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 7261</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Fixed point arithmetic on microcontrollers</h2>
<p>Often we use microcontrollers to do things in our robots, but need to make some calculations in decimal. Using floating point variables is <strong>very</strong> slow, because a software floating point library is automatically included (unless you have a high-end microcontroller). Therefore, we generally use fixed point arithmetic.</p>

<p>Whenever I do this, I just use an integer, and remember where the decimal place is. However, it does take some care to ensure that everything is consistent, especially when calculations involve variables where the decimal point is in a different place.</p>

<p>I have implemented a fixed point atan2 function, but because I was trying to squeeze every last drop of limited precision (16 bits), I would often change the definition of where the decimal point is, and it would change as I tweaked it. In addition, I would have some constants, as a quasi look-up table, which themselves have an implied decimal point somewhere.</p>

<p>I want to know if there is a better way. Is there a library, or set of macros, that can simplify the use of fixed point variables, making multiplication and division between mixed variables easier, and allowing declaration of decimal numbers or constant expressions, but automatically converting to the desired fixed point representation at compile time?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-154" data-toggle = "popover">
				<p>user name : ronalchn</p>
				<p> user reputation : 2449</p>
				<p class = "tagcontent" id = "usertaginfo-154">{'None': 187, 'two-wheeled': 20, 'inverse-kinematics': 15, 'interrupts': 5, 'microcontroller': 13, 'wiring': 7, 'c': 8, 'avr': 5, 'brushless-motor': 2, 'joint': 15, 'kinematics': 15, 'hall-sensor': 2, 'mobile-robot': 20, 'arm': 15}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-154">Load Comments</button></br>
			<div id = "commentsection-154" class = 'collapse'>
			<div id = "comment-167" class = "comment">
				<p>I think this actually is better for stackoverflow as the solution is kind of generic and not much to do with robotics.</p>
			</div>
			<div id = "comment-168" class = "comment">
				<p>And it is also covered on SO. Have a look [here](http://stackoverflow.com/questions/2945747/c-fixed-point-library) and [here](http://stackoverflow.com/questions/79677/whats-the-best-way-to-do-fixed-point-math)</p>
			</div>
			<div id = "comment-170" class = "comment">
				<p>that's C++, not C</p>
			</div>
			<div id = "comment-183" class = "comment">
				<p>@Jakob - Note that both of those questions were closed as not constructive.</p>
			</div>
			<div id = "comment-186" class = "comment">
				<p>This is the sort of thing that would make C++ very useful for embedded systems. Templates would generate the correct and optimal code automatically.</p>
			</div>
			<div id = "comment-253" class = "comment">
				<p>Is there a particular reason not to use c++?</p>
			</div>
			<div id = "comment-256" class = "comment">
				<p>Unfortunately, C is what microcontroller compilers support, because C is more compact and efficient (ie. programmers can't easily use more computationally intensive features)</p>
			</div>
			<div id = "comment-285" class = "comment">
				<p>I have been using c++ very successfully on microcontrollers. One of the uses actually was transparent fixed point calculations, amongst other things. If you use a GCC based toolchain C++ will almost always be supported.</p>
			</div>
			<div id = "comment-287" class = "comment">
				<p>Not all microcontrollers support that. In particular AVR.</p>
			</div>
			<div id = "comment-318" class = "comment">
				<p>Can I have a look at your atan function? I'm trying to tackle the floating-to-fixed-point conversion problem in my academic research and I would be happy to take a crack at it.</p>
			</div>
			<div id = "comment-320" class = "comment">
				<p>it's not a conventional atan2 function (well, it started as a normal atan2 function), but I changed the definition so that it takes values 120 degrees apart instead of 90 degrees apart. The implementation also changed from CORDIC to a hybrid CORDIC/binary search, for 3/4 cycles then a lookup table to change the tradeoff between memory and runtime</p>
			</div>
			<div id = "comment-348" class = "comment">
				<p>@ronalchn Parts of Arduino (an AVR micro) [language](http://www.arduino.cc/en/Reference/Comparison) are implemented in C++. There is also an [AVR C++ Library](http://avr-cpp-lib.sourceforge.net/). And [this thread](http://www.societyofrobots.com/robotforum/index.php?topic=5135.0) on which compilers to use.</p>
			</div>
			</div>
				<textarea id = "speech-154" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-154">
					<img id="start_img-154" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-154">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-156"  class = "post">
				<h2>Answer</h2>
			<div id="vote-156" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>If you use an integer to remember where the "point" is, they are <em>kind of</em> using floating point arithmetic. Fixed point, really has <strong>fixed</strong> point.</p>

<p>I suspect that for every function there would be a different "preprocessing" to make your "floating" point number suitable for the function. For example, for <code>atan</code>, you would want to shift the number so that it's decimal point matches that of your fixed-point function. For <code>cos</code>, you may want to get it in the range of $\pi$ and $-\pi$ and then shift it.</p>

<p>This depends on the range of values your application needs, but you may want to completely move to a fixed point representation. That is, for example, instead of keeping a number like this:</p>

<pre><code>struct num
{
    uint16_t number;
    uint16_t decimal_point;
};
</code></pre>

<p>where <code>number</code> is the whole number and <code>decimal_point</code> says where the decimal point is, you can store it like this:</p>

<pre><code>struct num
{
    uint16_t integer;
    uint16_t fraction;
};
</code></pre>

<p>where the whole number is <code>integer.fraction</code>, which has the same memory usage, higher range of values and in general simpler to use.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-156" data-toggle = "popover">
				<p>user name : Shahbaz</p>
				<p> user reputation : 2615</p>
				<p class = "tagcontent" id = "usertaginfo-156">{'None': 193, 'usb': 12, 'distributed-systems': 7, 'microcontroller': 1, 'embedded-systems': 7, 'servomotor': 1, 'platform': 18, 'can': 1, 'machine-learning': 12, 'real-time': 18, 'mobile-robot': 1, 'rs232': 12, 'software': 20}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-156">Load Comments</button></br>
			<div id = "commentsection-156" class = 'collapse'>
			<div id = "comment-169" class = "comment">
				<p>Actually storing the decimal point makes it more like a floating point. Normally the decimal point is defined at compile time, and you change between representation depending on your operation.</p>
			</div>
			<div id = "comment-171" class = "comment">
				<p>I don't mean remember as in stored in a variable, I mean remember as in I remember how to interpret the result (by knowing where the decimal point is)</p>
			</div>
			<div id = "comment-174" class = "comment">
				<p>@ronalchn, I see. You meant something like with a `#define`, right? I thought you actually store it and it can vary based on how big or small your number is.</p>
			</div>
			<div id = "comment-190" class = "comment">
				<p>@ronalchn - are you thinking of B-scaling? (see my answer)</p>
			</div>
			</div>
				<textarea id = "speech-156" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-156">
					<img id="start_img-156" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-156">Comment</button>
			<br><div id = "ans-162"  class = "post">
				<h2>Answer</h2>
			<div id="vote-162" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>There are a number of implementations (no libraries that I'm immediately aware of) of <a href="http://en.wikipedia.org/wiki/Binary_scaling" rel="nofollow">Binary Scaling</a> (aka B-scaling)</p>

<p>In this, you keep a mental note (or even better, document the code...) of where the decimal point is, using shifts to move the decimal point up or down.</p>

<p>I've used B-scaling in assembler on defence projects, on even the smallest CPUs so can vouch for its suitability for anything else...</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-162" data-toggle = "popover">
				<p>user name : Andrew</p>
				<p> user reputation : 570</p>
				<p class = "tagcontent" id = "usertaginfo-162">{'None': 41}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-162">Load Comments</button></br>
			<div id = "commentsection-162" class = 'collapse'>
			<div id = "comment-195" class = "comment">
				<p>Probably something like this, but I have never seen it referred to as b-scaling. I think of it as fixed point - the decimal is never floating because even though the decimal point might change in the course of calculations, any one variable always has the decimal point fixed at a particular location</p>
			</div>
			</div>
				<textarea id = "speech-162" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-162">
					<img id="start_img-162" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-162">Comment</button>
			<br><div id = "ans-163"  class = "post">
				<h2>Answer</h2>
			<div id="vote-163" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I've used the <a href="http://www.ti.com/tool/sprc542" rel="nofollow">TI IQMath Library</a> to implement virtual floating-point on their fixed-point DSPs.</p>

<blockquote>
  <p>Texas Instruments TMS320C28x IQmath Library is collection of highly
  optimized and high  precision mathematical functions for C/C++
  programmers to seamlessly port a floating-point  algorithm into fixed
  point code on TMS320C28x devices. These routines are typically used in
  computationally intensive real-time applications where optimal
  execution speed and high  accuracy is critical. By using these
  routines you can achieve execution speeds considerable  faster than
  equivalent code written in standard ANSI C language. In addition, by
  providing readyto-use high precision functions, TI IQmath library can
  shorten significantly your DSP application development time.</p>
</blockquote>

<p>That uses some TI specific stuff but I've also used that code as a base to implement virtual floating-point math on other microcontrollers. It takes a bit of work to port but it's a lot easier than starting from scratch.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-163" data-toggle = "popover">
				<p>user name : embedded.kyle</p>
				<p> user reputation : 1469</p>
				<p class = "tagcontent" id = "usertaginfo-163">{'None': 124}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-163">Load Comments</button></br>
			<div id = "commentsection-163" class = 'collapse'>
			<div id = "comment-231" class = "comment">
				<p>@downvoter Care to comment on what was wrong with my answer?</p>
			</div>
			<div id = "comment-252" class = "comment">
				<p>+1: This library is better than what he's using now ("just use an integer"). It doesn't do *everything* the original question asked for, but I think an answer like this (useful, but not a complete solution) doesn't deserve a downvote -- unless a complete solution actually does exist (which I doubt in this case).</p>
			</div>
			<div id = "comment-343" class = "comment">
				<p>It seems to me that an answer which is specific to a single range of devices and is only [free as in beer rather than as in speech](http://en.wikipedia.org/wiki/Gratis_versus_libre) is of limited use to future visitors.</p>
			</div>
			<div id = "comment-346" class = "comment">
				<p>@MarkBooth I changed the link from the C28x library to the C64x library. If you follow that link, you can request the source code. You need a company or a university email to get access. Still free as in beer _and_ speech. You just need to raise your hand and wait to be called on before you can talk. A bit annoying, but once you have the source code, it can be adapted to any processor you like.</p>
			</div>
			<div id = "comment-349" class = "comment">
				<p>Thanks @embedded.kyle source code is definitely better than binary only, but still of little general use if the license only allows you to use it in limited ways. According to the [C6x Software Libraries](http://processors.wiki.ti.com/index.php?title=Software_libraries#IQMath) page that source is only released under **TI Commercial License**, which almost certainly isn't *free as in speech*.</p>
			</div>
			</div>
				<textarea id = "speech-163" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-163">
					<img id="start_img-163" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-163">Comment</button>
			<br><div id = "ans-248"  class = "post">
				<h2>Answer</h2>
			<div id="vote-248" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">6</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>It would be nice if we could tell the compiler the range and precision of each fixed-point input variable (perhaps no two having the radix point in the same location), and it would automagically -- at compile time -- use the correct range and precision and rescaling operations for the intermediate values and final values in a series of calculations.
I've heard rumors that it may be possible to do that in <a href="http://en.wikibooks.org/wiki/Ada_Programming/Types/delta" rel="nofollow noreferrer">the Ada programming language</a> or in C++ templates.</p>

<p>Alas, the closest I've seen is fixed-point arithmetic libraries that require you, the programmer, to manually choose the correct representation and manually verify that each operation maintains adequate range and precision.
Sometimes they make multiplication and division between mixed variables easier.
Such as:</p>

<ul>
<li><a href="http://sourceforge.net/projects/avrfix/" rel="nofollow noreferrer">AVRfix</a>: a library for fixed point calculation in s15.16, s7.24 and s7.8 format, entirely written in ANSI C</li>
<li><a href="http://en.wikibooks.org/wiki/Embedded_Systems/Floating_Point_Unit" rel="nofollow noreferrer">Embedded Systems: fixed point FFT</a> lists some libraries for fixed-point FFT calculation</li>
<li><a href="http://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=1824&amp;appnote=en010962" rel="nofollow noreferrer">AN617: fixed point routines for the Microchip PICmicro</a></li>
<li><a href="https://sourceforge.net/directory/?q=%22fixed%20point%22" rel="nofollow noreferrer">"fixed point"</a> projects on SourceForge.</li>
<li>gcc has built-in fixed-point libraries <a href="http://gcc.gnu.org/onlinedocs/gcc/Fixed_002dPoint.html" rel="nofollow noreferrer">a</a> <a href="http://gcc.gnu.org/wiki/FixedPointArithmetic" rel="nofollow noreferrer">b</a></li>
<li><a href="http://www.ti.com/tool/SPRC087" rel="nofollow noreferrer">TI IQMath Library</a> ( and <a href="http://www.ti.com/tool/sprc542" rel="nofollow noreferrer">source</a> -- Thank you, <a href="https://robotics.stackexchange.com/a/163/37">embedded.kyle</a> ).</li>
</ul>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-248" data-toggle = "popover">
				<p>user name : David Cary</p>
				<p> user reputation : 3365</p>
				<p class = "tagcontent" id = "usertaginfo-248">{'quadcopter': 38, 'stepper-driver': 9, 'None': 256, 'multi-rotor': 2, 'force-sensor': 9, 'stability': 36, 'industrial-robot': 1, 'design': 18, 'motor': 2, 'stepper-motor': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-248">Load Comments</button></br>
			<div id = "commentsection-248" class = 'collapse'>
			<div id = "comment-254" class = "comment">
				<p>It's almost certainly possible to do this using C++ templates.</p>
			</div>
			<div id = "comment-317" class = "comment">
				<p>I'm actually working on something just like your "it would be nice if..." comment. It is a plugin for gcc that converts floating-point C code to fixed-point, optimizing all of the binary point locations along the way. I have a paper submitted to an ACM journal, and another in preparation. If you have C code for the atan function I would be happy to give it a shot...I could give you back C code that uses integer variables and does all of the fixed-point stuff.</p>
			</div>
			<div id = "comment-350" class = "comment">
				<p>+1 for a much more complete answer than mine. I've edited the link in mine to include a link to a place to request the source code to address Mark Booth's comment. You might want to update your link as well. I'd do it myself but a suggested edit is in queue and is blocking me.</p>
			</div>
			</div>
				<textarea id = "speech-248" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-248">
					<img id="start_img-248" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-248">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>