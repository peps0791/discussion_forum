<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Particle filter weight function
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-6423" class = "post">
			<h2>Question</h2>
			<div id="vote-6423" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 388</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Particle filter weight function</h2>
<p>I am trying to implement a particle filter in MATLAB to filter a robot's movement in 2D but I'm stuck at the weight function. My robot is detected by a camera via two points, so a single measure is a quadruple (<code>xp1</code>, <code>yp1</code>, <code>xp2</code>, <code>yp2</code>) and states are the usual (<code>x</code>,<code>y</code>,<code>alpha</code>) to detect its pose in 2D. As far as my understanding goes I should assign a weight to each particle based on its likelihood to be in that particle position with regards to the current measurement.</p>

<p>I also have the measure function to calculate an expected measurement for a particle, so basically I have, for each instant, the actual measurement and the measurement that a single particle would have generated if it were at the actual state. </p>

<p>Assuming all noises are Gaussian, how can I implement the weight function? I kind of noticed the <code>mvnpdf</code> function in MATLAB, but I can't actually find a way to apply it to my problem.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-6423" data-toggle = "popover">
				<p>user name : Khali Abd</p>
				<p> user reputation : 11</p>
				<p class = "tagcontent" id = "usertaginfo-6423">{'mobile-robot': 2, 'None': 0, 'wheeled-robot': 2, 'particle-filter': 2}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-6423" class = 'collapse'>
			</div>
				<textarea id = "speech-6423" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-6423">
					<img id="start_img-6423" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-6423">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-6449"  class = "post">
				<h2>Answer</h2>
			<div id="vote-6449" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I suggest you to read the book "Probabilistic Robotics" by Sebastian Thrun et al.
A simple test you can do is writing a weighting function as a product of Gaussians centered in the x,y of the particle and evaluated in the measurement points. You can use monodimensional Gaussians and multiply all together.</p>

<p>E.g.,</p>

<p>weight_particle_i = exp( (x_measure - x_particle_i)^2/sigma_x^2)*exp( (y_measure - y_particle_i)^2/sigma_y^2)</p>

<p>where the sigma represents the uncertainty in your measures</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-6449" data-toggle = "popover">
				<p>user name : Mallo</p>
				<p> user reputation : 41</p>
				<p class = "tagcontent" id = "usertaginfo-6449">{'None': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-6449">Load Comments</button></br>
			<div id = "commentsection-6449" class = 'collapse'>
			<div id = "comment-9308" class = "comment">
				<p>Hi, Thank you for your response to the question. To be more helpful, I suggest you use the built-in [math symbol markdown](https://math.stackexchange.com/editing-help). It will greatly improve readability. Second, referencing a book is helpful, but does not provide a simple, accessible solution that can be archived.</p>
			</div>
			</div>
				<textarea id = "speech-6449" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-6449">
					<img id="start_img-6449" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-6449">Comment</button>
			<br><div id = "ans-6457"  class = "post">
				<h2>Answer</h2>
			<div id="vote-6457" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><h3>A little background.</h3>

<p>You need to weight each particle by the liklihood of the particle being correct. The probability the particle is correct is given by the probability that it is correct <em>given the measurements</em>. </p>

<ul>
<li>Note that the "weight" (which is a terrible term) is simply the probability of the particle <em>being correct</em>. Therefore, each particle is really an estimate, and each estimate has some probability of being correct.</li>
<li>Let $x$ be the state. There are a bunch of (say $N$) state estimates ($x_i$ for $i=1...N$), i.e., particles</li>
<li>Let $z$ be your measurement</li>
</ul>

<p>By Bayes rule:</p>

<p>$$p(x|z) = \frac{p(z|x)\cdot p(x)}{p(z)}$$</p>

<p>Which means, the probability of the particle being "correct" given the measurement is given by the probability that the measurement "makes sense" given the particle's estimate, times the probability that the particle was correct to begin with.</p>

<p>The denominator is commonly written using the <a href="https://en.wikipedia.org/wiki/Law_of_total_probability" rel="nofollow noreferrer">law of total probability</a> so the above becomes:</p>

<p>$$p(x_i|z) = \frac{p(z|x_i)\cdot p(x_i)}{\sum_{j=1}^N p(z|x_j)p(x_j)}$$</p>

<p>You can re-weight each particle using the above. Explicitly,</p>

<p>$$w_i\gets \frac{p(z|x_i)\cdot w_i}{\sum_{j=1}^N p(z|x_j)\cdot w_j}$$</p>

<p>Now, let's go over your problem.</p>

<p>You said you have a tuple $(x_1,y_1,x_2,y_2)$, but that's not correct, you have <em>two</em> measurements of the $(x,y)$ value for the robot's position. You need to do <em>two</em> updates of each particle. (<strong>EDIT</strong>: It seems the three-dimensional state of the robot was derived from these two points. I misunderstood so ignore that)</p>

<p>So, first calculate $p(z|x_i)$ for each particle $x_i$. In a two dimensional state, this is done as follows:</p>

<ul>
<li>for all $x_i$, calculate $p_i \gets p(z|x_i)$ </li>
</ul>

<p>E.G., In matlab: <code>pi=chi2pdf( norm(z-xi), 2))</code>. See: <a href="http://www.mathworks.com/help/stats/chi2pdf.html" rel="nofollow noreferrer">chi2pdf</a> and <a href="http://www.mathworks.com/help/matlab/ref/norm.html" rel="nofollow noreferrer">norm</a>. You may want to see <a href="https://robotics.stackexchange.com/q/6447/163">this question</a> if you don't understand this step.</p>

<ul>
<li>Now, let $D\gets\sum_{i=1}^N p(z|x_i)\cdot w_i$ using the above values of $p_i$ and previous values of $w_i$ for each particle.</li>
<li>Then, let the <em>new</em> value of each particle be: $w_i\gets\frac{p_i\cdot w_i}{D}$.</li>
</ul>

<p>For a complex discussion of why this works, what about it isn't so great, and so on, you'll want to read some literature. Thrun's Probablistic Robotics is a great resource. </p>

<p>EDIT: I should mention that commonly $p(z|x_i)$ is calculated not using CHI2PDF but instead by the EKF linearization of $z=h(x_i)$. That's beyond scope. Furthermore, the uncertainty in the robot position is not included. Using an EKF for each particle will address this but that's a different framework (sort of).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-6457" data-toggle = "popover">
				<p>user name : Josh Vander Hook</p>
				<p> user reputation : 3960</p>
				<p class = "tagcontent" id = "usertaginfo-6457">{'None': 345}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-6457" class = 'collapse'>
			</div>
				<textarea id = "speech-6457" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-6457">
					<img id="start_img-6457" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-6457">Comment</button>
			<br><div id = "ans-6460"  class = "post">
				<h2>Answer</h2>
			<div id="vote-6460" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Thanks for all the replies (I'm the op with a new account so I can't comment your single replies).</p>

<p>@Mallo: thanks for the input, I was actually basing my work on that book ;) I ended up doing something very similar to what you have described.</p>

<p>@Josh: </p>

<blockquote>
  <p>"You said you have a tuple <code>(x1,y1,x2,y2)</code>, but that's not correct..."</p>
</blockquote>

<p>well, no. I was correct, let me explain better: the robot is identified by camera reading TWO points on it, therefore the measurement consist of FOUR coordinates and to generate the particle's weight I have the particle to examine (which is a <code>(x,y,orientation)</code>) and a measurement. I then apply the measure equations to the particle and confront the "should-be" measure generated by the particle with the actual measurement.</p>

<p>Also, weight is actually the appropriate term because they are just proportional to likelihood but they still need to be normalized (but it isn't necessary).</p>

<p>For the future readers that is what I ended up doing:</p>

<ul>
<li>generate particle measure</li>
<li>calculate euclidean distance between particle's supposed measure and actual measure, which is accomplished in MATLAB with the <code>pdist</code> function.</li>
<li>calculate the pdf of the distance for a standard gaussian (mean = 0 and sigma = 1), which is accomplished in MATLAB with <code>normpdf(distance, 0, 1)</code>.</li>
</ul>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-6460" data-toggle = "popover">
				<p>user name : Luca T</p>
				<p> user reputation : 11</p>
				<p class = "tagcontent" id = "usertaginfo-6460">{'None': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-6460">Load Comments</button></br>
			<div id = "commentsection-6460" class = 'collapse'>
			<div id = "comment-9320" class = "comment">
				<p>To address your method. This will certainly "work". The reason it is not often used, is because it does not take into account the particle's uncertainty. Of course, you can use any distance-based, decreasing function to weight the particles, but if it is not scaled by the uncertainty associated with each particle or the measurement uncertainty, well, it's not really rigorous or adaptive to other sensor modalities. But that's one of the great things about these types of "pseudo-bayesian" updates: their robustness. Even when you arbitrarily choose things, it seems to work OK.</p>
			</div>
			</div>
				<textarea id = "speech-6460" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-6460">
					<img id="start_img-6460" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-6460">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>