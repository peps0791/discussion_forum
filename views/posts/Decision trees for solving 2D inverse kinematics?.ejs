<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Decision trees for solving 2D inverse kinematics?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-566" class = "post">
			<h2>Question</h2>
			<div id="vote-566" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 401</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Decision trees for solving 2D inverse kinematics?</h2>
<p>While experimenting with the OpenCV Machine Learning Library, I tried to make an example to learn the inverse kinematics of a 2D, 2 link arm using <a href="http://docs.opencv.org/modules/ml/doc/decision_trees.html">decision trees</a>. The forward kinematics code looks like this:</p>

<pre><code>const float Link1 = 1;
const float Link2 = 2;

CvPoint2D32f forwardKinematics(float alpha, float beta) 
{
    CvPoint2D32f ret;

    // Simple 2D, 2 link kinematic chain
    ret.x = Link1 * std::cos(alpha) + Link2 * std::cos(alpha - beta);
    ret.y = Link1 * std::sin(alpha) + Link2 * std::sin(alpha - beta);

    return ret;
}
</code></pre>

<p>I generate a random set of 1000 (XY -> alpha) and (XY -> beta) pairs, and then use that data to train two decision tree models in OpenCV (one for alpha, one for beta). Then I use the models to predict joint angles for a given XY position. </p>

<p>It seems like it sometimes gets the right answer, but is wildly inconsistent. I understand that inverse kinematic problems like this have multiple solutions, but some of the answers I get back are just wrong.</p>

<p>Is this a reasonable thing to try to do, or will it never work? Are there other learning algorithms that would be better suited to this kind of problem than decision trees?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-566" data-toggle = "popover">
				<p>user name : WildCrustacean</p>
				<p> user reputation : 658</p>
				<p class = "tagcontent" id = "usertaginfo-566">{'None': 45, 'uncanny-valley': 10, 'inverse-kinematics': 5, 'research': 10, 'hri': 10, 'machine-learning': 5}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-566" class = 'collapse'>
			</div>
				<textarea id = "speech-566" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-566">
					<img id="start_img-566" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-566">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-567"  class = "post">
				<h2>Answer</h2>
			<div id="vote-567" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I changed the training set generation to uniformly sample the joint space instead of using random samples, and also restricted the range of the second joint to prevent multiple solutions and singularities. </p>

<p>Now the algorithm actually works pretty well, and gives me answers that are reasonably close to the desired position. I'm still not convinced that decision trees are the best algorithm for this problem though.</p>

<p>Thinking about it some more, I think all I've really done here is build a big lookup table in a fancy way (especially when using a uniform training set).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-567" data-toggle = "popover">
				<p>user name : WildCrustacean</p>
				<p> user reputation : 658</p>
				<p class = "tagcontent" id = "usertaginfo-567">{'None': 45, 'uncanny-valley': 10, 'inverse-kinematics': 5, 'research': 10, 'hri': 10, 'machine-learning': 5}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-567">Load Comments</button></br>
			<div id = "commentsection-567" class = 'collapse'>
			<div id = "comment-655" class = "comment">
				<p>I was just going to make the observation that DTs would likely work but are probably not the best learning algorithm for this task. I have had really good luck using bilinear interpolation for inverse kinematics. I image it would work well with this problem too. It also seems odd that you are training two trees with one feature each. Generally you would train one tree with multiple features. Finally you will probably see an improvement in performance if you increase the number of samples because you would be creating a better approximation to he real function.</p>
			</div>
			<div id = "comment-656" class = "comment">
				<p>The number of samples question is an interesting one, in my current implementation it seems like I actually get more consistent answers with fewer samples. I don't completely understand how OpenCV is building the trees, but it seems like with fewer samples maybe it gets stuck on the wrong node less often? I used two trees because as far as I could tell, the CvDTree implementation uses a single `double` as the node value, so there isn't a way to store multiple result values.</p>
			</div>
			</div>
				<textarea id = "speech-567" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-567">
					<img id="start_img-567" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-567">Comment</button>
			<br><div id = "ans-572"  class = "post">
				<h2>Answer</h2>
			<div id="vote-572" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The core problem here is that you are using two decision trees. As I understand it you are training two different decision trees on the same data. You then have one tree predict the required angle $\alpha$ and the other predict the required angle $\beta$. The problem is that $\beta$ is dependent on $\alpha$ but the $\beta$ tree has no concept of this fact. What you need to do is train one tree on both feaures (i.e. $\alpha$ and $\beta$).</p>

<p>In OpenCV each DT node uses a double called <code>value</code> to store the splitting value for that node and it uses an integer called <code>class_idx</code> to determine which feature to split on at any given level. When you train the DT you need to supply it with a matrix. Conventionally each row of the matrix is a feature vector and each column is an individual feature. However it appears that this is configurable in the OpenCV implementation by using the <code>tflag</code> (Cool!). Using the conventional method you would need to create an $m{\times}n$ matrix where $m = 1000$ is the number of training samples and $n = 2$.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-572" data-toggle = "popover">
				<p>user name : DaemonMaker</p>
				<p> user reputation : 3321</p>
				<p class = "tagcontent" id = "usertaginfo-572">{'control': 4, 'stereo-vision': 15, 'None': 271, 'computer-vision': 15, 'battery': 7, 'cameras': 15, 'research': 4, 'troubleshooting': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-572">Load Comments</button></br>
			<div id = "commentsection-572" class = 'collapse'>
			<div id = "comment-671" class = "comment">
				<p>I'm still not sure how I would train a single tree to give me both alpha and beta, as far as I can tell the OpenCV DT implementation only supports 1D response vectors.</p>
			</div>
			</div>
				<textarea id = "speech-572" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-572">
					<img id="start_img-572" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-572">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>