<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>how to read and write data with pyserial at same time
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-11897" class = "post">
			<h2>Question</h2>
			<div id="vote-11897" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 1503</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>how to read and write data with pyserial at same time</h2>
<p>How can i make pyserial read and write at same time or at same program? Right now i only know how to either write or to read but not both simultaneiously. So how can i do it? I tried this simple code:</p>

<pre><code>int incomingByte = 0;

void setup() {

Serial.begin(9600); // opens serial port, sets data rate to 9600 bps

}

void loop() {

incomingByte = Serial.read(); // read the incoming byte:

Serial.print(" I received:");

Serial.println(incomingByte);

}
</code></pre>

<p>and python program is:</p>

<pre><code>import serial
ser = serial.Serial('/dev/ttyACM0',9600)
ser.write("333")
ser.close()
ser.open()
data = ser.readline()
print data
ser.close()
</code></pre>

			</div>
			<div class = "userinfosection"  id = "userinfo-11897" data-toggle = "popover">
				<p>user name : Dinesh Lama</p>
				<p> user reputation : 160</p>
				<p class = "tagcontent" id = "usertaginfo-11897">{'control': 0, 'stability': 1, 'None': 2, 'inverse-kinematics': 0, 'arduino': 4, 'python': 1, 'gazebo': 0, 'lidar': 0, 'servomotor': 0, 'motor': 0, 'real-time': 1, 'actuator': 0, 'serial': 1, 'ros': 2, 'servos': 0}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11897" class = 'collapse'>
			</div>
				<textarea id = "speech-11897" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11897">
					<img id="start_img-11897" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11897">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-11902"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11902" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>What you're looking for is called "full duplex" serial, in that you want to read and write at the same time. In looking around, it appears that this would typically be done with distinct <a href="https://stackoverflow.com/a/8808218/5171120">threads</a>, where one is doing the writing and the other is independently doing the reading. Unfortunately, <a href="https://arduino.stackexchange.com/a/288">you can't multithread with the Arduino</a>. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11902" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-11902">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11902" class = 'collapse'>
			</div>
				<textarea id = "speech-11902" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11902">
					<img id="start_img-11902" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11902">Comment</button>
			<br><div id = "ans-11905"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11905" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>It's not entirely clear what you mean by "write and read at the same time" because that can refer to different contexts.  It can be confusing because people tend to mix the meanings of full-duplex/half-duplex when switching back-and-forth in discussion of the hardware and software layers.</p>

<p>True full-duplex serial communications requires hardware level support. Separately, to make use of full-duplex communications, your serial library and program itself must be written to support full-duplex.</p>

<p>Most simpler two-way serial devices will only respond after receiving a command. For example, you send a command (write), and then expect a response (read). This is sometimes referred to as half-duplex and this is what your current program example is doing. However, you shouldn't be closing and reopening the serial port.</p>

<p>If the serial device you are working with is such that you can write at any time <em>and</em> you can independently expect to receive something from the device at any time, then you are working with a full duplex serial device.  In that case, your options are either multi-threading or doing writing/reading sequentially without the reads blocking your program indefinitely.</p>

<p>Multithreaded programming with python is possible on most arduinos. (Again, this gets confusing. Another answer here indicated that arduinos do not support multithreading. That is true for most arduinos at the hardware level. But there are ways to simulate multithreading at the software level, and python does this.)  A multi-threaded solution to your problem can get complex. Here are some examples though:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/14487151/pyserial-full-duplex-communication">https://stackoverflow.com/questions/14487151/pyserial-full-duplex-communication</a></li>
<li><a href="https://github.com/headrotor/Python-Arduino-example" rel="nofollow noreferrer">https://github.com/headrotor/Python-Arduino-example</a></li>
</ul>

<p>If multi-threading is not available to you, then you can use a single thread where the writes are before reads, and the reads are done only if bytes are available or with a short timeout. Psuedo program loop:</p>

<ol>
<li>Is there data to write? If so, write it.</li>
<li>Attempt to read anything that has been received since last time tried to read.

<ul>
<li>If serial library/hardware can provide "bytes available" on the read line, check that to determine if you should try reading anything.</li>
<li>If library/hardware can not provide "bytes available" on the read line, then set a short time out for the read. This will block program until timeout waiting for anything to come in. If bytes do come in, start processing them.</li>
</ul></li>
<li>Loop (or if nothing to do, sleep a little to prevent 100% cpu)</li>
</ol>

<p>The single thread approach works as long as your hardware read buffers are large enough to hold the inbound data until you are able to read it and clear the buffer. Examples:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/19908167/reading-serial-data-in-realtime-in-python">https://stackoverflow.com/questions/19908167/reading-serial-data-in-realtime-in-python</a></li>
<li><a href="http://forum.arduino.cc/index.php?topic=297609.0" rel="nofollow noreferrer">http://forum.arduino.cc/index.php?topic=297609.0</a></li>
</ul>

<p>If going with this approach, be aware that while <a href="https://pythonhosted.org/pyserial/shortintro.html#readline" rel="nofollow noreferrer">readLine</a> is probably safe, using <a href="http://pyserial.readthedocs.io/en/latest/pyserial_api.html#serial.Serial.read" rel="nofollow noreferrer">read(size>1)</a> can be non trivial when using a timeout, because it's possible that timeout will occur before a complete multi-byte "message" has been received.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11905" data-toggle = "popover">
				<p>user name : kaliatech</p>
				<p> user reputation : 472</p>
				<p class = "tagcontent" id = "usertaginfo-11905">{'None': 28, 'microcontroller': 5, 'serial': 5, 'rs232': 5}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11905">Load Comments</button></br>
			<div id = "commentsection-11905" class = 'collapse'>
			<div id = "comment-21164" class = "comment">
				<p>"Simulated multithreading" doesn't do anything different than sequentially calling the read/write; you're just concealing/obscuring the fact that it's done sequentially. Your 'pseudo program loop' is also what OP posted in their question. If OP posted code showing they understand that they can write then read from a serial port, then ask how they can do both at the same time, then it looks clear to me that they're asking for full duplex (simultaneous) read/write capability, which isn't possible on the Arduino.</p>
			</div>
			</div>
				<textarea id = "speech-11905" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11905">
					<img id="start_img-11905" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11905">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>