<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Inverse kinematics: how to specify TCP constraints in an iterative algorithm?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-11019" class = "post">
			<h2>Question</h2>
			<div id="vote-11019" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 141</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Inverse kinematics: how to specify TCP constraints in an iterative algorithm?</h2>
<p>I am trying to write some simple code to perform IK for a 6 DoF redundant robot using the Jacobian pseudo-inverse method. I can solve IK for a desired pose using the iterative method, and I want to now focus on applying constraints to the solution. Specifically I'm interested in </p>

<ol>
<li>Keep the end effector orientation constant as the robot moves from initial to final pose  </li>
<li>Avoid obstacles in the workspace</li>
</ol>

<p>I've read about how the redundancy/null space of the Jacobian can be exploited to cause internal motions that satisfy desired constraints, while still executing the trajectory, but I am having trouble implementing this as an algorithm. For instance, my simple iterative algorithm looks like</p>

<pre><code>error = pose_desired - pose_current;
q_vel = pinv(J)*error(:,k);
q = q + q_vel;
</code></pre>

<p>where $q$ is 'pushed' towards the right solution, updated until the error is minimized. But for additional constraints, the equation (Siciliano, Bruno, et al. Robotics: modelling, planning and control) specifies </p>

<p>$$
\dot{q} = J^\dagger*v_e - (I-J^\dagger J)\dot{q_0}
\\
\dot{q_0} = k_0*(\frac{\partial w(q)}{\partial q})^T  
$$</p>

<p>where $w$ is supposed to be a term that minimizes/maximizes a chosen constraint. I don't understand the real world algorithmic implementation of this 'term' in the context of my desired constraints: so if I want to keep the orientation of my end effector constant, how can I define the parameters $w$, $q_0$ etc.? I can sense that the partial derivative signifies that it is representing the difference between how the current configuration and a future configuration affect my constraint, and can encourage 'good' choices, but not more than that.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-11019" data-toggle = "popover">
				<p>user name : HighVoltage</p>
				<p> user reputation : 398</p>
				<p class = "tagcontent" id = "usertaginfo-11019">{'stereo-vision': 2, 'probability': 10, 'multi-agent': 4, 'planning': 10, 'manipulator': 2, 'cameras': 1, 'matlab': 1, 'kalman-filter': 7, 'None': 19, 'noise': 3, 'inverse-kinematics': 2, 'localization': 8, 'pose': 4, 'mapping': 0, 'rotation': 1, '3d-reconstruction': 0, 'computer-vision': 8, 'algorithm': 3, 'c++': 3, 'slam': 2, 'exploration': 0, 'path-planning': 3}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11019" class = 'collapse'>
			</div>
				<textarea id = "speech-11019" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11019">
					<img id="start_img-11019" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11019">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-11020"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11020" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The pseudoinverse (Moore-Penrose inverse) provides the solution which is minimum in a least-squares sense.  It is rather similar to the Simplex method in that sense.  You need some type of optimization such as this to coordinate the extra axes of motion while posing the end effector at the desired position and orientation.  </p>

<p>To also optimize a run-time constraint, you take advantage of the null space of J.  That is your term multiplying $\dot{q_0}.$  Frankly it doesn't really matter what $\omega$ is, in terms of the position and orientation of the end effector.  The idea is that <em>any</em> constraint $\omega$ only results in <em>self-motion</em> of the manipulator, which does not change the end effector's pose.  </p>

<p>Look up John Ballieul's work for excellent descriptions of the use of the null space of $J$ for these purposes.  </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11020" data-toggle = "popover">
				<p>user name : SteveO</p>
				<p> user reputation : 2960</p>
				<p class = "tagcontent" id = "usertaginfo-11020">{'None': 222}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11020">Load Comments</button></br>
			<div id = "commentsection-11020" class = 'collapse'>
			<div id = "comment-19865" class = "comment">
				<p>Thank you! I understand the null space concept better now.</p>
			</div>
			</div>
				<textarea id = "speech-11020" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11020">
					<img id="start_img-11020" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11020">Comment</button>
			<br><div id = "ans-11023"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11023" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>If you want to keep orientation constant, the simplest approach is to, well.. do exactly that. Do not solve for the tartget point and let the joint move along a seemingly arbitratry cartesian path (but infact well defined in joint space). </p>

<p>Solve the inverse kinematics problem for a number of points (depending on your robots precision maybe every milimeter) along a line or any other path shape you need for obstacle avoidance. The line (or other shape) gives you the TCP positions and the orientation, as you require it, should be set constant. You will get joint coordinates for each point on a line. If you feed these squentially to the motors your robot will execute the desired trajectory with the desired orientation. No null space needed. </p>

<p>If you do not want to complicate things with additional shapes and IK solving, you can also constrain orientation in your method easily:</p>

<p>Instead of planning the whole path in one shot like you specified:</p>

<pre><code>error = pose_desired - pose_current; 
q_vel = pinv(J)*error(:,k); 
q = q+ q_vel;
</code></pre>

<p>Break it down to 3 seperate parts</p>

<p>1 Set the constat orientation you require during the path execution</p>

<pre><code>error = postition_current_with_const_orientation - pose_current;
q_vel = pinv(J)*error(:,k); 
q = q+ q_vel;
</code></pre>

<p>If the <code>error</code> as an RMS value is below a threshold value you can proceed to the next step</p>

<p>2 Move to the target position (not pose) with the constant orientation</p>

<pre><code>error = postition_target_with_const_orientation - pose_current;
q_vel = pinv(J)*error(:,k); 
q = q+ q_vel;
</code></pre>

<p>If the <code>error</code> as an RMS value is below a threshold value you can proceed to the next step</p>

<p>3 Orient the TCP for the target orientation to attain the target pose</p>

<pre><code>error = pose_target - pose_current;
q_vel = pinv(J)*error(:,k); 
q = q+ q_vel;
</code></pre>

<p>If the <code>error</code> as an RMS value is below a threshold value you can proceed to the next task/motion</p>

<p>EDIT: Please note that I am not sure why you used <code>error(:,k)</code> and not just <code>error</code> but I assumed it has a reason and used it as you did.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11023" data-toggle = "popover">
				<p>user name : 50k4</p>
				<p> user reputation : 2800</p>
				<p class = "tagcontent" id = "usertaginfo-11023">{'geometry': 0, 'None': 193, 'kinematics': 0, 'robotic-arm': 0}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11023">Load Comments</button></br>
			<div id = "commentsection-11023" class = 'collapse'>
			<div id = "comment-19849" class = "comment">
				<p>50k4, the OP states *for a 6 DoF redundant robot*.  This must mean either 6 DOF of output parameters but more than 6 joint parameters, or 6 joints but fewer output parameters.   Otherwise it cannot be *redundant.*</p>
			</div>
			<div id = "comment-19850" class = "comment">
				<p>yes, my bad, will correct that part...but answer is still valid...</p>
			</div>
			<div id = "comment-19851" class = "comment">
				<p>If $q_vel$ is obtained from the OP equation for $\dot q$ then you are using nullspace motion to arrive at the final pose.   That is the effect of the $(I - J^{\dagger} J)$ factor.</p>
			</div>
			<div id = "comment-19853" class = "comment">
				<p>No nullspace motion is required to contrain the TCP to a constant orientation. Null space motions have advantages but do not need to be used ini every case. The example I described moves the TCP with constant orientation and has no nullspace motions.  If q_vel is obtaind as in the sourcode excerpt it does not need additional equations for setting a constant orientation</p>
			</div>
			<div id = "comment-19854" class = "comment">
				<p>Furthermore, I would argue, that a null space motion, by definition cannot effect TCP orientation. So trying to contrain TCP orientation by nullsapce motions is not a good advice.</p>
			</div>
			<div id = "comment-19855" class = "comment">
				<p>I see what the difference is - you are showing how to solve item 1 in the post (keeping constant orientation while changing pose).  Breaking the problem down into the three steps you mention is a good approach there.   In order to solve item 2 in the post (avoiding obstacles), though, you would need to define the obstacle avoidance constraint $\omega$.  To accomplish that, you can define $\omega$ to avoid the obstacles, then iterate on $\dot q$ to meet, or optimize, that criteria.  This would lead to the nullspace motion.</p>
			</div>
			<div id = "comment-19856" class = "comment">
				<p>I wanted to show how to include TCP constraints in a straight forward way. Obstacle avoidance is not only a null space motion issue. Although it is helpfull, it may not be enough depending on the environment and obstacles. The same is true for Carthesian space obstacle avoidance. A combination of both would most likely lead to good obstacle avoidance behaviuor.</p>
			</div>
			<div id = "comment-19861" class = "comment">
				<p>@SteveO - I edited your equation; it's `^{\dagger}`. Caret to get the dagger to be superscript, and then `\dagger` to get the symbol.</p>
			</div>
			<div id = "comment-19864" class = "comment">
				<p>Thanks for the detailed reply. So I guess the takeaway here is that constant orientation of the end effector wouldn't need null space projections, but obstacle avoidance would. 

@SteveO: I didn't word it right in my question, my bad: I have a 7 joint arm, trying to get to a 6DoF pose.</p>
			</div>
			<div id = "comment-19867" class = "comment">
				<p>@50k4: I am a little confused by the second method you mentioned where I don't need to explicitly define a path: I tried something similar without success. In my case, the initial and final orientations should be the same, as well as throughout the trajectory: so my orientation 'error' is always close to zero. Yet, when I compute $q_{vel}$, the commands it generates always end up rotating the TCP. So at the end, I get to the desired position but my TCP orientation is always changing.</p>
			</div>
			<div id = "comment-19869" class = "comment">
				<p>If the error term does not contain any orientation, the the inverse Jacobi should convert that cartesian motion vector with zero orientation to joint space. What is your cycle time? or how large is the change in current_position between two cycles?</p>
			</div>
			<div id = "comment-19877" class = "comment">
				<p>http://i.imgur.com/fp9L55w.jpg  

This is a graph of how the iteration is converging. As you can see, at the start of the loop, the RPY orientation error is very close to zero: but by the end of the first iteration, it shoots up instead of staying at the desired orientation. Also, the position error converges in about 15 iterations, but the orientation varies widely and gets stuck away from the desired orientation. I haven't explicitly defined a cycle time; just running the loop as I mentioned in the post because this is just test code (but the actual robot takes joint commands every 5ms)</p>
			</div>
			<div id = "comment-19882" class = "comment">
				<p>Expressing an orientation has many solutions. Are you sure that the same orientation is given back when you convert the new q to current position with the direct kinematics as the one you set at the beginning?</p>
			</div>
			<div id = "comment-19885" class = "comment">
				<p>No, it doesn't give me the same orientation: which is the problem. As you can see in the graph, the orientation error never reaches zero (it is zero only at the beginning) The orientation changes as soon as I get a new 'q' value from the loop. I am using the ZYX notation consistently throughout.</p>
			</div>
			<div id = "comment-19886" class = "comment">
				<p>Try multiplying with 0.01 each time you calculate q_vel. The steps might be too large and the can overshoot... post a picture of the convergence afterwards</p>
			</div>
			</div>
				<textarea id = "speech-11023" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11023">
					<img id="start_img-11023" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11023">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>