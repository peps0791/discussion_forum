<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>What are the notable limitations on using Java with Mindstorms NXT 2.0?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-653" class = "post">
			<h2>Question</h2>
			<div id="vote-653" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">7</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 457</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>What are the notable limitations on using Java with Mindstorms NXT 2.0?</h2>
<p>I'm a long time <a href="http://en.wikipedia.org/wiki/Java_%28programming_language%29" rel="nofollow noreferrer">Java</a> developer who is starting to learn on the <a href="http://en.wikipedia.org/wiki/Lego_Mindstorms_NXT_2.0" rel="nofollow noreferrer">Lego Mindstorms NXT 2.0</a>. Are there any limitations to using the Java API? Which language is the most robust on the platform?</p>

<p>I found a post, <a href="https://robotics.stackexchange.com/questions/578/lego-nxt-programming-tip)"><em>Which programming language should I use with the NXT?</em></a> which mentions many of the alternatives. The answer is helpful, but doesn't mention the different languages' limitations.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-653" data-toggle = "popover">
				<p>user name : Bob Paulin</p>
				<p> user reputation : 136</p>
				<p class = "tagcontent" id = "usertaginfo-653">{'mindstorms': 7, 'nxt': 7, 'None': 0, 'programming-languages': 7}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-653">Load Comments</button></br>
			<div id = "commentsection-653" class = 'collapse'>
			<div id = "comment-814" class = "comment">
				<p>What research have you done? [link]http://lejos.sourceforge.net/nxt/nxj/api/index.html</p>
			</div>
			<div id = "comment-835" class = "comment">
				<p>This question is too broad. Maybe you could ask about specifically what it is you want to do?</p>
			</div>
			<div id = "comment-836" class = "comment">
				<p>So  think the intent of the question can be boiled down to is lejos a full featured language for nxt or are their operations that can only be performed by the native language?</p>
			</div>
			<div id = "comment-837" class = "comment">
				<p>"or are their operations that can only be performed by the native language" - you still lose me on that - no idea what it is asking. LeJOS is an implementation of a JVM. Parts of Java that are inappropriate (ie TCP) are not implemented. What else is there to know? Asking which language is most robust is too ambiguous - Ford or Chevy? http://www.teamhassenplug.org/NXT/NXTSoftware.html has a comparison chart</p>
			</div>
			<div id = "comment-869" class = "comment">
				<p>@Spiked3: Thank you for the comparison chart. One might also like to know (1) which (if any) of these alternatives supports hard real-time systems [(a)](http://robotics.stackexchange.com/questions/128/how-mature-is-real-time-programming-in-robotics), (2) how much memory on the NXT is left over for my "user-level" programs and data after the language-support infrastructure libraries are loaded, (3) do any of these alternatives support interrupt handlers, etc.</p>
			</div>
			<div id = "comment-870" class = "comment">
				<p>[nxtOSEK](http://lejos-osek.sourceforge.net/whatislejososek.htm) is based around a RTOS I think, it would be the only one even close to real time I would guess but I have no direct experience with it. I do not know of any support for interrupt handlers on an NXT - nor can I think of any reason to support them, sensors are generally added via I2C. If your doing hardware design at that level, the NXT is probably not the best choice. Remaining memory is a good question. As I understand [Harvard Architecture](http://en.wikipedia.org/wiki/Harvard_architecture) complicates that answer.</p>
			</div>
			</div>
				<textarea id = "speech-653" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-653">
					<img id="start_img-653" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-653">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-2055"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2055" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>A lot of the different options with regards to language are listed on the NXT wiki page <a href="http://en.wikipedia.org/wiki/Lego_Mindstorms_NXT_2.0" rel="nofollow">http://en.wikipedia.org/wiki/Lego_Mindstorms_NXT_2.0</a>. </p>

<ul>
<li><strong>NXT-G</strong> NXT-G is the programming software included in the
standard base kit. It is based on LabVIEW graphical programming. It
features an interactive drag-and-drop environment. LabVIEW
Toolkit[edit] NXT-G is powered by LabVIEW, an industry standard in
programming. Created by National Instruments, LabVIEW uses data flow
programming to create a virtual instrument. To allow for more
advanced programming, in the graphical sense, National Instruments
released a Toolkit for the NXT. Version 1.0 came out in December
2006 Since its release, several bugs have been found and new sensors have been created. While the toolkit does allow for the creation of new sensors, National Instruments has yet to formally release an update</li>
<li><strong>Lego::NXT</strong> Lego::NXT provides an API between Perl and
NXT. </li>
<li><strong>Ada</strong> A port of GNAT is available for the NXT. It requires
nxtOSEK to run. The port includes Ada bindings to the NXT hardware
and nxtOSEK. </li>
<li><strong>Next Byte Codes &amp; Not eXactly C</strong> Next Byte Codes
(NBC) is a simple open-source language with an assembly language
syntax that can be used to program the NXT brick. Not eXactly C (NXC)
is a high level open-source language, similar to C, built on top
of the NBC compiler. It can also be used to program the NXT brick.
NXC is basically NQC for the NXT. It is the most widely used
third-party programming language. </li>
<li><strong>ROBOTC</strong> ROBOTC is an
Integrated development environment targeted towards students that is
used to program and control LEGO NXT, VEX, RCX, and Arduino robots
using a programming language based on the C programming language.</li>
<li><strong>RoboMind</strong> RoboMind is an educational programming environment
that offers a concise scripting language for programming a simulated
robot. These internationalized scripts can, however, also directly be
exported to Lego Mindstorms robots. It does not require custom
firmware in order to run. </li>
<li><strong>NXTGCC</strong> NXTGCC is a GCC toolchain for
programming the NXT firmware in C. URBI[edit] URBI is a parallel and
event-driven language, with interfaces to C++/Java and Matlab. It
also has a component architecture (UObject) for distributed
computation. Urbi is compatible with many robots, including Nao (cf
Robocup), Bioloid or Aibo. </li>
<li><strong>leJOS NXT</strong> leJOS NXT is a high
level open source language based on Java that uses custom firmware
developed by the leJOS team.</li>
<li><strong>nxtOSEK</strong> To be able to write in
C (programming language)/C++, nxtOSEK can be used, but that requires
custom firmware too.</li>
<li><strong>MATLAB and Simulink</strong> MATLAB is a
high-level programming language for numerical computing, data
acquisition and analysis. It can be used to control LEGO NXT robots
over a Bluetooth serial port (serial port communication is part of
the base functionality of MATLAB) or via a USB connection; for
example using the RWTH - Mindstorms NXT Toolbox (free &amp; open-source).
Simulink is a MATLAB-based environment for modeling and simulating
dynamic systems. Using Simulink, a user can design control
algorithms, automatically generate C code for those algorithms, and
download the compiled code onto the LEGO NXT. MATLAB and Simulink
code for NXT programming is freely available. </li>
<li><strong>Lua</strong> pbLua is an
implementation of the Lua programming language, a general purpose
scripting language, for Lego Mindstorms. FLL </li>
<li><strong>NXT Navigation</strong> FLL
Nxt Navigation An open source program to help navigation on the FLL
competition table. Uses NXT-G and .txt files to write programs.</li>
<li><strong>ruby-nxt</strong> ruby-nxt is a library to program the NXT for the Ruby
programming language. Unlike the other languages for the NXT the code
isn't compiled to a binary file. Instead the code is directly
transmitted to the NXT via a bluetooth connection. This method of
execution is significantly slower than executing compiled code
directly. Robotics. </li>
<li><strong>NXT</strong> Robotics.NXT is a Haskell interface to
NXT over Bluetooth. It supports direct commands, messages and many
sensors (also unofficial). It has also support for a simple
message-based control of a NXT brick via remotely executed program
(basic NXC code included).</li>
</ul>

<p>As previously mentioned the chart in  <a href="http://teamhassenplug.org/NXT/NXTSoftware.html" rel="nofollow">http://teamhassenplug.org/NXT/NXTSoftware.html</a> is a good comparison.</p>

<blockquote>
  <p>Which language is the most robust on the platform?</p>
</blockquote>

<p>Although I agree that the question is far too ambiguous, after using NXT-G, Matlab, Labview and a number of the other interfaces, I have found that the BricxCC IDE and the NXC is very easy to use with great contextual help and a lot of examples. It allows a lot more programming freedom that the visual based solutions do not offer. I have not attempted to use the higher level programming languages such as Java and C++ because most of the applications that I have been using would not have benefited from the advanced functions. If you are wanting these advanced functions is NXT the right hardware?</p>

<blockquote>
  <p>One might also like to know (1) which (if any) of these alternatives supports hard real-time systems</p>
</blockquote>

<p>This post for the LeJOS discuses this with regards to Java: <a href="http://www.lejos.org/forum/viewtopic.php?f=18&amp;t=4619" rel="nofollow">http://www.lejos.org/forum/viewtopic.php?f=18&amp;t=4619</a> :- "The NXT firmware switches thread contexts every 1ms. Also, the scheduler of the NXT firmware is much more predictable. For example, a thread with high priority would be preferred by the scheduler over any thread with lower priority. So high priority threads could be pretty sure to be scheduled as soon as possible. The motor regulation was typically running as a high priority thread. But as you already guessed, the NXT firmware was no realtime system either. Threads with the same priority are served round-robin. Oh and once in a while, the garbage collector will halt the whole JVM. This is always true for the NXT. But the Oracle JVM used on the EV3 uses concurrent garbage collectors. However, in the worst case, even those fall back to halting the whole JVM. The trick to avoid that is to reuse object, arrays, and such stuff as far as possible in performance critical code paths."</p>

<blockquote>
  <p>how much memory on the NXT is left over for my "user-level" programs and data after the language-support infrastructure libraries are loaded</p>
</blockquote>

<p>This post for the LeJOS discuses this with regards to Java: <a href="http://www.lejos.org/nxt/nxj/tutorial/AdvancedTopics/UnderstandingFilesLCPMemTools.htm" rel="nofollow">http://www.lejos.org/nxt/nxj/tutorial/AdvancedTopics/UnderstandingFilesLCPMemTools.htm</a></p>

<p>"The NXT has 256kb of flash memory. A fixed section at the start of the flash memory is allocated to the system. It is used to hold the firmware, followed by the startup menu. The rest of this system area is unused. The size of the system area varies between releases.</p>

<p>The firmware is written in C, with some ARM assembly language. The startup menu is written in Java (in the startup project in SVN).</p>

<p>Flash memory is read and written in 256-byte pages. The first page after the system area is used for persistent system settings administered by the startup menu.</p>

<p>The rest of the flash memory is used for the user file system. The first two pages hold the file table (directory), and the rest of the pages hold user files. Files are held as a contiguous set of bytes   i.e they use a single range of page numbers with no gaps. This allows a file to be addressed as a region of memory."</p>

<blockquote>
  <p>do any of these alternatives support interrupt handlers</p>
</blockquote>

<p>One way of programming interrupt handlers on the NXT is to program at a lower level: <a href="http://www.tau.ac.il/~stoledo/lego/nxt-native/" rel="nofollow">http://www.tau.ac.il/~stoledo/lego/nxt-native/</a></p>

<p>"It's pretty easy to get started. You need two tools: the GNU development tools for ARM processors, and some way to download the resulting programs to the NXT. I use nexttool to download programs to the NXT, but I suppose that you could use NXT-G as well. There are several distributions of the GNU tools for ARM around. I usually use a distribution called WinARM, which is for windows; GNUARM and YAGARTO are two other options (I have used GNUARM on Linux)."</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2055" data-toggle = "popover">
				<p>user name : Tom Bamber</p>
				<p> user reputation : 303</p>
				<p class = "tagcontent" id = "usertaginfo-2055">{'kinect': 3, 'mobile-robot': 5, 'None': 13}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2055">Load Comments</button></br>
			<div id = "commentsection-2055" class = 'collapse'>
			<div id = "comment-4120" class = "comment">
				<p>While the links are appreciated, sooner or later they are bound to rot. To be future-proof, it would be a good idea to quote the most relevant parts of the text you linked to right in this answer.</p>
			</div>
			<div id = "comment-4136" class = "comment">
				<p>Shahbaz I have edited the post to prevent the link rot.</p>
			</div>
			</div>
				<textarea id = "speech-2055" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2055">
					<img id="start_img-2055" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2055">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>