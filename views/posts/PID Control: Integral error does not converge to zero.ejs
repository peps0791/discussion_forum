<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>PID Control: Integral error does not converge to zero
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-9169" class = "post">
			<h2>Question</h2>
			<div id="vote-9169" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 572</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>PID Control: Integral error does not converge to zero</h2>
<p>Good day,</p>

<p>I had been recently reading up more on PID controllers and stumbled upon something called integral wind up. I am currently working on an autonomous quadcopter concentrating at the moment on PID tuning. I noticed that even with the setpoint of zero degrees reached in this video, the quadcopter would still occasionally overshoot a bit:  <a href="https://youtu.be/XD8WgVFfEsM" rel="nofollow noreferrer">https://youtu.be/XD8WgVFfEsM</a></p>

<p>Here is the corresponding data testing the roll axis:
<a href="https://i.stack.imgur.com/gAatW.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/gAatW.png" alt="enter image description here"></a></p>

<p>I noticed that the I-error does not converge to zero and continues to increase:
<a href="https://i.stack.imgur.com/jS8oS.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/jS8oS.png" alt="enter image description here"></a></p>

<blockquote>
  <p>Is this the integral wind-up?</p>
  
  <p>What is the most effective way to resolve this?</p>
</blockquote>

<p>I have seen many implementations mainly focusing on limiting the output of the system by means of saturation. However I do not see this bringing the integral error eventually back to zero once the system is stable.</p>

<p>Here is my current code implementation with the setpoint of 0 degrees:</p>

<pre><code>cout &lt;&lt; "Starting Quadcopter" &lt;&lt; endl;

float baseThrottle = 155; //1510ms
float maxThrottle = 180; //This is the current set max throttle for the PITCH YAW and ROLL PID to give allowance to the altitude PWM. 205 is the maximum which is equivalent to 2000ms time high PWM 
float baseCompensation = 0; //For the Altitude PID to be implemented later


delay(3000);

float startTime=(float)getTickCount();
deltaTimeInit=(float)getTickCount(); //Starting value for first pass

while(1){
//Read Sensor Data
readGyro(&amp;gyroAngleArray);
readAccelMag(&amp;accelmagAngleArray);

//Time Stamp
//The while loop is used to get a consistent dt for the proper integration to obtain the correct gyroscope angles. I found that with a variable dt, it is impossible to obtain correct angles from the gyroscope.

while( ( ((float)getTickCount()-deltaTimeInit) / ( ((float)getTickFrequency()) ) ) &lt; 0.005){ //0.00209715|0.00419
       deltaTime2=((float)getTickCount()-deltaTimeInit)/(((float)getTickFrequency())); //Get Time Elapsed
       cout &lt;&lt; " DT endx = " &lt;&lt; deltaTime2 &lt;&lt; endl;
}
//deltaTime2=((float)getTickCount()-deltaTimeInit)/(((float)getTickFrequency())); //Get Time Elapsed
deltaTimeInit=(float)getTickCount(); //Start counting time elapsed
cout &lt;&lt; " DT end = " &lt;&lt; deltaTime2 &lt;&lt; endl;


//Complementary Filter
float pitchAngleCF=(alpha)*(pitchAngleCF+gyroAngleArray.Pitch*deltaTime2)+(1-alpha)*(accelmagAngleArray.Pitch);
float rollAngleCF=(alpha)*(rollAngleCF+gyroAngleArray.Roll*deltaTime2)+(1-alpha)*(accelmagAngleArray.Roll);
float yawAngleCF=(alpha)*(yawAngleCF+gyroAngleArray.Yaw*deltaTime2)+(1-alpha)*(accelmagAngleArray.Yaw);


//Calculate Orientation Error (current - target)
float pitchError = pitchAngleCF - pitchTarget;
pitchErrorSum += (pitchError*deltaTime2);
float pitchErrorDiff = pitchError - pitchPrevError;
pitchPrevError = pitchError;

float rollError = rollAngleCF - rollTarget;
rollErrorSum += (rollError*deltaTime2);
float rollErrorDiff = rollError - rollPrevError;
rollPrevError = rollError;

float yawError = yawAngleCF - yawTarget;
yawErrorSum += (yawError*deltaTime2);
float yawErrorDiff = yawError - yawPrevError;
yawPrevError = yawError;


//PID controller list
float pitchPID = pitchKp*pitchError + pitchKi*pitchErrorSum + pitchKd*pitchErrorDiff/deltaTime2;
float rollPID = rollKp*rollError + rollKi*rollErrorSum + rollKd*rollErrorDiff/deltaTime2;
float yawPID = yawKp*yawError + yawKi*yawErrorSum + yawKd*yawErrorDiff/deltaTime2;

//Motor Control - Mixing    
//Motor Front Left (1)
float motorPwm1 =  -pitchPID + rollPID - yawPID + baseThrottle + baseCompensation;

//Motor Front Right (2)
float motorPwm2 =  -pitchPID - rollPID + yawPID + baseThrottle + baseCompensation; 

//Motor Back Left (3)
float motorPwm3 = pitchPID + rollPID + yawPID + baseThrottle + baseCompensation; 

//Motor Back Right (4)
float motorPwm4 = pitchPID - rollPID - yawPID + baseThrottle + baseCompensation;


 //Check if PWM is Saturating - This method is used to fill then trim the outputs of the pwm that gets fed into the gpioPWM() function to avoid exceeding the earlier set maximum throttle while maintaining the ratios of the 4 motor throttles. 
    float motorPWM[4] = {motorPwm1, motorPwm2, motorPwm3, motorPwm4};
    float minPWM = motorPWM[0];
    int i;
    for(i=0; i&lt;4; i++){ // Get minimum PWM for filling
        if(motorPWM[i]&lt;minPWM){
            minPWM=motorPWM[i];
        }
    }

    cout &lt;&lt; " MinPWM = " &lt;&lt; minPWM &lt;&lt; endl;

    if(minPWM&lt;baseThrottle){
        float fillPwm=baseThrottle-minPWM; //Get deficiency and use this to fill all 4 motors
        cout &lt;&lt; " Fill = " &lt;&lt; fillPwm &lt;&lt; endl;
        motorPwm1=motorPwm1+fillPwm;
        motorPwm2=motorPwm2+fillPwm;
        motorPwm3=motorPwm3+fillPwm;
        motorPwm4=motorPwm4+fillPwm;
    }

    float motorPWM2[4] = {motorPwm1, motorPwm2, motorPwm3, motorPwm4};
    float maxPWM = motorPWM2[0];
    for(i=0; i&lt;4; i++){ // Get max PWM for trimming
        if(motorPWM2[i]&gt;maxPWM){
            maxPWM=motorPWM2[i];
        }
    }

    cout &lt;&lt; " MaxPWM = " &lt;&lt; maxPWM &lt;&lt; endl;

    if(maxPWM&gt;maxThrottle){
        float trimPwm=maxPWM-maxThrottle; //Get excess and use this to trim all 4 motors
        cout &lt;&lt; " Trim = " &lt;&lt; trimPwm &lt;&lt; endl;
        motorPwm1=motorPwm1-trimPwm;
        motorPwm2=motorPwm2-trimPwm;
        motorPwm3=motorPwm3-trimPwm;
        motorPwm4=motorPwm4-trimPwm;
    }

//PWM Output
    gpioPWM(24,motorPwm1);  //1
    gpioPWM(17,motorPwm2);  //2
    gpioPWM(22,motorPwm3);  //3
    gpioPWM(18,motorPwm4);  //4
</code></pre>

			</div>
			<div class = "userinfosection"  id = "userinfo-9169" data-toggle = "popover">
				<p>user name : user123456098</p>
				<p> user reputation : 415</p>
				<p class = "tagcontent" id = "usertaginfo-9169">{'control': 16, 'stereo-vision': 2, 'communication': 0, 'pid': 19, 'uav': 0, 'stability': 13, 'mobile-robot': 2, 'sensor-error': 0, 'tuning': 2, 'cameras': 0, 'integration': 0, 'opencv': 2, 'differential-drive': 0, 'motion-planning': 0, 'None': 13, 'raspberry-pi': 14, 'localization': 0, 'microcontroller': 0, 'mapping': 0, 'path-planning': 0, 'real-time': 1, 'sensors': 0, 'quadcopter': 19, 'computer-vision': 2, 'vfh': 0, 'c++': 2, 'filter': 0, 'dead-reckoning': 0, 'sensor-fusion': 5, 'sonar': 1}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9169">Load Comments</button></br>
			<div id = "commentsection-9169" class = 'collapse'>
			<div id = "comment-15199" class = "comment">
				<p>What's the unit ot the time axis? What happens when you run it for a much longer time? How close is the pwm output to the maximum value?</p>
			</div>
			<div id = "comment-15200" class = "comment">
				<p>@BendingUnit22 unit the test was ran at 20 seconds</p>
			</div>
			<div id = "comment-15201" class = "comment">
				<p>Does the I-error converge to some value if you keep it running for longer, say 50s or 2minutes even? Or does it keep growing?</p>
			</div>
			<div id = "comment-15202" class = "comment">
				<p>@BendingUnit22 I will try to test it for a longer time period, I have to set the quad up again for roll testing</p>
			</div>
			</div>
				<textarea id = "speech-9169" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9169">
					<img id="start_img-9169" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9169">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-9172"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9172" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>When I look at your graphs of position error and integral error, I don't see any unexpected behaviors for a system which is not quite tuned well enough.   You are not showing integral windup nor saturation.   Make sure to use the integral loop of your controller only when holding at a steady-state position and you will avoid windup.  </p>

<p>It looks like your value for $k_p$ needs to be increased, and possibly also $k_i$.   Disturbances are causing you to leave the steady-state position, and your system is not able to remain close enough to its steady-state position (or else you wouldn't be trying to improve the performance).   The $k_i$ and $k_p$ terms are your options for locking that position in tighter around the steady-state value.  How low do you want the steady state error band to go before you consider it acceptable behavior?</p>

<p>The integral response will be more sluggish than the position-loop response, so I would begin by increasing $k_p$ a bit, and contine to do so until you see the fist signs of unstable behavior, then back it off by 25 - 50%.    Then do the same for $k_i$, and see if those two gains squash your steady state error sufficiently.  </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9172" data-toggle = "popover">
				<p>user name : SteveO</p>
				<p> user reputation : 2960</p>
				<p class = "tagcontent" id = "usertaginfo-9172">{'None': 222}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9172">Load Comments</button></br>
			<div id = "commentsection-9172" class = 'collapse'>
			<div id = "comment-15204" class = "comment">
				<p>I have been trying to tune the PID parameters using a single loop pid controller with angle setpoints but I haven't been able to get it to be more stable than +-5 degrees for almost 2 months now. I have decided to try out cascaded PID's using both angle and angular velocity setpoints as I have read that many people have had success with this even with basic tuning. Here is a testimony: http://robotics.stackexchange.com/questions/2800/pid-output-does-not-reach-setpoint-precisely-enough</p>
			</div>
			<div id = "comment-15205" class = "comment">
				<p>Wouldn't that help in the dynamic case of moving between setpoints, but have little effect on holding a steady state position?  It seems your current controller is too soft.    Good luck with whatever you try!</p>
			</div>
			</div>
				<textarea id = "speech-9172" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9172">
					<img id="start_img-9172" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9172">Comment</button>
			<br><div id = "ans-9173"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9173" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I don't think this is related to integral windup at all.</p>

<blockquote>
  <p>I noticed that the I-error does not converge to zero</p>
</blockquote>

<p>That's a good thing, because it means your integral term is not useless.</p>

<p>The integral term is there to compensate for steady-state errors. If you set the integral gain to 0, you should see that your system never reaches the setpoint.</p>

<p>The I-error that builds up will fix that.</p>

<blockquote>
  <p>and continues to increase</p>
</blockquote>

<p>I'm not sure if that's really the case. From the image that you posted it might as well converge to some constant value. Hence my request to let the system run for a longer period to see how the I-error behaves in the long run.</p>

<p>Maybe there actually is something in your system that increases the steady-state error over time. I imagine that the increasing temperature of an electrical resistance (in the driver or the motor) might cause that.</p>

<p>It's somewhat hard to tell what the reason is because it's one PID for everything. If you had several (cascaded) controllers, you could locate the reason by looking at the individual controllers. In case of a rising electrical resistance due to rising temperature, that should be visible in the current controller.</p>

<p><strong>tl:dr;</strong> There's a steady-state error in your system and the integral part of your controller compensates it. If that keeps growing, it means that the steady-state error is growing over time, which I think suggests that there's some kind of drift.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9173" data-toggle = "popover">
				<p>user name : Bending Unit 22</p>
				<p> user reputation : 1335</p>
				<p class = "tagcontent" id = "usertaginfo-9173">{'None': 93}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9173">Load Comments</button></br>
			<div id = "commentsection-9173" class = 'collapse'>
			<div id = "comment-15203" class = "comment">
				<p>Thank you, I have just finished altering the code for a cascaded PID controller setup as seems to be more stable as shown here: http://robotics.stackexchange.com/questions/2800/pid-output-does-not-reach-setpoint-precisely-enough</p>
			</div>
			<div id = "comment-15212" class = "comment">
				<p>One way you can reduce/remove the steady state error of the integral is by applying feedforward, however does require you to formulate an accurate model of the system. However there will probably always be some error, so you probably will always have some steady state error.</p>
			</div>
			</div>
				<textarea id = "speech-9173" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9173">
					<img id="start_img-9173" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9173">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>