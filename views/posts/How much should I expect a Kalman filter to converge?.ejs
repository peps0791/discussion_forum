<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How much should I expect a Kalman filter to converge?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-2826" class = "post">
			<h2>Question</h2>
			<div id="vote-2826" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 2724</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How much should I expect a Kalman filter to converge?</h2>
<p>I am learning about Kalman filters, and implementing the examples from the paper <a href="https://www.cs.cornell.edu/Courses/cs4758/2012sp/materials/MI63slides.pdf" rel="nofollow noreferrer">Kalman Filter Applications - Cornell University</a>.</p>

<p>I have implemented example 2, which models a simple water tank, filling at a constant rate. We only measure the tank level, and the Kalman filter is supposed to infer the fill rate.</p>

<p><img src="https://i.stack.imgur.com/w9SEw.png" alt="Kalman Filter Example, filling a water tank."></p>

<p>According to the model, the fill rate is a constant, so I assumed that over time, the Kalman filter would converge more and more accurately (and with less and less noise) on the correct fill rate. However, the amount of noise in the fill rate never seems to reduce after the first few iterations:</p>

<p><img src="https://i.stack.imgur.com/zNd1Q.png" alt="Kalman Filter example, Filling a water tank at a constant rate."></p>

<p>This graph shows how the fill rate part of the state vector changes over the course of 1000 iterations of the simulation.</p>

<p>Adjusting the Measurement Variance Matrix seems to have very little effect on the fill rate noise.</p>

<p>Also, the Kalman gain vector and State Variance matrix seem to be constant throughout the simulation. I assumed that the State Variance would reduce as the filter became more and more confident in its state estimate.</p>

<p>Questions:
- Is this graph what I should expect to see?
- Should the Kalman Gain vector and State Variance matrix change over time in this situation?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-2826" data-toggle = "popover">
				<p>user name : Rocketmagnet</p>
				<p> user reputation : 4235</p>
				<p class = "tagcontent" id = "usertaginfo-2826">{'control': 31, 'force': 8, 'multi-agent': 5, 'pid': 29, 'air-muscle': 6, 'uav': 52, 'stepper-driver': 3, 'reliability': 5, 'motor': 12, 'esc': 1, 'mobile-robot': 6, 'ros': 35, 'stepper-motor': 3, 'tuning': 12, 'swarm': 10, 'research': 5, 'platform': 17, 'imu': 4, 'kalman-filter': 49, 'hri': 4, 'None': 266, 'raspberry-pi': 24, 'localization': 7, 'python': 7, 'torque': 3, 'brushless-motor': 28, 'failure': 5, 'force-sensor': 15, 'sensors': 20, 'pwm': 10, 'wireless': 10, 'servos': 7, 'wifi': 24, 'simulation': 6, 'servomotor': 11, 'particle-filter': 0, 'sensor-fusion': 4, 'automatic': 12, 'software': 17}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2826">Load Comments</button></br>
			<div id = "commentsection-2826" class = 'collapse'>
			<div id = "comment-5227" class = "comment">
				<p>They usually converge very fast. Please update the post with some detail about the size of your data.</p>
			</div>
			<div id = "comment-5228" class = "comment">
				<p>@NKN - Added number of iterations.</p>
			</div>
			<div id = "comment-5229" class = "comment">
				<p>I guess the behavior of the graph shows that some place in implementation you have a bug to fix.</p>
			</div>
			</div>
				<textarea id = "speech-2826" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2826">
					<img id="start_img-2826" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2826">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-2833"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2833" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Your graph is actually indicative of what I would expect to see, but there might be some problems. For now, let us assume that you've implemented it perfectly.</p>

<blockquote>
  <p>the fill rate is a constant, so I assumed that over time, the Kalman filter would converge more and more accurately</p>
</blockquote>

<p>Does your Kalman filter know that the fill rate is constant? It's actually pretty easy to estimate fill rate given lots of data, but one that can estimate it as fast as possible is very powerful.</p>

<p>It looks like your graph starts at zero and then rings three times and converges very fast. At this point, it just responding to injected noise.</p>

<p>However, the trick is to balance favoring your current estimate vs incoming data using the Kalman gain. The noisier the data, the more you'll have to favor your estimate. However, favoring it more means you won't converge that fast (because you're essentially telling the filter that the fill rate doesn't change that fast.) </p>

<p>Two items to test:</p>

<p>1.) The filter is receiving a measurement z with added noise. Take that signal and plot it's derivative on top of the estimated value. Look at how much noise is in the signal.</p>

<p>2.) Halfway through your simulation, increase the fill rate by 2x and see how the filter responses. Then play with the values in K (move them away from their calculated optimal values) and see what the behavior is.  </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2833" data-toggle = "popover">
				<p>user name : DrRobotNinja</p>
				<p> user reputation : 231</p>
				<p class = "tagcontent" id = "usertaginfo-2833">{'None': 10}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2833">Load Comments</button></br>
			<div id = "commentsection-2833" class = 'collapse'>
			<div id = "comment-5237" class = "comment">
				<p>The filter has a 2x1 state vector (level and rate). I guess the way it 'knows' that the rate is constant is from the zeros in the process matrix. I thought a Kalman filter was supposed to be is some way optimal. I could easily write a filter that would converge on a less noise fill rate. This makes me think that I have implemented the Kalman filter wrong.</p>
			</div>
			<div id = "comment-5239" class = "comment">
				<p>I'm not as concerned with convergence speed as I am with constantly improving convergence. I don't mind if the filter takes a little longer, but it does bother me that the amount of noise stays constant after the first 20 or so iterations.</p>
			</div>
			<div id = "comment-5246" class = "comment">
				<p>I worked it out in the end. It's the Process Variance that's preventing the filter converging. Once I set that to zeros, it worked better.</p>
			</div>
			</div>
				<textarea id = "speech-2833" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2833">
					<img id="start_img-2833" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2833">Comment</button>
			<br><div id = "ans-2845"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2845" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The reason the filter stops converging on a solution is because of the Process Variance Matrix, Q.</p>

<p>This matrix tells the Kalman filter how imperfect the model itself is. If the matrix contains only zeros, you're telling the filter that the model is perfect, but if it contains non-zeros, you're saying that the model can't entirely be trusted, and that more weight should be given to the measurements. This will then limit the filter's convergence.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2845" data-toggle = "popover">
				<p>user name : Rocketmagnet</p>
				<p> user reputation : 4235</p>
				<p class = "tagcontent" id = "usertaginfo-2845">{'control': 31, 'force': 8, 'multi-agent': 5, 'pid': 29, 'air-muscle': 6, 'uav': 52, 'stepper-driver': 3, 'reliability': 5, 'motor': 12, 'esc': 1, 'mobile-robot': 6, 'ros': 35, 'stepper-motor': 3, 'tuning': 12, 'swarm': 10, 'research': 5, 'platform': 17, 'imu': 4, 'kalman-filter': 49, 'hri': 4, 'None': 266, 'raspberry-pi': 24, 'localization': 7, 'python': 7, 'torque': 3, 'brushless-motor': 28, 'failure': 5, 'force-sensor': 15, 'sensors': 20, 'pwm': 10, 'wireless': 10, 'servos': 7, 'wifi': 24, 'simulation': 6, 'servomotor': 11, 'particle-filter': 0, 'sensor-fusion': 4, 'automatic': 12, 'software': 17}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-2845" class = 'collapse'>
			</div>
				<textarea id = "speech-2845" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2845">
					<img id="start_img-2845" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2845">Comment</button>
			<br><div id = "ans-8270"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8270" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Let's assume a constant Kalman filter $x_n = Gx_{n-1}+\omega$ with $\omega \sim \mathrm{N}(0, W)$ and $y_n = Fx_n+ \nu$ with $ \nu \sim \mathrm{N}(0,V)$, and initial state $x_0 \sim \mathrm{N}(m_0, C_0)$, where $C_0$ is the initial state variance. Then, the sequence of state covariance matrices $C_0, C_1, \dots, C_n$ converges to a constant covariance matrix $C &gt; 0$ when $n \to \infty$ if the system is observable, and $C$ is a function of the system and measurement covariance matrices $W$ and $V$, respectively (i.e., depends only on the signal-to-noise ratio). The Kalman gain also converges to a constant matrix. This convergence process occurs in just a few steps.</p>

<p>In summary, the state covariance matrix $C_n$ does not reduces indefinitely with time, it reduces until achieve a limiting constant covariance matrix $C&gt;0$. In fact, it is not even sure that $C_n$ will decrease! If $C_0 &lt; C$, the sequence $C_0, C_1, C_2 \dots$ increases until $C$.</p>

<p>See the second chapter of the following reference for a proof: <a href="http://rads.stackoverflow.com/amzn/click/0387947256" rel="nofollow">Bayesian forecasting and dynamic models, by West and Harrison</a></p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8270" data-toggle = "popover">
				<p>user name : Anselmo</p>
				<p> user reputation : 31</p>
				<p class = "tagcontent" id = "usertaginfo-8270">{'None': 3}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-8270" class = 'collapse'>
			</div>
				<textarea id = "speech-8270" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8270">
					<img id="start_img-8270" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8270">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>