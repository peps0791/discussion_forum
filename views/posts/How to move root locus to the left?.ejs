<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How to move root locus to the left?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-10820" class = "post">
			<h2>Question</h2>
			<div id="vote-10820" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 86</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How to move root locus to the left?</h2>
<p>I'm trying to control system that has 3 poles (2 in the right half plane)</p>

<p>I sketched root-locus but the two positive poles are going right and never be in the left half plane at any value of k</p>

<p>The state space of system is following</p>

<pre><code>A =
0   1   0
-3.20205979037663e-08   0   -31.1556786564355
83333.3331597258    0   -173598.323255178

B = 
0
-3.11556786564355e-08
83333.3331597350

C = 
-0.999999999999890  0   0

D = 
0
</code></pre>

<p>How can I control system like this?</p>

<p>Note: I'm using matlab</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-10820" data-toggle = "popover">
				<p>user name : Ammar Atef</p>
				<p> user reputation : 44</p>
				<p class = "tagcontent" id = "usertaginfo-10820">{'control': 1, 'None': 2, 'arduino': 0, 'torque': 1, 'servomotor': 1, 'matlab': 1, 'pwm': 0, 'cnc': 2}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-10820">Load Comments</button></br>
			<div id = "commentsection-10820" class = 'collapse'>
			<div id = "comment-19480" class = "comment">
				<p>You should show what have you done in Matlab and your system representation.</p>
			</div>
			<div id = "comment-19482" class = "comment">
				<p>By system representation you mean state space or what?</p>
			</div>
			<div id = "comment-19483" class = "comment">
				<p>Yes, state space for example, or a transfer function.</p>
			</div>
			<div id = "comment-19485" class = "comment">
				<p>Edited the question</p>
			</div>
			</div>
				<textarea id = "speech-10820" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10820">
					<img id="start_img-10820" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10820">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-10821"  class = "post">
				<h2>Answer</h2>
			<div id="vote-10821" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>You want to study "state space pole placement design."  It is a very powerful technique.   In Matlab the steps are for you to create a vector of poles that you want the system to have, and then use the <em>place</em> function.   Matlab's help for this command is nicely specific.  </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-10821" data-toggle = "popover">
				<p>user name : SteveO</p>
				<p> user reputation : 2960</p>
				<p class = "tagcontent" id = "usertaginfo-10821">{'None': 222}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-10821">Load Comments</button></br>
			<div id = "commentsection-10821" class = 'collapse'>
			<div id = "comment-19486" class = "comment">
				<p>Here is a nice reference:  http://www.me.umn.edu/courses/me8281/notes/statefeedback.pdf</p>
			</div>
			<div id = "comment-19487" class = "comment">
				<p>Isn't root locus a classical control approach which uses frequency domain to manipulate the signal? On the other hand, state space is a modern control approach to target the system in the time domain?</p>
			</div>
			<div id = "comment-19488" class = "comment">
				<p>Pole placement can be done with either classical or state space techniques.   Both result in changing the system's characteristic equation when the control gains are incorporated.   The question included the system's state space model, so that is what the answer addresses. Compensator design using root locus techniques is also valid.  Even though state space is a time domain technique, the frequency characteristics of the system are still valid since the matrices model the differential equations.  You just never need to work with the Laplace transforms directly.</p>
			</div>
			<div id = "comment-19495" class = "comment">
				<p>pole placement? I think we need zeros not poles ... not sure, so I will read documentation and try it.</p>
			</div>
			<div id = "comment-19534" class = "comment">
				<p>`I think we need zeros not poles` It is normally poles that decide on stability, not zeros. Poles of the transfer function, that is.</p>
			</div>
			<div id = "comment-19538" class = "comment">
				<p>that helped me, thanks</p>
			</div>
			</div>
				<textarea id = "speech-10821" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10821">
					<img id="start_img-10821" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10821">Comment</button>
			<br><div id = "ans-10825"  class = "post">
				<h2>Answer</h2>
			<div id="vote-10825" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Brief process for pole placement in Matlab:</p>

<ol>
<li>Check that the system is actually controllable. </li>
</ol>

<p>.</p>

<pre><code>nStates = size(A,1);
R = zeros(nStates,0);
for n = 1:nStates
    R(:,n) = (A^(n-1))*B;
end
if rank(R) == nStates
    disp('Controllable');
else
    disp('Not controllable');
end
</code></pre>

<ol start="2">
<li>Find the open-loop poles. Get their natural frequencies. </li>
</ol>

<p>.</p>

<pre><code>olPoles = eig(A);
wns = sqrt(sum(abs(olPoles).^2,2));
</code></pre>

<p>In your case, the first pole is huge and negative, the other two are purely imaginary. I'm assuming you want to get rid of this oscillation and keep everything else the same. In any event, whatever you choose:</p>

<ol start="3">
<li><p>Pick new poles. There's a lot of guidance available online about how to pick "good" poles, so I'm not going to go into any detail here. Like I said, at least to start with, I'd just change (create) damping on the two undamped poles and iterate from there. Whatever you choose, get your closed loop poles by doing the following for each pole:</p>

<p><code>clPole = - (dampingRatio*wn) +/- 1i*wn*sqrt(1-dampingRatio);</code></p></li>
</ol>

<p>Do this for each pole. If you don't want to change a particular pole, then just set <code>clPole(n) = olPole(n);</code>.</p>

<ol start="4">
<li>Setup the equations to be solved to insert your new poles. </li>
</ol>

<p>.</p>

<pre><code>syms P1 P2 P3;
syms s;
syms g1 g2 g3;

G = [g1 g2 g3];
desiredPoleEquation = (s-P1)*(s-P2)*(s-P3);
currentPoleEquation = det([s*eye(nStates) - (A - B*G)]);

[desiredCoeffs,desiredSValues] = coeffs(expand(desiredPoleEquation),s);
[currentCoeffs,currentSValues] = coeffs(expand(currentPoleEquation),s);

equationSetup = sym(zeros(nStates+1,2));
controllerGainEquations = sym(zeros(nStates+1,1));
for i = 0:nStates
    desiredIndex = find(desiredSValues == s^i);
    if ~isempty(desiredIndex)
        equationSetup(i+1,1) = desiredCoeffs(desiredIndex);
    else
        equationSetup(i+1,1) = 0;
    end
    currentIndex = find(currentSValues == s^i);
    if ~isempty(currentIndex)
        equationSetup(i+1,2) = currentCoeffs(currentIndex);
    else
        equationSetup(i+1,2) = 0;
    end
    controllerGainEquations(i+1) = equationSetup(i+1,1) == equationSetup(i+1,2);
end
</code></pre>

<p>The end of the block of code above is <code>controllerGainEquations</code>, which has a function of <code>P1,P2,...,PN</code> on the left and <code>g1,g2,...,gN</code> on the right. </p>

<ol start="5">
<li>Solve the equation <code>controllerGainEquations</code> for <code>[g1,g2,...,gN]</code>. The result here will be gains as a function of poles <code>P1,P2,...,PN</code>. </li>
</ol>

<p>.</p>

<pre><code>controllerGains = sym(zeros(nStates,1));
controllerGainsStruct = solve(controllerGainEquations,[g1,g2,g3]);
controllerGains(1) = controllerGainsStruct.g1;
controllerGains(2) = controllerGainsStruct.g2;
controllerGains(3) = controllerGainsStruct.g3;
</code></pre>

<ol start="6">
<li>Almost done - now plug in the values you picked for the poles. </li>
</ol>

<p>.</p>

<pre><code>controllerSolvedGains = controllerGains;
controllerSolvedGains = subs(controllerSolvedGains,P1,clPoles(1));
controllerSolvedGains = subs(controllerSolvedGains,P2,clPoles(2));
controllerSolvedGains = subs(controllerSolvedGains,P3,clPoles(3));
</code></pre>

<ol start="7">
<li>Use the gains correctly. Your control signal is now $u = -G*x$, where $x$ is the vector of states. It is not whatever you originally had. You don't add anything to it. It's not anything other than $u = -G*x$. </li>
</ol>

<p>Finally, a couple notes on the method I've given:</p>

<ol>
<li>I wrote this myself because this method will solve for gains with a <em>symbolic</em> state matrix. Pole placement is a method for linear, time-invariant (LTI) systems, so in theory you shouldn't be using a symbolic state matrix, but it's handy for scenarios where you have configurable/variable parameters and want one calculation for gains.</li>
<li>The gains calculated this way aren't necessarily "robust". Matlab's <code>place()</code> command is supposed to create "better" gains. </li>
<li>Protip - if you're getting huge number fractions as a result, it's because <code>controllerSolvedGains</code> is still a symbolic. Use <code>double(controllerSolvedGains)</code> to get a succinct number to use. </li>
<li>Finally, this just works to drive the states to zero. If you want to do reference tracking, you should look into integral control, which requires adding a state (integral error) to the system $A$ matrix. That's beyond the scope of what I wrote here. </li>
</ol>

<h2>:EDIT:</h2>

<p>Every step I wrote is the long way to do it. If you have a non-symbolic state matrix and you have the Control System toolbox, then you can do each step as follows:</p>

<ol>
<li>Check that the system is actually controllable. </li>
</ol>

<p>.</p>

<pre><code>nStates = size(A,1);
olSys = ss(A,B,C,D);
R = ctrb(olSys);
if rank(R) == nStates
    disp('Controllable');
else
    disp('Not controllable');
end
</code></pre>

<ol start="2">
<li><p>Find the open-loop poles. Get their natural frequencies. </p>

<p><code>[wns, dampingRatios, olPoles] = damp(olSys);</code></p></li>
<li><p>Pick new poles. You have to do this on your own.</p></li>
</ol>

<p>4 to 6.  Setup, solve, and substitute the closed loop poles to find the gains. All of this is done in one command:</p>

<pre><code>`G = place(A,B,clPoles);`
</code></pre>

<ol start="7">
<li>Use the gains correctly. This is still up to you to do.</li>
</ol>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-10825" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-10825">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-10825">Load Comments</button></br>
			<div id = "commentsection-10825" class = 'collapse'>
			<div id = "comment-19494" class = "comment">
				<p>can I replace first code snip with ctrb function?</p>
			</div>
			<div id = "comment-19497" class = "comment">
				<p>@AmmarAtef - Yes, you can use the built-in functions if you have the Control Systems toolbox and don't have a symbolic state matrix. I'll edit the answer to reflect those commands.</p>
			</div>
			<div id = "comment-19537" class = "comment">
				<p>I think picking new pole is not easy to predict, but I did it using sisotool, it is very helpful toll</p>
			</div>
			<div id = "comment-19540" class = "comment">
				<p>@AmmarAtef - Generally, the further left you go on the real/imaginary axes, the faster the system responds. This comes at the cost of requiring more actuator authority. If you setup the controller to respond faster than the system is actually capable of responding, you wind up with actuator saturation and this causes nonlinearities. Remember that the state feedback controller is for **linear** time-invariant systems. You can generally get a little faster response, as far as rise time and settling times are concerned, by allowing a little oscillation. This is done by altering the damping ratio.</p>
			</div>
			<div id = "comment-19542" class = "comment">
				<p>I will take care with that, I'm reading ogata's book for modern control and I will learn more about all of that</p>
			</div>
			</div>
				<textarea id = "speech-10825" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10825">
					<img id="start_img-10825" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10825">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>