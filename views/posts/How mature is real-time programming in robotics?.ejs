<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How mature is real-time programming in robotics?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-128" class = "post">
			<h2>Question</h2>
			<div id="vote-128" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">18</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 2950</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How mature is real-time programming in robotics?</h2>
<p><strong>Edit:</strong> I don't know why, but this question seems to be confusing many people. I am aware of when/where/why/how to use real-time. I am interested in knowing whether people who have a real-time task would actually care enough to implement it in real-time or not.</p>

<p>There's no need to mention why real-time operations are important for a robot. My question is however, how much is it actually used in robotics?</p>

<p>Take <a href="https://robotics.stackexchange.com/q/6/158">this question</a> for example. Only one answer mentions any platform with real-time capabilities, and it is far from the top too. ROS apparently, being a very popular platform which is not real-time.</p>

<p>In the real-time world however, RTAI<sup>1</sup> seems to be the only workable <em>free</em> real-time platform of use. It is however, limited to Linux (no problem), badly documented and slowly developed.</p>

<p><del>So, how much is real-time behavior sought after among robotics developers?</del> The question is, how much are developers inclined to write real-time applications when real-time behavior is actually needed? If not much, why?</p>

<p>For example, reflexive behavior based on tactile data, cannot go through ROS because it would lose its real-time property. But do people really come up with a real-time solution or use ROS anyway, ignoring the real-time property?</p>

<p><sup>1</sup> or similarly Xenomai</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-128" data-toggle = "popover">
				<p>user name : Shahbaz</p>
				<p> user reputation : 2615</p>
				<p class = "tagcontent" id = "usertaginfo-128">{'None': 193, 'usb': 12, 'distributed-systems': 7, 'microcontroller': 1, 'embedded-systems': 7, 'servomotor': 1, 'platform': 18, 'can': 1, 'machine-learning': 12, 'real-time': 18, 'mobile-robot': 1, 'rs232': 12, 'software': 20}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-128">Load Comments</button></br>
			<div id = "commentsection-128" class = 'collapse'>
			<div id = "comment-205" class = "comment">
				<p>I think this is a great question. Consider splitting it into two and clarifying your main question. 'Can ROS be used for real-time?' or 'Is ROS used with real-time?' (2 different questions) are separate from your main question.</p>
			</div>
			<div id = "comment-206" class = "comment">
				<p>@hauptmech, well ROS certainly can't be used for real-time, since it's not!</p>
			</div>
			<div id = "comment-328" class = "comment">
				<p>I agree with @hauptmech. The questions is confusing. On the top your are asking, *how many people/how often* real-time systems are used and later on your asking *when/in which case*. Both are good questions, so please split it into two or reduce to one. Thanks!</p>
			</div>
			<div id = "comment-347" class = "comment">
				<p>@bit-pirate, I don't understand why you say that I asked _when/in which case_. I never asked such a thing. Like I said _The question is, how much are developers inclined to write real-time applications when real-time behavior is actually needed?_ In other words, _what percentage of applications that **do** require real-time behavior, are **actually** implemented in real-time?_ I personally know when and in which case real-time behavior is needed and have absolutely no question on that matter. In fact, I am surprised to see answers explaining _that_.</p>
			</div>
			<div id = "comment-362" class = "comment">
				<p>Thanks for the clarification! For me, the title was confusing. IMO real-time programming + implementation is mature in Robotics, but it involves more efforts (time, money, skill etc), so most people avoid it, when it is not really necessary.</p>
			</div>
			<div id = "comment-2609" class = "comment">
				<p>Perhaps related [question](http://robotics.stackexchange.com/questions/1148/dynamic-programming-algorithm-aka-bellman-equation-in-robotics) about dynamic programming, sorry I could not understand understand the question. It looks like this q has nothing to do with DP so asked a new question.</p>
			</div>
			</div>
				<textarea id = "speech-128" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-128">
					<img id="start_img-128" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-128">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-129"  class = "post">
				<h2>Answer</h2>
			<div id="vote-129" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The purpose of the software determines whether it needs to be strictly real-time.</p>

<p>Where the purpose is path planning or localization, often a low frequency is sufficent, for example, 10Hz. In these cases, a player/stage setup running on Linux is fine. We can see that there are few problems if one time step is a bit longer or shorter.</p>

<p>Strictly real-time behaviour is required if the robot dynamics are fast. For example, moving a robotic arm to track a position, or to handle/grip objects, and move them. If a time step is missed, the position may overshoot undesirably, and we may want more predictable behaviour. In this case, we may have a frequency up to 1kHz or more. If an operating system is used, we want a real-time operating system.</p>

<p>Real-time behaviour can be accomplished in embedded applications, by using timers and interrupts (compiled C code on a microcontroller). In this case, we must ensure that the processing load is not too high so that a regular sampling frequency can be maintained.</p>

<p>Robots using computers/microprocessors (because more processing power is required), will need to use a real-time operating system to guarantee high sampling rates.</p>

<hr>

<p>Therefore, whether real-time behaviour is required depends on what the developer intends to use it for.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-129" data-toggle = "popover">
				<p>user name : ronalchn</p>
				<p> user reputation : 2449</p>
				<p class = "tagcontent" id = "usertaginfo-129">{'None': 187, 'two-wheeled': 20, 'inverse-kinematics': 15, 'interrupts': 5, 'microcontroller': 13, 'wiring': 7, 'c': 8, 'avr': 5, 'brushless-motor': 2, 'joint': 15, 'kinematics': 15, 'hall-sensor': 2, 'mobile-robot': 20, 'arm': 15}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-129">Load Comments</button></br>
			<div id = "commentsection-129" class = 'collapse'>
			<div id = "comment-140" class = "comment">
				<p>Thanks for the reply. Maybe my question needs better wording, but I didn't want to ask "when to use real-time", but "how often do people actually use real-time when real-time is needed". Nevertheless, your real-time behavior on microcontrollers, without the need for a real-time platform was a good point I hadn't considered.</p>
			</div>
			<div id = "comment-141" class = "comment">
				<p>On a side-note, real-time and fast are two orthogonal concepts. If a path planner has to decide strictly within one minute, then it is a real-time application. Although I understand why you'd mention a fast robot.</p>
			</div>
			</div>
				<textarea id = "speech-129" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-129">
					<img id="start_img-129" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-129">Comment</button>
			<br><div id = "ans-130"  class = "post">
				<h2>Answer</h2>
			<div id="vote-130" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">8</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>A real time system is not really required for many (most?) robotic control systems. As long as you have a control loop that runs fast enough, with low enough jitter, and doesn't miss too many cycles, then this is quite adequate for robotic control and servoing.</p>

<p>As evidence of this, let me present the PR2 and the Shadow  Robot Hand:</p>

<p><img src="https://i.stack.imgur.com/72drV.jpg" alt="PR2"></p>

<p>This robot has about 20 degrees of freedom, all of which are servoed through ROS's main loop. Or how about the Shadow Robot Hand, which also has 20 DOFs, plus an array of tactile and other sensors, and is also servoed through ROS's main loop.</p>

<p>The ROS main loop suffers from a little jitter, sometimes as much as 100us, and even sometimes misses cycles altogether. But it doesn't matter if 99.9% of cycles are executed successfully. </p>

<p>The use of many cores within the host PCs means that one whole core is dedicated to running the main loop, and so it is very rarely delayed by other tasks.</p>

<p>The main reason for using a really real-time OS for a robotic system is for safety. If the robot is working in a safety critical situation, then it is your responsibility to guarantee 100% control up-time, and part of this is guaranteeing the real time nature of it. </p>

<p>Whether you use a real-time OS or not, your servos should do something safe in the event that the control loop dies entirely. This safety system would also be helpful on the rare occasion your non-real-time OS skips more than a cycle. For example, on the Shadow Hand, the motors are halted if the control loop misses more than 20 cycles (20ms). I have never seen this happen though.</p>

<hr>

<p><strong>Added</strong></p>

<p>Another way to think about it is this: What update rate does your servo system actually need? If it's a largish arm, and doesn't need super high performance, high speed positioning, then 500Hz might be sufficient. For driving around, 200Hz is probably sufficient. In both of these cases, if your loop is actually running at 1000Hz, then a late or missing cycle really is no problem at all, as long as your control algorithm takes into account the actual elapsed time between loops.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-130" data-toggle = "popover">
				<p>user name : Rocketmagnet</p>
				<p> user reputation : 4235</p>
				<p class = "tagcontent" id = "usertaginfo-130">{'control': 31, 'force': 8, 'multi-agent': 5, 'pid': 29, 'air-muscle': 6, 'uav': 52, 'stepper-driver': 3, 'reliability': 5, 'motor': 12, 'esc': 1, 'mobile-robot': 6, 'ros': 35, 'stepper-motor': 3, 'tuning': 12, 'swarm': 10, 'research': 5, 'platform': 17, 'imu': 4, 'kalman-filter': 49, 'hri': 4, 'None': 266, 'raspberry-pi': 24, 'localization': 7, 'python': 7, 'torque': 3, 'brushless-motor': 28, 'failure': 5, 'force-sensor': 15, 'sensors': 20, 'pwm': 10, 'wireless': 10, 'servos': 7, 'wifi': 24, 'simulation': 6, 'servomotor': 11, 'particle-filter': 0, 'sensor-fusion': 4, 'automatic': 12, 'software': 17}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-130">Load Comments</button></br>
			<div id = "commentsection-130" class = 'collapse'>
			<div id = "comment-142" class = "comment">
				<p>So in short, you are saying that real-time is often not used, because non-real-time software works "good enough"?</p>
			</div>
			<div id = "comment-144" class = "comment">
				<p>@Shahbaz - I can't comment on exactly how often it's actually used, but I can say that if it is used, then it may well be unnecessary. We used to use RTAI, then abandoned it because it was actually hindering more than helping.</p>
			</div>
			<div id = "comment-150" class = "comment">
				<p>I would like to stress one point: you have so many processing power on the PR2 that you might get something "good enough". I worked on a robot with "only" a Core2 Duo. That's not an option there: the complete stack is taking each core 100% most of the time. Here, Rock (Orocos) and RT-Linux were necessary to hold the 1kHz control loop together.</p>
			</div>
			<div id = "comment-153" class = "comment">
				<p>@sylvain.joyeux - I agree. ROS performs pretty badly for control when you have only 2 cores.</p>
			</div>
			<div id = "comment-327" class = "comment">
				<p>@Rocketmagnet I'm sorry to have to downvote this one, but the PR2 part is wrong. On the PR2 there is a single real-time loop running at 1000Hz parallel to ROS (on Linux + RT PREEMPT), which is communicating via Ethercat with the motor controller boards, doing the actual motor control of each DOF. You have to be careful when programming controllers (e.g. a joint trajectory controller) in order to not break real-time and they also have special tools to manage them (e.g. load/unload them). Look [here](http://pr2support.willowgarage.com/wiki/PR2%20Manual/Chapter7) for more details.</p>
			</div>
			<div id = "comment-337" class = "comment">
				<p>@bit-pirate - According to our software guys, this is depreciated. I have also discussed the EtherCAT loop with the guys at WG, and they inform me that the loop is not hard real time. I have also directly measured the jitter on this loop because we make EtherCAT based hardware with ROS drivers, and I have had to go to some effort to compensate for the fact that it runs a very soft real time control loop. Lastly I have seen the actual code for the inner loop. You know how the 1kHz timing is implemented? It's a sleep instruction!</p>
			</div>
			<div id = "comment-361" class = "comment">
				<p>@Rocketmagnet: Interesting indeed! So, what is deprecated? Do they not use RT PREEMPT anymore? Actually, I thought 100us is not a bad performance for Linux + RT PREEMPT. Of course, some say such a performance is not hard realtime. Anyway, I actually only wanted to make sure, that people don't expect good behaviour when controlling a motor directly from within Linux/Windows/ROS/... without any additional tweaks, such as real-time extension (RT PREEMPT, Xenomai) and specific tools (e.g. OROCOS). PS: I didn't have enough karma to downvote you anyway! :-)</p>
			</div>
			<div id = "comment-366" class = "comment">
				<p>@bit-pirate - I couldn't tell you in detail. Maybe ask it as a question. It's actually quite possible to do perfectly good motor control with 100us jitter. And it's normally less than this. I think that you have to give the loop its own core.</p>
			</div>
			</div>
				<textarea id = "speech-130" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-130">
					<img id="start_img-130" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-130">Comment</button>
			<br><div id = "ans-135"  class = "post">
				<h2>Answer</h2>
			<div id="vote-135" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Our company builds robots using FreeRTOS running on PIC microcontrollers.  For us, the main reasons to use FreeRTOS is the ease of rearranging priorities on tasks, handling multiple communication lines simultaneously, and easy communication between interrupt handlers and main tasks.  Microcontrollers are far cheaper than putting a full linux machine into each robot we produce as well.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-135" data-toggle = "popover">
				<p>user name : Crake</p>
				<p> user reputation : 183</p>
				<p class = "tagcontent" id = "usertaginfo-135">{'None': 8}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-135" class = 'collapse'>
			</div>
				<textarea id = "speech-135" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-135">
					<img id="start_img-135" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-135">Comment</button>
			<br><div id = "ans-140"  class = "post">
				<h2>Answer</h2>
			<div id="vote-140" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">9</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Remember that there's <em>Real Time</em> and there's <strong><em>Real Time</em></strong>.</p>

<p><a href="http://en.wikipedia.org/wiki/Real-time_computing#Criteria_for_real-time_computing">Hard Real time</a> is difficult to achieve without hardware support or low level software support, but you often don't need everything to be <em>Hard Real Time</em> capable. <a href="http://en.wikipedia.org/wiki/Real-time_computing#Criteria_for_real-time_computing">Soft &amp; Firm Real Time</a> response is much easier to achieve and is often more than adequate for many applications.</p>

<p>Also, different parts of a system can have very different <em>real time</em> requirements. If you are running software PID loops, they really should have a <em>hard real time</em> response (you really don't want to have to choose between soft tuning your PIDs or tuning them hard and having them occasionally go unstable, for instance). A vision system might have <em>firm real time</em> response requirements, performance will degrade if you can't process the image in time for the next decision but it need not prevent the system running, in this case if you can't process it in time you are better off throwing away the partial results and not loosing time starting analysis on the next frame. Finally your overall planning and coordination (probably the most <em>complex</em> part of your robotic system) can often remain firmly in the domain of <em>soft real time</em>.</p>

<p>Even in the realm of Windows PCs you can get <em>hard real time</em> performance, you just need the right software with the right hooks into the kernel. <a href="http://en.wikipedia.org/wiki/Beckhoff">Beckhoff</a>'s TwinCat soft PLC quite happily ran a high scan rate PLC by slicing half of a Pentium's machine cycles, giving the other half to Windows NT, and this was over a decade ago. Even modern control systems like some options in <a href="http://www.aerotech.com/product-catalog/motion-controllers/automation-3200.aspx">Aerotech's A3200 range</a> do the grunt work on the host PC, with the low level kernel taking as much CPU time as it needs for the <em>hard real time</em> requirements and leaving the rest of the CPU cycles for Windows 7 to use!</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-140" data-toggle = "popover">
				<p>user name : Mark Booth</p>
				<p> user reputation : 3037</p>
				<p class = "tagcontent" id = "usertaginfo-140">{'control': 7, 'quadcopter': 2, 'None': 258, 'tuning': 7, 'uav': 2, 'design': 2, 'stepper-motor': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-140">Load Comments</button></br>
			<div id = "commentsection-140" class = 'collapse'>
			<div id = "comment-191" class = "comment">
				<p>The distinction here is quite pertinent... even in "real world" low-level systems, the really real-time bit is quite small (based on a timer tick interrupt) whereas most of the system is nominally real-time (but +/- a few nano-seconds here and there is tolerable).  I smile when I see people talking about real-time applications built on WindowsCE or Linux...</p>
			</div>
			<div id = "comment-192" class = "comment">
				<p>As I say @Andrew with the right software, even Windows 7 can be made *hard real time* with an [RTX](http://www.intervalzero.com/products/rtx-overview/). Not sure why you don't consider Windows CE to be real-time though, it's had real-time deterministic task scheduling since version 2 and Linux can be made realtime with a kernel like [RTLinux](http://en.wikipedia.org/wiki/RTLinux).</p>
			</div>
			<div id = "comment-198" class = "comment">
				<p>Hi again Mark (not sure who is stalking who here...) - I agree that you *can* do it, but harsh experience has shown that in many (?most?) cases users (managers) ignore the required add-ons and assume that the vanilla system will do.</p>
			</div>
			<div id = "comment-199" class = "comment">
				<p>@Andrew - My experience with RTX was that *it just worked*. Back in the Pentium 4 days you had to be careful not to use integrated graphics or audio which saturated the PCI bus, but that shouldn't be a problem these days.</p>
			</div>
			</div>
				<textarea id = "speech-140" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-140">
					<img id="start_img-140" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-140">Comment</button>
			<br><div id = "ans-177"  class = "post">
				<h2>Answer</h2>
			<div id="vote-177" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>If you actually need real-time, then you use a real-time operating system. Safety monitoring, data acquisition, and constant sample rate control loops are common subsystems that use real-time scheduling.</p>

<p>The real-time portion of the programming is usually as small as possible, because it's more difficult to debug and less code is easier to check for correctness. Documentation on real-time OS's is usually pretty good (including RTAI/Xenomai).</p>

<p>I've used QNX and RTAI->Xenomai in different <em>real</em> robotics projects. I preferred QNX but Xenomai was just as effective.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-177" data-toggle = "popover">
				<p>user name : hauptmech</p>
				<p> user reputation : 2621</p>
				<p class = "tagcontent" id = "usertaginfo-177">{'battery': 2, 'None': 220, 'lithium-polymer': 2}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-177" class = 'collapse'>
			</div>
				<textarea id = "speech-177" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-177">
					<img id="start_img-177" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-177">Comment</button>
			<br><div id = "ans-293"  class = "post">
				<h2>Answer</h2>
			<div id="vote-293" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p><a href="http://www.orocos.org/" rel="nofollow">Orocos</a> is a mature real time robotics control software framework.  I have seen it used to successfully control high speed robotic manipulators with hard real time requirements.  It has many of the same framework level components as ROS, communications, configuration, serialization, and component based packaging.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-293" data-toggle = "popover">
				<p>user name : Joe</p>
				<p> user reputation : 156</p>
				<p class = "tagcontent" id = "usertaginfo-293">{'None': 4}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-293" class = 'collapse'>
			</div>
				<textarea id = "speech-293" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-293">
					<img id="start_img-293" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-293">Comment</button>
			<br><div id = "ans-298"  class = "post">
				<h2>Answer</h2>
			<div id="vote-298" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>In response to "when/in which case" real-time systems are used:</p>

<p>In my experience, motion control is the main application for real-time systems. For controlling motors a high frequency (100hz, 1000hz and more) and low jitter (time variations) are important. Safety is a big point here. Consider a robot among humans: For example, you want/need to ensure that the robot (arm) stops in a specific time frame/distance.</p>

<p>For other tasks such as path planning, vision processing and reasoning real-time system are not that important and often avoided due to the overhead in development time and hardware costs.</p>

<p>Nowadays, big robots such as the PR2 combine both worlds. In the real-time context of the RT enabled operating system (e.g. Linux + Xenomai) motion control is happening and in the non-real-time part (user land), vision processing and planning are embedded in systems like ROS. Both can run on the same computer.</p>

<p>I'm happy to edit this answer, once the question has been clarified. :-)</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-298" data-toggle = "popover">
				<p>user name : bit-pirate</p>
				<p> user reputation : 236</p>
				<p class = "tagcontent" id = "usertaginfo-298">{'None': 12}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-298" class = 'collapse'>
			</div>
				<textarea id = "speech-298" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-298">
					<img id="start_img-298" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-298">Comment</button>
			<br><div id = "ans-311"  class = "post">
				<h2>Answer</h2>
			<div id="vote-311" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Start thinking about your robot in terms of multiple CPUs and the real time question shifts.  If you have an algorithm that needs high speed reliable feedback such as a two wheel balancer or a quad-copter stabilizer or a servo pulse out, real time is extremely important, but the task is also very constrained.</p>

<p>You can offload a control loop like this to a dedicated real time CPU such as the cheap 8 bit AVR or low end 32 bit ARMs found in the Arduino class of devices.  There's nothing preventing you from adding many dozens of these small MCUs running dedicated control loops, USB device enumeration even makes this easy.</p>

<p>Now that you have the timing sensitive control loops handled by a dedicated CPU, you can relax the real time needs of the 'brain' of the robot which can run higher end logic using components such as ROS on Linux or Kinect for Windows.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-311" data-toggle = "popover">
				<p>user name : Jay Beavers</p>
				<p> user reputation : 969</p>
				<p class = "tagcontent" id = "usertaginfo-311">{'None': 68}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-311" class = 'collapse'>
			</div>
				<textarea id = "speech-311" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-311">
					<img id="start_img-311" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-311">Comment</button>
			<br><div id = "ans-466"  class = "post">
				<h2>Answer</h2>
			<div id="vote-466" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Yes, assuming the hardware resources can meet the timing requirements (enough processing power, low enough latency), when the scheduler can not sequence processes and threads appropriately, then one uses a real-time scheduler, usually attached to a kernel specifically optimized for the challenges of this. Hardware drivers can also be optimized for real-time conditions.</p>

<p>Yes, if ones software cannot be guaranteed to do it's job in the required time constraints, then one uses real-time approaches.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-466" data-toggle = "popover">
				<p>user name : hauptmech</p>
				<p> user reputation : 2621</p>
				<p class = "tagcontent" id = "usertaginfo-466">{'battery': 2, 'None': 220, 'lithium-polymer': 2}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-466" class = 'collapse'>
			</div>
				<textarea id = "speech-466" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-466">
					<img id="start_img-466" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-466">Comment</button>
			<br><div id = "ans-10041"  class = "post">
				<h2>Answer</h2>
			<div id="vote-10041" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>One good solution is to do BOTH.  A design I use place "hard" real time functions on a small micro controller, tight servo control loops and such.  Then there is another CPU that is larger, running Linux and ROS.  I let ROS handle the higher level tasks and the uP handle things like controlling a stepper motor or running a PID loop.    </p>

<p>As said above by others you CAN allow a non-real-time OS to run 1KHz control loops but in order for this to work you need a gross over-kill sized computer that spends most of it's time in an idle loop.  If you run the Linux/ROS computer at near 100% CPU utilization the real-time performance is poor.   Using a two tier design allows you to always get very good RT performance and also use a smaller, less power hungry computer (possibly a Pi2  higher level tasks.)   My uP currently does not run any OS but I'm moving to FreeRTOS </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-10041" data-toggle = "popover">
				<p>user name : user3150208</p>
				<p> user reputation : 431</p>
				<p class = "tagcontent" id = "usertaginfo-10041">{'None': 27}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-10041" class = 'collapse'>
			</div>
				<textarea id = "speech-10041" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10041">
					<img id="start_img-10041" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10041">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>