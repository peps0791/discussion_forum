<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How to transfer signed integers with libusb?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-7327" class = "post">
			<h2>Question</h2>
			<div id="vote-7327" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 236</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How to transfer signed integers with libusb?</h2>
<p>Folks at programmers stack exchange asked me ask here:</p>

<p>I want to communicate with an arduino and sent integers it. I code this program in C++. I initialy used bulk_transfer(), but it sends only char data.</p>

<p>This in the API reference for libusb:
<a href="http://libusb.org/static/api-1.0/group__syncio.html" rel="nofollow">http://libusb.org/static/api-1.0/group__syncio.html</a></p>

<p>Here is the prototype of bulk_transfer()</p>

<p>int     libusb_bulk_transfer (struct libusb_device_handle *dev_handle, unsigned char endpoint, unsigned char *data, int length, int *transferred, unsigned int timeout)</p>

<p>As you can see, <em>data</em> is an unsigned char pointer, that is, a pointer to a buffer containing <em>length</em> unsigned chars. I can successfully transcieve strings. How do I transfer integers with sign?</p>

<p>Currently I am thinking about a system in which the arduino asks for the digit by sending a character and my program sends the number as reply followed by the sign, which is requested next. Is this solution viable? Or should I transfer the integer as a string? Is there a better way?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-7327" data-toggle = "popover">
				<p>user name : daltonfury42</p>
				<p> user reputation : 162</p>
				<p class = "tagcontent" id = "usertaginfo-7327">{'underwater': 7, 'None': 0, 'usb': 3, 'arduino': 4, 'communication': 4, 'localization': 6, 'operating-systems': 1, 'c++': 2, 'odometry': 1, 'kinematics': 1, 'sensor-fusion': 6, 'sensors': 6, 'ros': 1, 'differential-drive': 1}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-7327">Load Comments</button></br>
			<div id = "commentsection-7327" class = 'collapse'>
			<div id = "comment-10416" class = "comment">
				<p>Please try to clarify your question a bit more. First of all, `bulk_transfor` doesn't sound like it should be limited to 1 byte. If the minimum size of the number is 9 bits, what is the maximum? Do you then really have just unsigned numbers accompanied by a sign bit (and if so, why)? In the end, as long as you have a method of transferring one byte, you can transfer as many bytes as you want with any format, for example send a byte saying what is the sign, then send the bytes of your number from most significant to least significant, or in whatever order you feel like.</p>
			</div>
			<div id = "comment-10417" class = "comment">
				<p>There are macros to convert `integer` and `long` from host order to network order and back. I would use them for this problem. See http://linux.die.net/man/3/ntohl</p>
			</div>
			<div id = "comment-10428" class = "comment">
				<p>@Shahbaz, I revised  6 to what I think user3073656 meant to say, that he or she is able to send multiple-character strings ok, and wants to know how to send numbers.</p>
			</div>
			<div id = "comment-10429" class = "comment">
				<p>I see the update now. I'd write an answer later today.</p>
			</div>
			<div id = "comment-10465" class = "comment">
				<p>@user3073656, did you see my answer? Does it solve your problem? If so, feel free to mark it as accepted.</p>
			</div>
			</div>
				<textarea id = "speech-7327" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7327">
					<img id="start_img-7327" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7327">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-7335"  class = "post">
				<h2>Answer</h2>
			<div id="vote-7335" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>What you are looking for is called <a href="https://en.wikipedia.org/wiki/Serialization" rel="nofollow">serialization</a>. Serialization is the process of creating a string (a serial stream of data) (not necessarily NUL-terminated) from arbitrary data.</p>

<p>The issue serialization addresses is the fact that the same data are represented in different computers differently. For example, take this <code>struct</code>:</p>

<pre><code>struct A
{
    unsigned int x;
    unsigned long y;
};

struct A a = { 0x12345678, 0x1020304050607080LLU };
</code></pre>

<p>This would be laid out in memory in a 32-bit little-endian CPU like this:</p>

<pre><code>lowest address           highest address
       +--+--+--+--+--+--+--+--+
       |78|56|34|12|80|70|60|50|
       +--+--+--+--+--+--+--+--+
        \____ ____/ \____ ____/
             V           V
             x           y
</code></pre>

<p>On a 32-bit big-endian CPU like this:</p>

<pre><code>lowest address           highest address
       +--+--+--+--+--+--+--+--+
       |12|34|56|78|50|60|70|80|
       +--+--+--+--+--+--+--+--+
        \____ ____/ \____ _____/
             V           V
             x           y
</code></pre>

<p>On a 64-bit little-endian CPU like this:</p>

<pre><code>lowest address                    highest address
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|78|56|34|12|??|??|??|??|80|70|60|50|40|30|20|10|
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
 \____ ____/ \____ ____/ \__________ __________/
      V           V                 V
      x         padding             y
</code></pre>

<p>On a 16-bit big-endian microcontroller like this:</p>

<pre><code>lowest address           highest address
       +--+--+--+--+--+--+--+--+
       |56|78|??|??|50|60|70|80|
       +--+--+--+--+--+--+--+--+
        \_ _/ \_ _/ \____ ____/
          V     V        V
          x  padding     y
</code></pre>

<p>In the above, <code>??</code> means irrelevant values where the compiler has introduced padding to align <code>long</code>. The values given to <code>a.x</code> and <code>a.y</code> are intentionally too large to fit in some architectures just so that in this example you could identify what byte belongs to what.</p>

<p>Now the issue is that if you simply give the byte-representation of this struct from one computer to another, for example by simply transmitting over the network, the other computer is not guaranteed to see the same data. Imagine if in the example above, the 64-bit computer sends the representation to the 16-bit microcontroller, the <code>x</code> value would have the wrong byte order, and <code>y</code> value would be garbage taken from the padding in the original struct. If the 16-bit microcontroller sends the representation to the 64-bit computer, the <code>x</code> value would be half garbage, and the <code>y</code> value would be read outside the actual buffer sent, which is anything that happens to be there, such as your password.</p>

<p>Now that you understand the problem, you need to learn how to serialize your data.  If you are interfacing with a system where serialization is already in place, of course you need to follow its rules.  However, if you are designing your system, you are free to do it however you like!  First, it's a good idea to define a fixed size for your data.  For example, in the example above, we could have defined <code>struct A</code> like this:</p>

<pre><code>struct A
{
    uint32_t x;
    uint64_t y;
};
</code></pre>

<p>Doing this, now you know that <code>x</code> for example is always going to need 4 bytes to transfer, and you should expect to extract 4 bytes on the other side to reconstruct <code>x</code>.  Note that, you still can't send the memory representation of this <code>struct</code> from one computer to another because both the paddings could be different and the byte order.</p>

<p>Next, you need to think about in which order you want to send the bytes. Let's say you want to send them in big-endian. You may also need to think about floating point numbers. How are you going to represent them? One possibility is to send them as two numbers: what comes before the <code>.</code> and what comes after it. How would you handle sign? This all depends on your application.</p>

<p>So, let's serialize <code>struct A</code> with the assumption that it is going to be presented in big-endian. The code is very simple, you simply put the bytes in the order you define in a string and send it:</p>

<pre><code>size_t serialize_struct_A(struct A *data, unsigned char *buf, size_t buf_len)
{
    size_t len = 0;

    /* we need 12 bytes for struct A, so buffer should have enough size */
    if (buf_len &lt; 12)
        return 0;

    /* you can either be lazy and specify each byte */
    buf[len++] = data-&gt;x &gt;&gt; 24 &amp; 0xFF;
    buf[len++] = data-&gt;x &gt;&gt; 16 &amp; 0xFF;
    buf[len++] = data-&gt;x &gt;&gt; 8 &amp; 0xFF;
    buf[len++] = data-&gt;x &amp; 0xFF;

    /* or calculate simple formulas to do it in a loop */
    for (int i = 56; i &gt;= 0; i -= 8)
        buf[len++] = data-&gt;y &gt;&gt; i &amp; 0xFF;

    /* len should be 12 now! */
    return len;
}
</code></pre>

<p>Now we know for sure that <code>buf</code> contains the following regardless of the CPU architecture:</p>

<pre><code>lowest address                    highest address
+--+--+--+--+--+--+--+--+--+--+--+--+
|12|34|56|78|10|20|30|40|50|60|70|80|
+--+--+--+--+--+--+--+--+--+--+--+--+
 \____ ____/ \__________ __________/
      V                 V
      x                 y
</code></pre>

<p>We could transfer this, e.g., with libusb like this:</p>

<pre><code>unsigned char a_serialized[12];

size_t len = serialize_struct_A(&amp;a, a_serialized, sizeof a_serialized);
if (len == 0)
    { /* error, my buffer was too small */ }

int ret = libusb_bulk_transfer(dev, endpoint, a_serialized, len, &amp;transferred, timeout);
if (ret != 0)
    { /* error */ }
</code></pre>

<p>On the other side, when you receive the buffer, you can deserialize it. Again, the code is simple:</p>

<pre><code>int deserialize_struct_A(struct A *result, unsigned char *buf, size_t buf_len)
{
    size_t cur = 0;

    /* we need 12 bytes for struct A, so we should have received this much */
    if (buf_len &lt; 12)
        return -1;

    *result = (struct A){0};

    /* again, either the lazy way */
    result-&gt;x |= buf[cur++] &lt;&lt; 24;
    result-&gt;x |= buf[cur++] &lt;&lt; 16;
    result-&gt;x |= buf[cur++] &lt;&lt; 8;
    result-&gt;x |= buf[cur++];

    /* or the compact way */
    for (int i = 56; i &gt;= 0; i -= 8)
        result-&gt;y |= buf[cur++] &lt;&lt; i;

    return 0;
}
</code></pre>

<p>So far, we dealt with unsigned numbers. How would you handle signed numbers? 2's complement representation is quite ubiquitous, so one could think of sending the signed number as if it were unsigned, relying on the fact that the sender and the receiver both use 2's complement representation.  If you cannot rely on this, there are a variety of things one could do.  One simple way would be to use an extra byte for the sign:</p>

<pre><code>size_t serialize_int32_t(int32_t data, unsigned char *buf, size_t buf_len)
{
    size_t len = 0;

    /* we need 5 bytes for int32_t, so buffer should have enough size */
    if (buf_len &lt; 5)
        return 0;

    if (data &lt; 0)
    {
        buf[len++] = 1;
        data = -data;
    }
    else
        buf[len++] = 0;

    buf[len++] = data &gt;&gt; 24 &amp; 0xFF;
    buf[len++] = data &gt;&gt; 16 &amp; 0xFF;
    buf[len++] = data &gt;&gt; 8 &amp; 0xFF;
    buf[len++] = data &amp; 0xFF;

    /* len should be 5 now! */
    return len;
}

int deserialize_int32_t(int32_t *result, unsigned char *buf, size_t buf_len)
{
    size_t cur = 0;
    int sign;

    /* we need 5 bytes for int32_t, so we should have received this much */
    if (buf_len &lt; 5)
        return -1;

    *result = 0;

    /* again, either the lazy way */
    sign = buf[cur++];
    *result |= buf[cur++] &lt;&lt; 24;
    *result |= buf[cur++] &lt;&lt; 16;
    *result |= buf[cur++] &lt;&lt; 8;
    *result |= buf[cur++];

    if (sign)
        *result = -*result;

    return 0;
}
</code></pre>

<p>There are a variety of optimizations that are possible.  For example, if you are sure that the architectures on both end are big-endian and therefore the memory layout for integers are identical, you could just transfer the memory representation, for example:</p>

<pre><code> /* serialize */
 *(uint32_t *)(buf + len) = data-&gt;x;
 len += 4;

 /* deserialize */
 data-&gt;x = *(uint32_t *)(buf + len);
 len += 4;
</code></pre>

<p>Another optimization could be the following.  If you have multiple signed integers that you want to send with the method above, you could use one bit for the sign instead of one byte, then pack all those sign bits together in one or more bytes that are not necessarily placed directly before the number.  Or, if you are sure that a 4-byte number is always between 0x7FFFFFFF and -0x7FFFFFFF, you can use the most significant bit to store the sign with the rest of the bits showing the absolute value of the integer (this is called a sign and value method of representation for signed integers).</p>

<p>Bottom line is that you need to be able to lay out your numbers byte by byte and be able to recover them on the other side of the communication. How you do that entirely depends on yourself.</p>

<hr>

<p>Note: the code snippets above are not tested!</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-7335" data-toggle = "popover">
				<p>user name : Shahbaz</p>
				<p> user reputation : 2615</p>
				<p class = "tagcontent" id = "usertaginfo-7335">{'None': 193, 'usb': 12, 'distributed-systems': 7, 'microcontroller': 1, 'embedded-systems': 7, 'servomotor': 1, 'platform': 18, 'can': 1, 'machine-learning': 12, 'real-time': 18, 'mobile-robot': 1, 'rs232': 12, 'software': 20}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-7335" class = 'collapse'>
			</div>
				<textarea id = "speech-7335" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7335">
					<img id="start_img-7335" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7335">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>