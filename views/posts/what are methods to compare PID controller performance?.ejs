<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>what are methods to compare PID controller performance?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-7626" class = "post">
			<h2>Question</h2>
			<div id="vote-7626" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 62</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>what are methods to compare PID controller performance?</h2>
<p>If there are input and the sensor measured outputs. What are the objective methods to compare performance besides looking at inputs and outputs matching or not?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-7626" data-toggle = "popover">
				<p>user name : user14042</p>
				<p> user reputation : 134</p>
				<p class = "tagcontent" id = "usertaginfo-7626">{'control': 6, 'None': 5, 'robotic-arm': 6, 'pid': 5, 'embedded-systems': 2, 'joint': 6, 'imu': 1, 'kalman-filter': 2, 'design': 0}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-7626" class = 'collapse'>
			</div>
				<textarea id = "speech-7626" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7626">
					<img id="start_img-7626" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7626">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-7627"  class = "post">
				<h2>Answer</h2>
			<div id="vote-7627" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Controllers in general are judged typically by 3 criteria -</p>

<ol>
<li><p><a href="https://en.wikipedia.org/wiki/Rise_time" rel="nofollow">Rise time</a>, or how quickly the output gets to the input,</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Overshoot_(signal)" rel="nofollow">Percent overshoot</a>, or how much the output oscillates around the input, and</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Settling_time" rel="nofollow">Settling time</a>, or how long it takes the output to stabilize at the same value as the input.</p></li>
</ol>

<p>Typically you measure these with a step test - from an initial condition of zero, give an input of 1. The time it takes to get from 10 percent to 90 percent is rise time, settling time is generally how long it takes the output to <em>stay</em> within 2% or 5% of the input value, and percent overshoot is the farthest beyond the input that the output got. </p>

<p>Allowing some overshoot improves rise time, which means the system responds faster, but at the expense of a longer selling time. </p>

<p>Some more explanation, </p>

<p>Because of inertia, rise time and percent overshot are competing goals. What is the fastest way to drive 1000 feet? Go full throttle, of course. If you start slowing down to stop right at 1000 feet, you won't get to the mark as quickly as the person that is still going full throttle with no braking. </p>

<p>Conversely, while the person who doesn't start braking until they hit 1000 feet may have got there first, it will take time, some distance, to stop. They have overshot the 1000 foot mark. If they overshoot by 10 feet then go in reverse as quickly as they can, they get back to the mark, but will probably overshoot again, but not as much as the first time because they travel a shorter distance and thus can't get to the same top speed. This process repeats and is called oscillation. </p>

<p>This trade off, getting there quickly vs not overshooting, is typical. All of engineering is defining criteria and then finding the best trade off to meet the established criteria. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-7627" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-7627">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-7627">Load Comments</button></br>
			<div id = "commentsection-7627" class = 'collapse'>
			<div id = "comment-11025" class = "comment">
				<p>what are some examples to generate step input?</p>
			</div>
			<div id = "comment-11027" class = "comment">
				<p>Have the system at rest, then provide a constant new input, like going from 0 to suddenly 100% throttle on an RC car, power off to power on for a circuit, etc. You can do a step test for an input of any magnitude if you normalize the results, normalize meaning you divide everything by whatever the input was.</p>
			</div>
			<div id = "comment-11028" class = "comment">
				<p>I would just caution that you compare apples to apples in that you measure input and output in the same units. A gas pedal in a real car is actually a *torque* input, and the output would be engine *torque*, not engine speed or vehicle speed. In RC cars the input and output might actually be speeds, but it's something to consider (does the throttle command control motor current, i.e. torque, or does it control motor speed, as in an input to an ESC)</p>
			</div>
			</div>
				<textarea id = "speech-7627" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7627">
					<img id="start_img-7627" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7627">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>