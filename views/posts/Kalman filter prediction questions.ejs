<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Kalman filter prediction questions
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-12568" class = "post">
			<h2>Question</h2>
			<div id="vote-12568" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 96</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Kalman filter prediction questions</h2>
<p>I have a dataset where measurements were taken at 1&nbsp;Hz, and I am trying to use a Kalman filter to add predicted samples in between the measurements, so that my output is at 10&nbsp;Hz. I have it working ok when the velocity is linear, but when the direction changes, the filter takes a while to catch up. I am new to Kalman models, so am very likely making some mistakes in my settings. What can I do to improve this? See <a href="https://drive.google.com/open?id=0B4RPGA-5qhz0OE5HY3pIR1VBdTN5WU1FTlZsc3B2LU4zS240" rel="nofollow noreferrer">attached image</a> for an example, the red is measured data, with stepping in between measurements. The blue is the Kalman corrected. </p>

<p><code>std::vector&lt;double&gt; measurements</code> is a dummy data array I am testing with.</p>

<p>The main Kalman code is based on <a href="https://github.com/hmartiro/kalman-cpp/blob/master/kalman.cpp" rel="nofollow noreferrer">Github: hmartiro/kalman-cppkalman.cpp</a></p>

<p>My code is:</p>

<pre><code>int main(int argc, char* argv[]) {

  int n = 3; // Number of states
  int m = 1; // Number of measurements

  double dt = 1.0/30; // Time step

  Eigen::MatrixXd matA(n, n); // System dynamics matrix
  Eigen::MatrixXd matC(m, n); // Output matrix
  Eigen::MatrixXd matQ(n, n); // Process noise covariance
  Eigen::MatrixXd matR(m, m); // Measurement noise covariance
  Eigen::MatrixXd matP(n, n); // Estimate error covariance

  // Discrete motion, measuring position only
  matA &lt;&lt; 1, dt, 0, 0, 1, dt, 0, 0, 1;
  matC &lt;&lt; 1, 0, 0;

  // Reasonable covariance matrices
  matQ &lt;&lt; 0.001, 0.001, .0, 0.001, 0.001, .0, .0, .0, .0;
  matR &lt;&lt; 0.03;
  matP &lt;&lt; .1, .1, .1, .1, 10000, 10, .1, 10, 100;

  // Construct the filter
  KalmanFilter kf(dt,matA, matC, matQ, matR, matP);

  // List of noisy position measurements (yPos)
  std::vector&lt;double&gt; measurements = {
     10,11,13,13.5,14,15.2,15.6,16,18,22,20,21,19,18,17,16,17.5,19,21,22,23,25,26,25,24,21,20,18,16
  };

  // Best guess of initial states
  Eigen::VectorXd x0(n);
  x0 &lt;&lt; measurements[0], 0, 0;
  kf.init(dt,x0);

  // Feed measurements into filter, output estimated states
  double t = 0;
  Eigen::VectorXd y(m);


  for(int i = 0; i &lt; measurements.size(); i++) { //ACTUAL MEASURED SAMPLE

      yPos &lt;&lt; measurements[i];

      kf.update(yPos);

      for (int ji = 0; ji &lt; 10; ji++)  // TEN PREDICTED SAMPLES
      {
          t += dt;       

         kf.update(yPos);


          yPos &lt;&lt; kf.state().transpose(); //USE PREDICTION AS NEW SAMPLE

      }
  }

  return 0;
}
</code></pre>

			</div>
			<div class = "userinfosection"  id = "userinfo-12568" data-toggle = "popover">
				<p>user name : anti</p>
				<p> user reputation : 128</p>
				<p class = "tagcontent" id = "usertaginfo-12568">{'stereo-vision': 1, 'None': 0, 'monocular': 1, 'c++': 5, 'slam': 2, 'kalman-filter': 4}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-12568">Load Comments</button></br>
			<div id = "commentsection-12568" class = 'collapse'>
			<div id = "comment-22041" class = "comment">
				<p>This is probably a better fit for code review, but before this is closed, please make sure your variable names are bigger than a single character.</p>
			</div>
			<div id = "comment-22054" class = "comment">
				<p>Welcome to *Robotics* anti, but I'm afraid that questions asking for code improvement suggestions are off-topic because there are many ways to solve any given coding problem. We prefer *[practical, answerable questions based on actual problems that you face](http://robotics.stackexchange.com/help/dont-ask)*, so please try to include what you want to achieve, what you tried, what you saw & what you expected to see. Please take a look at [ask], [about] and the [*Robotics* question checklist](https://robotics.meta.stackexchange.com/q/1302/37) for advice on writing a good question.</p>
			</div>
			</div>
				<textarea id = "speech-12568" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-12568">
					<img id="start_img-12568" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-12568">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-12573"  class = "post">
				<h2>Answer</h2>
			<div id="vote-12573" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>This is what I believe is happening from a 1 min glance over your code.</p>

<p>You are passing true measurement data to your KF at 3 hz. Between the actual measurements you are passing the new state estimates to your KF as if they were measurements. This is incorrect. What you should be doing is  calling the prediction update. What you are doing now will artificially drive down the covariance of your KF because it thinks it is getting new measurements. This would explain why the filter responds slowly to actual measurements. </p>

<p>These are the lines from the git page that you want to run each time you want a new state estimate(without a new measurement!!!)</p>

<p><code>x_hat_new = A * x_hat;
 P = A*P*A.transpose() + Q;</code></p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-12573" data-toggle = "popover">
				<p>user name : holmeski</p>
				<p> user reputation : 1338</p>
				<p class = "tagcontent" id = "usertaginfo-12573">{'pose': 3, 'None': 101, 'computer-vision': 3, 'kalman-filter': 3}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-12573">Load Comments</button></br>
			<div id = "commentsection-12573" class = 'collapse'>
			<div id = "comment-22050" class = "comment">
				<p>Thank you! I have tried adding this function to the kalman :

```Eigen::VectorXd KalmanFilter::predict(Eigen::VectorXd& y)
{
 this->x_hat_new = this->A * this->x_hat;
 this->P = this->A*this->P*this->A.transpose() + this->Q;

 return this->x_hat_new;
}```

and changed the loop to:


```Eigen::VectorXd tmp = kf.predict(y);


y << tmp;```

but this gives me the same result as the unfiltered data. What am I missing? thanks again</p>
			</div>
			</div>
				<textarea id = "speech-12573" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-12573">
					<img id="start_img-12573" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-12573">Comment</button>
			<br><div id = "ans-12576"  class = "post">
				<h2>Answer</h2>
			<div id="vote-12576" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Your dT is 1/30 for some reason, but you said you had 1 Hz (1/1) and wanted 10 Hz (1/10). </p>

<p>But to your question, I would propagate the "filler" samples by <em>basing</em> off the last Kalman estimate, then resetting the filler states to the Kalman states whenever the Kalman filter updates. Your path will be a little jerky, but right now you're treating future estimates as measurements, so your predicted states and measured states are identical, which means it's going to screw with your filter's covariance estimates. </p>

<p>I would only update the filter when you have a real measurement. </p>

<p>So, for example, right now you have something like:</p>

<pre class="lang-matlab prettyprint-override"><code>fastTs = 1/10; % High speed sample rate
while (true)
    if (currentMeasurementExists)
        KalmanStates = KalmanFilter(KalmanStates, Measurement, fastTs);
    else
        KalmanStates = KalmanFilter(KalmanStates, FillerMeasurement, fastTs);
    end
    FillerMeasurement = C*KalmanStates; % C is the output matrix that converts states to measurements
end
</code></pre>

<p>What I would suggest instead is:</p>

<pre class="lang-matlab prettyprint-override"><code>fastTs = 1/10;
slowTs = 1/1;
fastA = A(fastTs); % Sorry, no easy way to show this because dT is tucked away
slowA = A(slowTs); % in your 'A' matrix, but you need to use the correct sample times in the correct locations.
while (true)
    if (currentMeasurementExists)
        KalmanStates = KalmanFilter(KalmanStates, Measurement, slowTs);
        FillerStates = KalmanStates;
    else
        FillerStates = fastA*FillerStates; % Remember to use fastTs for filler, slowTs for real measurements. 
    end
    FillerMeasurements = C*FillerStates;
end
</code></pre>

<p>So to reiterate again, you are treating filler samples as real measurements and updating the Kalman filter accordingly, which is updating your Kalman states (and updating Kalman covariances to expect better samples). </p>

<p>What I think you should do instead is to split the Kalman filter off to do <em>only</em> filtering on <em>only</em> real measurements. You know how your system should progress - this is the <code>A</code> matrix. So, evolve the system from the last known "good" state (last Kalman update) using the <code>A</code> matrix. When you get a new "good" state (new Kalman update), then reset the filler states to the Kalman states and continue propagating. </p>

<p>I would bet the biggest performance hit you're taking on this is that you're screwing up the covariance estimates, because all of your "measurements" are exactly what the filter would predict.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-12576" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-12576">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-12576">Load Comments</button></br>
			<div id = "commentsection-12576" class = 'collapse'>
			<div id = "comment-22049" class = "comment">
				<p>Thank you! I am trying to wrap my brain around this. Where do i get `C` matrix from?</p>
			</div>
			<div id = "comment-22052" class = "comment">
				<p>I have tried to implement your help, but am a bit confused. If you have a  minute, can you take a look? 

https://pastebin.com/H7bA53BD</p>
			</div>
			<div id = "comment-22058" class = "comment">
				<p>@anti - the code looks fine. You're asking where you get the C matrix from, but you define it in *your* code as matC. It's usually just a diagonal matrix of ones, which would mean your measurements are your states.</p>
			</div>
			<div id = "comment-22059" class = "comment">
				<p>thanks again, when I print the `FillerState` value after this line: `FillerState = fastA*FillerState;`, the value does not change until there is a new sample. (it seems exactly the same as `kf->state()`)  Is this a problem with my `FastA` matrix?</p>
			</div>
			</div>
				<textarea id = "speech-12576" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-12576">
					<img id="start_img-12576" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-12576">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>