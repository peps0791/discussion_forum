<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Confused about the variables in RobotC?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-751" class = "post">
			<h2>Question</h2>
			<div id="vote-751" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 1515</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Confused about the variables in RobotC?</h2>
<p>I'm trying to program advanced functions in <a href="http://www.robotc.net/wiki/VEX2_Functions_Motors_and_Servos#motorType" rel="nofollow">RobotC</a> but I'm not too sure I'm doing it right. I want to specify the motor port I'm using, but I assigned names to all the motors. Funny thing though, they don't exactly work the same as regular variables.</p>

<p>For instance, motor[port7]'s alternate name is light_blue.</p>

<pre><code>#pragma config(Motor,  port7,           light_blue,    tmotorVex393, openLoop)
</code></pre>

<p>I'm not really sure if these are new variables, or just specifications.  Anyway, here is the variable's signature:</p>

<pre><code>int motor[tMotor motor]
</code></pre>

<p>My code plans on doing something similar to this:</p>

<pre><code>void testThing (Motor motorName)
{
  motorName = someValue;
}

testThing(light_blue);
</code></pre>

<p>But with the int/motor hybrid variable/unidentified I'm not sure how well that would work out. Or at all.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-751" data-toggle = "popover">
				<p>user name : Mia</p>
				<p> user reputation : 155</p>
				<p class = "tagcontent" id = "usertaginfo-751">{'sensors': 5, 'None': 0, 'robotc': 5}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-751" class = 'collapse'>
			</div>
				<textarea id = "speech-751" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-751">
					<img id="start_img-751" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-751">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-753"  class = "post">
				<h2>Answer</h2>
			<div id="vote-753" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The #pragma is more like a #define in terms of names, as opposed to a variable declaration.</p>

<p>Your code is very close; something like this would work fine;</p>

<pre><code>#pragma config(Motor,  motorA,          light_blue,    tmotorNXT, PIDControl, encoder)

void testThing (tMotor  motor_name)
{
    motor[motor_name] = 20;   // set power to 20
}

task main()
{
    testThing(light_blue);
}
</code></pre>

<p>The actual type of a tmotor is an enum (and used like an int) and the definition can be found in RobotCintrinsics.c included with the product.</p>

<p>for exmaple;</p>

<pre><code>#if (1)

  // the actual 'enum' values for 'tMotor' are automatically defined by the ROBOTC compiler. Each platform
  // and circuit board type has its own set of "enum names" and it was becoming too hard to manage them in
  // this file. So they are automatically configured by the compiler which has better utilities for managing
  // differences between platform types.

  typedef enum tMotor;

#else

    // The old definitions are temporarily maintained here as well until the new implementation is confirmed
  // to be working well!

  #if defined(NXT) || defined(TETRIX)

        typedef enum
        {
          motorA = 0,
          motorB = 1,
          motorC = 2,
          mtr_S1_C1_1 =  3,

    ... etc
</code></pre>

<p>If i was to look at your code, and accept its functionality as literal then the following would work;</p>

<pre><code>#pragma config(Motor,  motorA,          light_blue,    tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          light_green,   tmotorNXT, PIDControl, encoder)

void testThing (tMotor&amp;  motor_name)
{
    tmotor_name = light_green;
}

task main()
{
    tmotor motor_to_use = light_blue;
    testThing(motor_to_use);
    motor[motor_to_use] = 20; // will actually move light_green since testThing function changed its value
}
</code></pre>

<p>It's hard to guess what it is you are trying to actually do</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-753" data-toggle = "popover">
				<p>user name : Spiked3</p>
				<p> user reputation : 1881</p>
				<p class = "tagcontent" id = "usertaginfo-753">{'None': 125}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-753">Load Comments</button></br>
			<div id = "commentsection-753" class = 'collapse'>
			<div id = "comment-969" class = "comment">
				<p>Exactly, but I actually need to know the compatibility between word types, since tMotor is not a type, just a specification.</p>
			</div>
			<div id = "comment-975" class = "comment">
				<p>Nevermind, tMotor can be used as a variable specification. Thanks! :D</p>
			</div>
			</div>
				<textarea id = "speech-753" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-753">
					<img id="start_img-753" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-753">Comment</button>
			<br><div id = "ans-756"  class = "post">
				<h2>Answer</h2>
			<div id="vote-756" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I think I see where you're confused, and you're correct in noticing that the motor variables are a little different than regular variables.</p>

<p>The <code>#pragma config( )</code> is actually doing a <em>lot</em> of heavy lifting for you because it is a "<a href="http://www.cplusplus.com/doc/tutorial/preprocessor/" rel="nofollow noreferrer">preprocessor directive</a>".  In other words, there is a hidden step &mdash; preprocessing &mdash; between the code you wrote and the code that the compiler sees.  The preprocessor is why you have access to the <code>motor[ ]</code> array (which you didn't need to declare before using), and why assigning a value to a <code>motor</code> causes your real-world motors to move (which does not happen when assigning to a "normal" variable).  The code generated by the preprocessor is saving you from writing a lot of setup code yourself, but it is also making some normal-looking variables do some unexpected things.</p>

<p>In your case, this is the motor config line that you wrote:</p>

<pre><code>#pragma config(Motor,  port7,           light_blue,    tmotorVex393, openLoop)
</code></pre>

<p>This tells the preprocessor to generate some code that does the following:</p>

<ol>
<li>Declare a variable of type <code>tMotor</code> and store it in <code>motor[light_blue]</code></li>
<li>Set the port of <code>motor[light_blue]</code> to <code>port7</code></li>
<li>Add a function that gets called when you assign a value to <code>motor[light_blue]</code>, which converts that value directly to a power-level signal understood by Vex 393 (and outputs this signal on <code>port7</code>).  In other words, use <em>open loop</em> control instead of PID control.</li>
<li>(Other things not relevant to this question)</li>
</ol>

<p>So, <code>light_blue</code> is not an "alternate name" for <code>motor[port7]</code>, and in fact <strong>neither of those names are correct</strong>.  The correct way to refer to this motor in code is <code>motor[light_blue]</code>.   In other words, <code>light_blue</code> is an index into the <code>motor[ ]</code> array.</p>

<p>The <a href="https://robotics.stackexchange.com/a/753/350">code that Spiked3 posted</a> would be the proper way to set up your function:</p>

<pre><code>#pragma config(Motor,  motorA,          light_blue,    tmotorNXT, PIDControl, encoder)

void testThing (tMotor  motor_name)
{
    motor[motor_name] = 20;   // set power to 20
}

task main()
{
    testThing(light_blue);
}
</code></pre>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-756" data-toggle = "popover">
				<p>user name : Ian</p>
				<p> user reputation : 9640</p>
				<p class = "tagcontent" id = "usertaginfo-756">{'planning': 10, 'None': 809, 'power': 1, 'algorithm': 10, 'battery': 1, 'slam': 7, 'coverage': 10, 'mobile-robot': 9, 'sensors': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-756">Load Comments</button></br>
			<div id = "commentsection-756" class = 'collapse'>
			<div id = "comment-968" class = "comment">
				<p>Nice guess :)  Actually motor[] is more like an array of output ports. It is a built-in variable, and not generated because of the #pragma. light_blue is just an index. RobotC has some weird compiling in that motor[idx] is the same as motor(idx) - and it can and does get confusing because samples are written both ways. It is a 'C' like language, but not a pure 'C' by any means.</p>
			</div>
			<div id = "comment-972" class = "comment">
				<p>I agree that `motor` is a built-in variable, but I'm saying that it originates from the preprocessor -- not specifically as a result of the `#pragma config( )`.  Most likely it's part of some header file that's pulled into every project as part of an automatic `#include`.</p>
			</div>
			<div id = "comment-974" class = "comment">
				<p>yes, that is correct. specifically
    intrinsic word property(motor, propertyMotorPower, kNumbOfTotalMotors, tMotor);
equates the RobotC variable to a firmware variable. I just wanted to make the point that there is not really any additionally generated code from the preprocessor in this case.</p>
			</div>
			</div>
				<textarea id = "speech-756" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-756">
					<img id="start_img-756" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-756">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>