<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How can I control a fast (200Hz) realtime system with a slow (30Hz) system?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-807" class = "post">
			<h2>Question</h2>
			<div id="vote-807" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">9</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 622</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How can I control a fast (200Hz) realtime system with a slow (30Hz) system?</h2>
<p>We are currently designing a mobile robot + mounted arm with multiple controlled degrees of freedom and sensors. </p>

<p>I am considering an architecture in two parts:</p>

<ol>
<li><p>A set of realtime controllers (either Raspeberry Pis running an RTOS such as Xenomai or bare metal microcontrollers) to control the arm motors and encoders.  Let us call these machines RTx, with x=1,2,3  depending on the number of microcontrollers.  This control loop will run at 200Hz.</p></li>
<li><p>A powerful vanilla linux machine running ROS to compute SLAM, mocap, and execute high-level logic (decide the robot s task and compute the motors' desired position and speed).  This control loop will run at 30Hz.</p></li>
</ol>

<p>I know my framework needs to be scalable to account for more motors, more sensors, more PCs (eg. for external mocap). </p>

<p>My main problem is to decide how to have the different RTx communicate with PC1. I have looked at papers related to robots architecture (e.g. <a href="http://global.kawada.jp/mechatronics/hrp2.html">HRP2</a>), most often they describe the high level control architecture but I have yet to find information on how to have the low level communicate with the high level and in a scalable way. Did I miss something?</p>

<p>In order to connect the fast RT machines ensuring the motor control with PC1, I have considered TCP/IP, CAN and UART:</p>

<ul>
<li>TCP/IP: not deterministic but easy to put in place. Is non determinism a real issue (as it will only be used at at slow speed 30Hz anyways)?</li>
<li>CAN: slow, very reliable, targeted to cars ( have seen there are some exemples using CAN with robots but it looked exotic)</li>
<li>UART: if I had only had one RT machine for motor control I would have considered UART but I guess this port does not scale well with many RTx
Is TCP/IP really a no go because of its non-deterministic characteristics? It is so easy to use </li>
</ul>

<p>At the moment no solution really seems obvious to me. And as I can find no serious robot example using a specific reliable and scalable solution, I do not feel confident to make a choice. </p>

<p>Does anyone have a clear view on this point or literature to point to?  Are there typical or mainstream communication solutions used on robots?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-807" data-toggle = "popover">
				<p>user name : arennuit</p>
				<p> user reputation : 170</p>
				<p class = "tagcontent" id = "usertaginfo-807">{'control': 20, 'servomotor': 6, 'None': 0, 'errors': 3, 'motor': 14, 'communication': 10, 'pid': 4, 'brushless-motor': 5, 'design': 9, 'robotic-arm': 4, 'dynamics': 3, 'servos': 6}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-807">Load Comments</button></br>
			<div id = "commentsection-807" class = 'collapse'>
			<div id = "comment-2045" class = "comment">
				<p>If you are looking into real-time networks, you might want to give [EtherCAT](http://www.ethercat.org/) a look!</p>
			</div>
			<div id = "comment-2046" class = "comment">
				<p>As it stands this question is unlikely to help future visitors and may get closed as [too localized](http://robotics.stackexchange.com/faq#close). While it is useful to have all of the background in one place, could I suggest dividing this up into a series of [practical, answerable questions based on actual problems that you face](http://robotics.stackexchange.com/faq#dontask). See [Is it ok to ask for opinions?](http://meta.robotics.stackexchange.com/a/154/37) for more background.</p>
			</div>
			</div>
				<textarea id = "speech-807" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-807">
					<img id="start_img-807" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-807">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-808"  class = "post">
				<h2>Answer</h2>
			<div id="vote-808" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">7</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I think you've taken a good first step; you've divided the problem into a mobile platform (which has uncertainty of position and must navigate) and the arm (which has a fair certainty of position in real time, through encoders).  </p>

<blockquote>
  <p>I have looked at papers related to robots architecture [...] but I have yet to find information on how to have the low level communicate with the high level and in a scalable way. Did I miss something?</p>
</blockquote>

<p>From your description, it sounds like you're trying to tie each RTx controller directly to PC1, which is running ROS.  What you've missed is that ROS is <em>designed</em> to handle a group of applications that may produce and consume data at different rates.  </p>

<p>What your application needs is a <strong>communications bridge</strong> &mdash; a single interface between your 200Hz loop and your ROS environment.  In other words, instead of tying each RTx controller to PC1, tie all the RTx controllers together and connect <em>that</em> to PC1.  </p>

<p>For example, use an <a href="http://www.robot-electronics.co.uk/acatalog/I2C_Tutorial.html">I2C Bus</a> to link the RTx systems together, and add another RTx controller to be the "Arm Master" (AM).  The AM's job would be to accept incoming commands in some PC1-friendly format and protocol, and convert those commands to I2C messages.  Then you'd write a ROS app to send commands to the AM.</p>

<p>Another way to do it with I2C would be to put an I2C controller directly on PC1 and write all the arm controlling logic in a ROS app.  This may seem like a more streamlined way to accomplish your goal, but it can make debugging more difficult as you are removing the modularity of the system &mdash; you'll have to troubleshoot it as one big complex system instead of two easily testable components.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-808" data-toggle = "popover">
				<p>user name : Ian</p>
				<p> user reputation : 9640</p>
				<p class = "tagcontent" id = "usertaginfo-808">{'planning': 10, 'None': 809, 'power': 1, 'algorithm': 10, 'battery': 1, 'slam': 7, 'coverage': 10, 'mobile-robot': 9, 'sensors': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-808">Load Comments</button></br>
			<div id = "commentsection-808" class = 'collapse'>
			<div id = "comment-2055" class = "comment">
				<p>I like this concept of communication bridge. I will have a look at the forwarded link. Thanks a lot!</p>
			</div>
			</div>
				<textarea id = "speech-808" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-808">
					<img id="start_img-808" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-808">Comment</button>
			<br><div id = "ans-1719"  class = "post">
				<h2>Answer</h2>
			<div id="vote-1719" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I would say any application where a large number of communications nodes are required (sensors or actuators) would benefit from being implemented as a system bus (in contrast to point to point links such as UART or Ethernet), due to wiring complexity, determinism and modularity.</p>

<p>Any control system requires a high degree of determinism, which high bandwidth channels (such as Ethernet) are usually poor at (especially when used with a general purpose OS which introduces large amounts of scheduling jitter, see <a href="http://elinux.org/images/4/4e/Real-Time-Preemption-Patchset.pdf">the following link for a discussion on scheduling determinism</a>). Application processors (such as the ARM11 of the Raspberry Pi) is also probably a poor fit for real-time systems (due to effects such as interrupt latency, and instruction pipe-lining). <a href="http://www.digikey.com/us/en/techzone/microcontroller/resources/articles/real-time-notes-on-microcontroller-interrupt-latency.html">See the following digikey discussion comparing real-time behavior of a ARM application core vs a microcontroller</a>.</p>

<p>It's a shame the availability of integrated CAN isn't as widespread as UART (RS-485) or I2C (yet), because I think it really simplifies the problem of distributed sensing and actuation. And while the usual 1 Mbps may seem slow, it's usually more than enough after refresh rates of all bus members are calculated (and the transmission rate can always be increased, depending on bus length, impedance and whether your transceivers will allow it). There's also brilliant simulation software available, that basically guarantees worst case response times (for instance RealTime-at-work has a free CAN bus analyser called RTaW-Sim). And finally, it would seem the availability of MEMS sensors with integrated CAN is rather poor.</p>

<p>Another example where actuators are configured as a bus (or ring), is Dynamixels AX and MX series, where each motor is daisy chained to the next via a UART link. This greatly simplifies system design if you have a large amount of actuators.</p>

<p>But, to get back to the actual question, I think if you describe your system as real-time set points, instead of commands (eg rather continuously broadcast a motor angle than instructing a command such as goto angle), it simplifies the coupling between the 200 Hz and 30 Hz loop.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-1719" data-toggle = "popover">
				<p>user name : EDDY74</p>
				<p> user reputation : 395</p>
				<p class = "tagcontent" id = "usertaginfo-1719">{'None': 25}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-1719">Load Comments</button></br>
			<div id = "commentsection-1719" class = 'collapse'>
			<div id = "comment-6943" class = "comment">
				<p>Hi Eddy, I have just noticed your answer now. Can you explain the difference you make between "point-to-point links" and "system bus"? Especially you first mention point-to-point to be lower grade but you then say that dynamixel uses UART and is great... Not sure I follow (although I agree system buses bring a lot in terms of ease of use. Thanks ;)</p>
			</div>
			<div id = "comment-6945" class = "comment">
				<p>The topology that Dynamixel uses isn't point-to-point serial, it's daisy chained (i.e. a ring topology, or a shared bus). In other words each motor has two ports (one for input, and one for output - that connects to the next motor). As such, you don't have a star topology, and wiring is much simpler. Also I never said point-to-point communication is of a lower grade, but that it's wiring is usually more cumbersome in a network with many nodes.</p>
			</div>
			<div id = "comment-6956" class = "comment">
				<p>I get it! Thanks for the extra details a year later ;)</p>
			</div>
			</div>
				<textarea id = "speech-1719" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-1719">
					<img id="start_img-1719" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-1719">Comment</button>
			<br><div id = "ans-2335"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2335" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>You seem to have 2 separate (but related) problems you are trying to solve at once. Let's break down your conundrum into smaller pieces:</p>

<ol>
<li>How do I <em>communicate</em> commands from a slow system (30Hz) to a fast controller (200Hz), and how do I communicate data being received at 200Hz back to my 30Hz thinktank?</li>
<li>How do I <em>control</em> what is happening at 200Hz, when I can only tell the robot what to do at 30Hz?</li>
</ol>

<p>Item 1 can be solved in hardware as your original question seems to point- you can queue up data at 200Hz and send the packet at 30Hz to your higher level system. You can do this with TCP/IP, or possibly CAN depending on how much data you want to send. Different hardware has different max data rates.  Adding an architecture level like ROS to act as communication bridge/arbiter as suggested in other posts may also help. </p>

<p>Item 2 is a <em>control theory</em> problem that can't be solved with hardware alone. The SLAM, position and speed determinations, and task determination that you want will need to be smarter since they send and receive information less often. You will probably want <strong>2 control loops</strong>: 1 at 200Hz and 1 at 30Hz. </p>

<p>There's lots of other questions that cover feed-forward, feed-back, and PID control loops, but you specifically asked about scaleability- the way most giant systems scale is by <strong>layering</strong> control loops and logic so that the minimal necessary information goes across whatever hardware you end up with. For example, your top level controller might only give goal position points and an average goal speed to the lower level one, not change the speed 30 times a second.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2335" data-toggle = "popover">
				<p>user name : user2002</p>
				<p> user reputation : 41</p>
				<p class = "tagcontent" id = "usertaginfo-2335">{'None': 4}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2335">Load Comments</button></br>
			<div id = "commentsection-2335" class = 'collapse'>
			<div id = "comment-6944" class = "comment">
				<p>This is a clear answer, thanks.</p>
			</div>
			</div>
				<textarea id = "speech-2335" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2335">
					<img id="start_img-2335" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2335">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>