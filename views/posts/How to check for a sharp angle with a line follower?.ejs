<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>How to check for a sharp angle with a line follower?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-9728" class = "post">
			<h2>Question</h2>
			<div id="vote-9728" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">6</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 3718</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>How to check for a sharp angle with a line follower?</h2>
<p>I have the <a href="http://www.makeblock.cc/mbot/" rel="nofollow noreferrer">mBot</a> robot and I want to program it to follow the line. So far it can pass any kind of line that is >90 .</p>

<p>I want it to be able to pass 90 -ish angles as well. Like this one:</p>

<p><a href="https://i.stack.imgur.com/FGkQm.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/FGkQm.png" alt="&gt;90  angle"></a></p>

<p>The problem is that my mBot robot has only 2 line following sensors (they are 5 mm apart and the line is 2 cm wide) so I can't use just the sensors.</p>

<p><a href="https://i.stack.imgur.com/qHQHt.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/qHQHt.png" alt="enter image description here"></a></p>

<p>Most of the times it just goes to the line and when it's supposed to turn it just misses the line (goes on the white) and goes back to get back on track. Once it's back on the black line it once again tries to go forward but goes on the white instead of taking a turn. This happens endlessly.</p>

<p>Sometimes it passes the angle by going back and forth and accidentally turning, but that's not even a workaround, let alone a solution.</p>

<p>Here's a test course of the first round of the competition.
<a href="https://i.stack.imgur.com/pzf8y.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/pzf8y.png" alt="course"></a></p>

<p>My robot can pass this without a problem, but it gets stuck on this (poorly edited, sorry) course:</p>

<p><a href="https://i.stack.imgur.com/IevUP.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/IevUP.png" alt="I don&#39;t currently have Photoshop installed. Sorry &#39;bout that."></a></p>

<p>It can't pass the 20 block if the robot enters it from a 15 or 20 block (so basically it gets stuck if it's coming from an angle and hits a 90 degree turn).</p>

<p>The sensor value could be read as either 0, 1, 2 or 3 depending on what the robot currently sees:</p>

<p><a href="https://i.stack.imgur.com/PNkB5.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/PNkB5.png" alt="sensor with all possible outcomes"></a></p>

<p>0 - on the line <br>
1 - on the right of the line <br>
2 - on the left of the line <br>
3 - not on the line <br></p>

<p>Pseudo code of my current program:</p>

<pre><code>loop forever:
    if (on the right of the line):
        turn_left()
    if (on the left of the line):
        turn_right()
    if (on the line):
        go_forward()
    if (not on the line):
        go_backwards()
</code></pre>

<p>So how would I go about taking such sharp turns?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-9728" data-toggle = "popover">
				<p>user name : Janekmuric</p>
				<p> user reputation : 133</p>
				<p class = "tagcontent" id = "usertaginfo-9728">{'None': 0, 'wheeled-robot': 0, 'line-following': 6, 'motor': 6, 'arduino': 6}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9728">Load Comments</button></br>
			<div id = "commentsection-9728" class = 'collapse'>
			<div id = "comment-17288" class = "comment">
				<p>Its hard to tell from the images are the two sensors mounted to the left and right of a centre line or are they mounted one forward of the other?</p>
			</div>
			<div id = "comment-17383" class = "comment">
				<p>Great edit! Is it true that your robot can pass the tile 20 once, but not twice in a row?</p>
			</div>
			<div id = "comment-17386" class = "comment">
				<p>@BendingUnit22 Ah, forgot to mention it (now edited). It can't pass the 20 block twice in a row, but the problem is that it can only pass the 20 block if the robot is entering it from a relatively straight line (5 or 10). It gets stuck if it enters from an angle (15 or 20).</p>
			</div>
			<div id = "comment-17395" class = "comment">
				<p>@Janekmuric - Great edit, full of detail.  I can now see exactly what the problem is, unfortunately I still can't fix it :(</p>
			</div>
			<div id = "comment-21856" class = "comment">
				<p>I Want it to follow a black line in a simpler way with mBot 3.4.6 V Please Help!</p>
			</div>
			<div id = "comment-21870" class = "comment">
				<p>@Personia You should ask a new question! Just make sure to follow the question asking guidelines.</p>
			</div>
			</div>
				<textarea id = "speech-9728" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9728">
					<img id="start_img-9728" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9728">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-9734"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9734" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Sorry I have no experience of line following robots, I use ultrasonic sensors, so this answer may be a bit na ve and there allsorts of reasons why you can't do this.</p>

<p>Your bot travels forwards and realises it has lost the line.  Assuming that the distance travelled is not "very far", less than 1/2 the length of the bot, you should be able to do a complete 360 and find two lines.  One of those lines will be at about 180 degrees from where you started turning (this should be measurable by the number of turns of the motor, if its a stepper), this is not the line you are looking for, you need to follow the other one.</p>

<p>Does that help?</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9734" data-toggle = "popover">
				<p>user name : Code Gorilla</p>
				<p> user reputation : 282</p>
				<p class = "tagcontent" id = "usertaginfo-9734">{'None': 15}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9734">Load Comments</button></br>
			<div id = "commentsection-9734" class = 'collapse'>
			<div id = "comment-17312" class = "comment">
				<p>The idea appears to be good, but when you take a better look, the robot "loses" the line every time it has to turn. When it "loses" the line it just goes backwards to find it, so making a 360 turn would take up a lot of time. Also if your robot tries to take a 360 degree turn in the direction opposite of the line, it would go backwads. Also I am allowed to use ultrasonic sensors (in a competition) but they would in this case be useless because everything is on a 2D platform.</p>
			</div>
			<div id = "comment-17346" class = "comment">
				<p>Can the robot turn on the spot?   If so change the program, so when it looses then line rather than go backwards it does a 360 spin and locates the two possible lines.  This may take a while, but it will take less time than loosing the path and not being able to complete the course.</p>
			</div>
			<div id = "comment-17347" class = "comment">
				<p>would moving the sensors further apart work?  If they were 20mm apart then only one would ever read the line.  When neither sensor was reading a line it could do a little wiggle and find the line again.  If both sensor read the line then the line is making a turn and you need to turn in the direction of the sensor that has just started seeing the line.</p>
			</div>
			<div id = "comment-17355" class = "comment">
				<p>It is not possible to move the senors as they are soldered. And doing a 360 spin would not only be extremely slow, but it may sometimes detect 3 or 4 lines and only 1 is the correct way. Anyways the first round of the competition finished today and my robot passed. (There will be more rounds so this is still an open question.</p>
			</div>
			<div id = "comment-17374" class = "comment">
				<p>@Janekmuric - Congratulations, good luck with the other rounds.</p>
			</div>
			</div>
				<textarea id = "speech-9734" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9734">
					<img id="start_img-9734" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9734">Comment</button>
			<br><div id = "ans-9735"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9735" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The problem seems to be that your robot functions by moving its sensors perpendicular to the line; when the line becomes perpendicular to itself, the robot loses the assumption that lateral movement will bring the line back into the center of the sensors.</p>

<p>The only way to fix is this is to change the sensor configuration (adding more if necessary) to break this ambiguity.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9735" data-toggle = "popover">
				<p>user name : Ian</p>
				<p> user reputation : 9640</p>
				<p class = "tagcontent" id = "usertaginfo-9735">{'planning': 10, 'None': 809, 'power': 1, 'algorithm': 10, 'battery': 1, 'slam': 7, 'coverage': 10, 'mobile-robot': 9, 'sensors': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9735">Load Comments</button></br>
			<div id = "commentsection-9735" class = 'collapse'>
			<div id = "comment-17311" class = "comment">
				<p>I'm in a competition and adding more sensors is not allowed :(</p>
			</div>
			<div id = "comment-17315" class = "comment">
				<p>In that case you would need to add a scripted behavior (similar to the behavior you mentioned that makes the robot back up when it loses the line, which I presume is software-based) that attempts to resolve the ambiguity. Trying to cut the corner by 45 degrees and seeing if you wind up on a line is one way to do this.</p>
			</div>
			</div>
				<textarea id = "speech-9735" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9735">
					<img id="start_img-9735" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9735">Comment</button>
			<br><div id = "ans-9774"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9774" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><blockquote>
  <p>It can't pass the 20 block if the robot enters it from a 15 or 20 block (so basically it gets stuck if it's coming from an angle and hits a 90 degree turn).</p>
</blockquote>

<p>Somehow coming from an angled line makes it more likely that your robot moves orthogonal to the 90 -ish turn, so that it gets stuck in the back-and-forth loop. Maybe if it <strong>moved very slowly backwards</strong> it could detect the moment when only one sensor goes on, which would lead to a turn. But it's a competition after all, so let's not move backwards, especially not very slowly.</p>

<p>I'm not sure if the image of the different sensor values is accurate in terms of scale. It looks like the line is not much thicker than the two sensors are apart. Now imagine the edge case that both distances were the same: the sensors are as far apart as the line is thick. In this case, the robot can only really move in the exact direction of the line. This is very bad for a 90 -ish turn for the reason mentioned above. The ratio between sensor distance and line thickness seems to play a role in how the robot behaves. You cannot change anything about the thickness of the line or the distance of the sensors, but I think it's important to think about what impact those values have or at least could have.</p>

<p>What you can change though is what you consider to be the line. You can follow a line by following its edge, too. The code could look like this:</p>

<pre><code>loop forever:
    if (on the right of the line):
        turn_left()
    if (on the left of the line):
        go_forward()
    if (on the line):
        turn_left()
    if (not on the line):
        turn_right()
</code></pre>

<p>As the edge is only a line, the behaviour depends more or less only on the distance of the sensors, not the ratio between the distance of the sensors and the thickness of the line. I'd give it a go and see how the behaviour changes.</p>

<p>A ratio that you can change more continuously is that of the velocities. How many degrees is <code>turn_left()</code> and how many millimetres is <code>go_forward()</code>?
Playing around with those values will lead to different, possibly more preferable behaviour of the robot.</p>

<hr>

<p>theory interlude</p>

<p>In a nutshell, you want to control a system with two inputs: angular and radial velocity. Setting either one will influence the other. In your case, the radial velocity control loop freaked out and became unstable: back-and-forth motion forever. The important thing is that the system should have reacted with a large increase in angular velocity (to do the hard 90 -ish turn), but instead the radial velocity went mad.</p>

<p>This is a sign that the interaction between the two is not well controlled and requires further investigation.</p>

<p>Changing the ratio between both velocities essentially modifies the gains of the controllers. Lowering both velocities means more sensor readings per travelled distance and thus a higher sampling rate, which in general leads to more stable systems.</p>

<hr>

<p><strong>tl,dr;</strong></p>

<p>Things to try</p>

<ol>
<li>Change both angular and radial velocities, but keep their ratio the same and see if that changes anything</li>
<li>Change the ratio between the two and see if that changes the behaviour of the robot. Especially on different types of tiles. What ratio works best on straight tiles, what works better on curvy tiles. Is there some setting that works for both?</li>
<li>Try both 1. and 2. for the on-the-line approach and the on-the-edge-of-the-line approach and see if you get to different results.</li>
</ol>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9774" data-toggle = "popover">
				<p>user name : Bending Unit 22</p>
				<p> user reputation : 1335</p>
				<p class = "tagcontent" id = "usertaginfo-9774">{'None': 93}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9774">Load Comments</button></br>
			<div id = "commentsection-9774" class = 'collapse'>
			<div id = "comment-17393" class = "comment">
				<p>This could actually work. I don't have my robot at home right now, but I will test it in school. Now that the first round of the competition is over, I can tell that many people went for the speed, rather than precision or efficiency. Their robot would just go crazy fast and they would hope that is passes, and since there are 400+ participants, statistically, at least one of them will be in the top three. The only way to beat their luck is to make a robot that can pass the entire stage and get all the points regardless of the time. (I got 270/275 points and I'm not in the top 3 :p)</p>
			</div>
			<div id = "comment-17394" class = "comment">
				<p>My approach was to detect if it's stuck by adding one to a variable every time it goes back and forth. Once the limit is exceeded it takes a sharp turn. The problem is that when it gets stuck, sometimes it goes back and forth and it works, but sometimes it goes in random directions including left and right so it's impossible to detect if it's stuck. Another interesting idea is that the robot enters a block, and using some algorithm determines on what kind of a block is it (there are 5 kinds of blocks), and just moves with a pre-programmed set of rules to pass the block.</p>
			</div>
			<div id = "comment-17672" class = "comment">
				<p>I could finally try your answer and I am very surprised by the results. This is a lot better that my approach!</p>
			</div>
			</div>
				<textarea id = "speech-9774" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9774">
					<img id="start_img-9774" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9774">Comment</button>
			<br><div id = "ans-9779"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9779" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I have a similar idea like @Bending Unit 22, which is not to follow the line but its edge instead. So you detect the line only with one sensor (let's say only with the left one (<em>blue dot</em>)).</p>

<ul>
<li><p>If the you both sensor indicates line then your robot should turn right until the right sensor (<em>green dot</em>) indicates white surface. This is the event circled with green in the image below.</p></li>
<li><p>If both sensor are lost sight of the line, then the robot should turn left until the left sensor is back on the track. This is the event circled with blue in the image below.</p></li>
</ul>

<p>Basically, there could be <strong>two states of line-following</strong>:</p>

<ol>
<li><strong>Default state</strong> when the robot has one sensor on the line while the other is off the line.</li>
<li><strong>Turning state</strong> if one of the events occur. The robot could stop and turn until the the <strong>left sensor gets back</strong> on line or till <strong>the right leaves</strong> the line. Since we can assume that the direction is known and the robot is not moving, we could turn on maximum speed (or at least you can try and see how it works). You can test it while the robot is in motion of course.</li>
</ol>

<p><a href="https://i.stack.imgur.com/bZwM0.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/bZwM0.png" alt="![enter image description here"></a></p>

<p>Previously, when your robot lost the line there was no information about the direction, so it could only go backwards hoping to find the line.</p>

<p>It is only a theory but I think it's worth a try or just to move forward your project.</p>

<p>You have mentioned that your cannot use more sensors but are you allowed to modify on the current hardware? </p>

<p>I have checked that the sensors have digital output which means <strong>[line] - [no line]</strong>, not much information. But if you could connect the IR-sensors output voltage to some analog pins, this way you could obtain higher resolution.</p>

<p><strong>To explain further this part</strong>:</p>

<p>A basic line detecting sensor is a IR photo-diode and photo-transistor pair. Like the one on your robot only it has a little bit more on the module, a newer version from Makeblock's page:</p>

<p><a href="https://i.stack.imgur.com/Xpqif.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Xpqif.png" alt="![enter image description here"></a></p>

<p>(Module on left, actual sensor on the right) Your robot has a previous version, which probably uses an other sensor. This one in the image is a <a href="https://www.vishay.com/docs/83760/tcrt5000.pdf" rel="nofollow noreferrer">TCRT500</a> from Vishay.</p>

<p>If we have a look at the schematic level:</p>

<p><a href="https://i.stack.imgur.com/WBqFK.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/WBqFK.png" alt="enter image description here"></a></p>

<p>The output is at the red circle. Now, if there is sufficient reflected IR light the transistor will conduct and the output will be pulled down to GND. If there is not enough reflected IR light, the transistor won't conduct and the output is pulled up through the resistor to supply voltage. But it is not working like a switch, so the out can be anything between 0 - V_Supply. For a given spectral distribution (IR in our case), the photo-current is linearly proportional to the illuminance . So as I said the output voltage can vary between 0 V and VCC (5 V in common).</p>

<p>Your sensor module works the same way, only it has a <strong><a href="https://nishantnath.files.wordpress.com/2012/12/infrared20ir20sensor.png" rel="nofollow noreferrer">comparator</a></strong> on it which makes digital output of the analog signal.</p>

<p>When the IR LED illuminates the edge of the line, maybe half of the light is reflected or more, so the transistor can conduct slightly. This means that the output won't be pulled down near 0 V, it will be, let's say around 2 V. But not 0 V (which is the complete white surface), and this is the important because this means that it partly detects something (the line).</p>

<p>Now back to the comparator, it compares the output voltage of the photo-transistor to a reference voltage. It checks if the signal is above or below the reference and sets its output to LOW or HIGH accordingly.</p>

<p>If this the reference is 2.5 V then your module will say that it detects line when the output voltage is above 2.5V, so that information with the 2 V signal will be considered as a white surface where as we saw the edge, thus we lose resolution.</p>

<p>Now, if you could read this whole analog range with an ADC your resolution would be higher and maybe a more delicate controlling algorithm could be achieved.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9779" data-toggle = "popover">
				<p>user name : Bence Kaulics</p>
				<p> user reputation : 605</p>
				<p class = "tagcontent" id = "usertaginfo-9779">{'None': 26}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9779">Load Comments</button></br>
			<div id = "commentsection-9779" class = 'collapse'>
			<div id = "comment-17410" class = "comment">
				<p>I will probably test your and @Bending Unit 22's ideas tomorrow. I have 2 Computer Science classes so I will probably have enough time. +1</p>
			</div>
			<div id = "comment-17411" class = "comment">
				<p>I guess this would work better if the sensor diodes were more apart (although it could be the exact opposite). Anyways I'm not sure what you mean by *connect IR-LEDs output voltage to some analog pins*. The sensors are digital (as far as I know), but even if they were analog I don't think it would make a difference since one line sensor diode could be in only two states anyways (either on the line or not).</p>
			</div>
			<div id = "comment-17412" class = "comment">
				<p>Yes, maybe the sensors are too close. Also I have edited my question and added  some more details.</p>
			</div>
			<div id = "comment-17413" class = "comment">
				<p>Thanks for the explanation, very good edit. I think this would be more useful if a line would be a gradient, but I'll try to do something with it as the robot would sometimes fail to detect the line in weird light conditions.</p>
			</div>
			<div id = "comment-17415" class = "comment">
				<p>Usually, there is a potentiometer at the reference pin of the comparator, to change the reference voltage. So maybe you can tune/calibrate your sensors in those wierd light conditions.</p>
			</div>
			</div>
				<textarea id = "speech-9779" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9779">
					<img id="start_img-9779" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9779">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>