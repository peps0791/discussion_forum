<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Artificial Potential Field navigation
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-4369" class = "post">
			<h2>Question</h2>
			<div id="vote-4369" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 830</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Artificial Potential Field navigation</h2>
<p>I've been working on my two-wheeled mobile robot I've been trying to perfect my obstacle avoidance algorithm which is Artificial Potential Field method . Also i use Arduino Uno kit . The basic concept of the potential field approach is to compute a artificial potential field in which the robot is attracted to the target and repulsed from the obstacles. The artificial potential field is used due to its computational simplicity. the mobile robot applies a force generated by the artificial potential field as the control input to its driving system . the Artificial Potential Field method in its computations depends on the distance between robot and goal or target and the distance between robot and obstacles that effected the robot (which could easily get for ultrasonic senors)</p>

<p>I applied the Artificial potential field method in Matlab environment / simulation and it is done successfully , really what I need in the simulation is to get the current position of mobile robot and position of goal as x, y coordinates (to compute the distance between robot and goal) and the obstacles positions.</p>

<p>The output of the Artificial potential field is the desired angle to avoid obstacle and reach to the goal , the method give the robot the angle the pointed to the goal then the robot goes toward that angle and if the robot face an obstacle in his way (got from sensor reading) the Artificial potential field will update the angle to avoid the obstacle and then re-give the robot the angle that pointed to the goal and so on.</p>

<p>The question is how could I apply the Artificial potential field method in real would? what should I get? is it easy to do that or it is impossible? </p>

<p>I had Rover 5 with two normal DC motors and two encoders (incremental rotary encoder) per each wheel.</p>

<p>Any Help or suggestion on the topic will be highly appreciated please.</p>

<hr>

<p><strong>Edit:</strong> Based on the response from Shahbaz.</p>

<p>The case is very simple, but first, there is something to know that I constrained with some limitations that I couldn't overstep them, one of them is that the real world should be exactly as simulation for example in the simulation I consisted that robot started with (0,0) on coordinates  x, y axis and I should put the goal point for example (10,20)  and feed this point in the Artificial potential field method and then compute distance between  robot and goal (so I don't need any technique to determine the position of goal) and I don't know if I could applied that.</p>

<p>The second constraint is that I should use the encoders of wheels to determine the current position of mobile robot and its orientation depending on a calculation formula (something like this <a href="http://rossum.sourceforge.net/papers/DiffSteer/" rel="nofollow">here</a>) even if that will be inaccurate.</p>

<p>I had a Rover 5 with two normal DC motors and two encoders (incremental rotary encoder) per each wheel, each encoder has four wires I don't know how to deal with them yet, and how could I translate the pulses of encoders or how to work out the x.y position of your robot based on the shaft encoder data.</p>

<p>I am still searching for  .</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-4369" data-toggle = "popover">
				<p>user name : Maria</p>
				<p> user reputation : 8</p>
				<p class = "tagcontent" id = "usertaginfo-4369">{'mobile-robot': 1, 'None': 0, 'wheeled-robot': 0, 'quadrature-encoder': 0}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-4369" class = 'collapse'>
			</div>
				<textarea id = "speech-4369" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-4369">
					<img id="start_img-4369" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-4369">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-4374"  class = "post">
				<h2>Answer</h2>
			<div id="vote-4374" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>From the algorithm's point of view, there is really no difference between the real world and the simulation. The difficult part is to give the correct information to the algorithm.</p>

<p>For that, you need to look at what information your algorithm requires:</p>

<ul>
<li>Your current position</li>
<li>Goal's position</li>
<li>All obstacles' position</li>
</ul>

<p>The question is therefore how to get these information. The answer is that it really really depends. There are numerous ways for each and they all depend on what your robot can do, what facilities it has available, what control you have over the environment, whether the environment is static or not etc.</p>

<h3>Your location</h3>

<p>For example, outdoors you could use GPS to locate yourself, while indoors you may be looking for <a href="https://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping" rel="nofollow">SLAM</a>. You could possibly get information from a camera installed in the ceiling, or various other methods (search for <code>robot localization</code>).</p>

<h3>Goal's location</h3>

<p>You could find the goal with the ceiling camera if you have one, you could try to find it by exploration (i.e. set a random goal, go there and in the meantime scan for the real goal e.g. with a camera.  If goal not found, go to another random goal), or you could try other methods, e.g. by having the goal send a signal whose direction and strength would be picked up by the robot.</p>

<h3>Obstacles' positions</h3>

<p>You could again find the obstacles with a ceiling camera, you could find nearby ones (not all of them) with sonar, laser etc, or in case of a static environment simply have a predefined map.</p>

<hr>

<p>Once you have these information, you can use your algorithm just as before and get the direction you need to go to. You still need to control the robot accordingly. Since you already know about encoders, I assume you know how to make your robot turn to the correct angle given your current angle (which is something you possibly calculated when looking for your current location).</p>

<hr>

<p>I have a couple of suggestions though.  If you already know all the obstacles and the goal's position, then you have better algorithms for navigation.  Your algorithm would get stuck in a situation like this:</p>

<pre><code>               ----
            --/
          -/
 goal    |           You
          -\
            --\
               -----
</code></pre>

<p>where the algorithm would tell you to go straight to the wall until all potentials cancel out and you reach a stable point where no direction is preferable.</p>

<p>In the case when you have all the information about the environment, you can enlarge the obstacles (in your model) by half of your robot's size (i.e. maximum distance from your center, or whichever point you consider your position to be, to your outer layer), which means you can assume your robot to be a point and the obstacles larger. Then you can use an algorithm such as <a href="https://en.wikipedia.org/wiki/A*" rel="nofollow">A*</a> to find the best path to your goal.</p>

<p>If you <em>don't</em> have all information of the environment, you can still use A*, but just add information to the map as you find new obstacles and recalculate your path.</p>

<p>Alternatively, if you don't have all information of the environment and you like to continue with your Potential Field algorithm, you can avoid having information regarding <em>all</em> obstacles and run your algorithm with only those that you know of. Again, as your robot explores, you add more information about the obstacles. This really doesn't change the behavior much since potential is inversely related to distance squared, so the farther objects have very little effect on the potential field at your current position.</p>

<hr>

<p>Update based on your edit:</p>

<p>Regarding your first point, it's ok. That simplifies things, so all you need is to store the map of your environment (goal position, obstacle positions etc) in whatever way you feel comfortable in your robot (i.e. in a way that you can feed it to your algorithm).</p>

<p>Regarding your second point, you seem to already have the formula, so only thing that remains is the third point, which is converting the signals from the encoder into position.</p>

<p>For that, let's take a look at this very general algorithm:</p>

<pre><code>current_position = (0, 0)
for ever
    current_position = calculate(current_position, delta_encoder_1, delta_encoder_2)
</code></pre>

<p>which means start from (0, 0) and on every update, get a new position based on how much each encoder has changed (since last update). The <code>calculate</code> function is effectively the calculations in the link you provided.</p>

<p>To get <code>delta_encoder_1</code> and <code>delta_encoder_2</code>, you need to consult the datasheet of your encoders. What you get is a series of pulses that you need to detect. Perhaps the most reliable way would be through interrupts, for example by interrupts on the rising edge of a signal arriving from the encoder:</p>

<pre><code>current_position = (0, 0)
for ever
    current_position = calculate(current_position, delta_encoder_1, delta_encoder_2)
    delta_encoder_1 = 0
    delta_encoder_2 = 0

interrupt_on_encoder_1
    if condition for an encoder step forwards
        delta_encoder_1 += 1
    else if condition for an encoder step backwards
        delta_encoder_1 -= 1

interrupt_on_encoder_2
    if condition for an encoder step forwards
        delta_encoder_2 += 1
    else if condition for an encoder step backwards
        delta_encoder_2 -= 1
</code></pre>

<p>This means that the interrupts take care of updating <code>delta_encoder_*</code> based on the shape of the pulse, which is something you should get from the datasheet of the encoders. Note the race condition between the interrupts and were the application resets <code>delta_encoder_*</code> values (If you don't know what is a race condition, since you already accept inaccurate position calculation, then don't worry about it).</p>

<p>That said, if you still have doubts, I strongly recommend asking a separate question specifically regarding how to get meaningful data out of your specific encoders.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-4374" data-toggle = "popover">
				<p>user name : Shahbaz</p>
				<p> user reputation : 2615</p>
				<p class = "tagcontent" id = "usertaginfo-4374">{'None': 193, 'usb': 12, 'distributed-systems': 7, 'microcontroller': 1, 'embedded-systems': 7, 'servomotor': 1, 'platform': 18, 'can': 1, 'machine-learning': 12, 'real-time': 18, 'mobile-robot': 1, 'rs232': 12, 'software': 20}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-4374" class = 'collapse'>
			</div>
				<textarea id = "speech-4374" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-4374">
					<img id="start_img-4374" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-4374">Comment</button>
			<br><div id = "ans-4388"  class = "post">
				<h2>Answer</h2>
			<div id="vote-4388" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Oussamma Khatib's potential field algorithms suffer from local minima/maxima finding problems vice global minima/maxima.  As such you will get trapped in "box canyons" where the potential field cannot escape.  You need to add extra algorithms on top of potential fields to avoid local minima paths.</p>

<p>I did my Master's thesis on artificial neural networks that avoid local minima and find global ones.  But there are lots of others to choose from:</p>

<ul>
<li><em>Non-learning artificial neural network approach to motion planning for the Pioneer robot</em>
<ul>
<li>DOI: 10.1109/IROS.2003.1250614</li>
<li>Available at <a href="http://dx.doi.org/10.1109/IROS.2003.1250614" rel="nofollow">IEEE (paywal)</a></li>
<li>Also available at <a href="http://www.academia.edu/1169595/Motion_Planning_of_an_Autonomous_Mobile_Robot_Using_Artificial_Neural_Network" rel="nofollow">academia.edu (non-paywall)</a></li>
</ul></li>
</ul>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-4388" data-toggle = "popover">
				<p>user name : daemondave</p>
				<p> user reputation : 76</p>
				<p class = "tagcontent" id = "usertaginfo-4388">{'quadcopter': 0, 'None': 6}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-4388" class = 'collapse'>
			</div>
				<textarea id = "speech-4388" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-4388">
					<img id="start_img-4388" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-4388">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>