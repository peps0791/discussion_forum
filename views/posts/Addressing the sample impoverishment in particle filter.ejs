<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Addressing the sample impoverishment in particle filter
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-10404" class = "post">
			<h2>Question</h2>
			<div id="vote-10404" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 191</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Addressing the sample impoverishment in particle filter</h2>
<p>I have implemented a particle filter algorithm for the state estimation of a mobile robot.</p>

<p>There are several external range sensors(transmitters) in the environment which gives information on the distance (radius) of the robot based on the time taken for the receiver on the robot to send back its acknowledgement. So, using three or more such transmitters it will be possible to triangulate the position of the robot.</p>

<p>The particle filter is initialized with 15000 particles and the sensor noise is relatively low (0.02m).</p>

<p>Update Phase: At each iteration a range information from an external sensor is received. This assigns higher weights to the particles along the radius of the external sensor. Not all the particles are equally weighted since the process noise is low. Hence in most of the cases, the particle relatively closer to the robot gets lower weight than an incorrect one that happens to be along the radius. The weight is a pdf.</p>

<p>Resampling Phase: At this stage, the lower weighted particle(the correct one) that has negligible weight gets lost because the higher weighted particle gets picked up.</p>

<p>All this happens at the first iteration and so when the range information from another sensor arrives, the robot is already kidnapped.</p>

<p>Googling around, said that this problem is called as sample impoverishment and the most common approach is to resample only when the particle variance is low. (Effective Sample Size &lt; number of particles / 2)</p>

<p>But, when the particles are assigned negligible weights and there are relatively very few particles with higher weights, the diversity of the particles are lost at resampling phase. So, when the variance is higher resampling is done which removes the lower weighted particle and hence the diversity of the particles is lost. Isnt this completely the opposite of the above idea of ESS?</p>

<p>Is my understanding of sample impoverishment correct? Is there a way this issue can be fixed?</p>

<p>Any pointers or help would be highly appreciated.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-10404" data-toggle = "popover">
				<p>user name : ZincFur</p>
				<p> user reputation : 23</p>
				<p class = "tagcontent" id = "usertaginfo-10404">{'mobile-robot': 4, 'None': 0, 'particle-filter': 4, 'probability': 4, 'localization': 4}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-10404">Load Comments</button></br>
			<div id = "commentsection-10404" class = 'collapse'>
			<div id = "comment-18783" class = "comment">
				<p>Could you clarify what the problem is? Are you saying that the range sensors are inaccurate, thus leading to the wrong particles getting a higher weight? If the external sensors measure the distance to the robot, then the particles along the circle surrounding the sensor are where the robot could be located, therefore they should be weighted higher</p>
			</div>
			<div id = "comment-18784" class = "comment">
				<p>The reflections caused by the objects in the vicinity cause the external sensors to give an higher estimate of the range. My understanding is that, though the incorrect particles get higher weight because of this problem, eventually the right particles will be weighted more when you get more ranges. However, since my observation model is peaked (sensor noise = 0.02), the incorrect particles gets higher weights and the correct particle gets negligible weights during the first few iterations. The resampling then removes the correct ones.</p>
			</div>
			<div id = "comment-19763" class = "comment">
				<p>your sensor noise is not 0.02 if the measurements do not measure your state with 0.02 of uncertainty. your sensor noise is off.</p>
			</div>
			</div>
				<textarea id = "speech-10404" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10404">
					<img id="start_img-10404" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10404">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-10405"  class = "post">
				<h2>Answer</h2>
			<div id="vote-10405" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I'm not familiar with particle filtering, but if applying the weights between each sensor read is causing issues, why not accumulate weights <em>to be applied</em> between sensor calls and apply them in bulk after all sensors have been read?</p>

<p>For example, it sounds like you're doing:</p>

<p>[Read 1]-&lt; apply weights >-[Read 2]-&lt; apply weights >-[Read 3]-&lt; apply weights ></p>

<p>What I'm suggesting:</p>

<p>[R1]-&lt; accumulate weights >-[R2]-&lt; accumulate >-[R3]-&lt; accumulate >-&lt; apply all weights ></p>

<p>I would imagine, in the scenario above, the particles that got the biggest accumulated weight would be the ones that are "seen" by all of the sensors. <em>Those</em> would be the ones you would want to keep, right? </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-10405" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-10405">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-10405">Load Comments</button></br>
			<div id = "commentsection-10405" class = 'collapse'>
			<div id = "comment-18722" class = "comment">
				<p>The range information from the sensors are being sent at different frequencies and so waiting for all the data might cause some delay in the posterior estimation. Also, I am not sure about accumulating the weights between multiple range information since I need to assume that my observation model is a pdf. One idea might be to use the multiple range information and then triangulate the position before assigning weights. However, the obstacle reflections induces range errors and I might need a more sophisticated algorithm to triangulate which defeats the use of Particle Filter.</p>
			</div>
			</div>
				<textarea id = "speech-10405" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10405">
					<img id="start_img-10405" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10405">Comment</button>
			<br><div id = "ans-11162"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11162" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Your description of sample impoverishment and the way to fix it seems about right. Resampling only when the variance gets low is doing exactly what you are asking for when you say the measurements come in asynchronously. You can also improve matters by selecting the right <a href="https://robotics.stackexchange.com/questions/479/particle-filters-how-to-do-resampling">resampling strategy</a>. Using e.g. stratified resampling you can make sure that your higher than average weight particles won't get eliminated by chance. And yes, after resampling the particles are less diverse. That is the nature of the resampling process. Since you eliminate some particles, and copy others, the diversity after resampling is lower. You "smear" out e.g. increase diversity during the updating steps. </p>

<p>This can of course still lead to situations, where the bulk of your particles get deleted, and only a single particle is left (multiple times over) after resampling, because the weight before was so high. In this case its more likely that your update and measurement models don't fit very well.</p>

<p>Particle filters work very well with non-linearities in the regions where the probability density function of the prior is high. They don't do so well in the other regions and need tricks to make them work there. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11162" data-toggle = "popover">
				<p>user name : Jakob</p>
				<p> user reputation : 2519</p>
				<p class = "tagcontent" id = "usertaginfo-11162">{'ransac': 3, 'None': 210, 'computer-vision': 1, 'cameras': 1, 'c++': 3, 'slam': 12, 'rock': 1, 'i2c': 3, 'servos': 3, 'software': 1}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11162" class = 'collapse'>
			</div>
				<textarea id = "speech-11162" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11162">
					<img id="start_img-11162" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11162">Comment</button>
			<br><div id = "ans-11185"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11185" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>As said by Jacob, sample impoverishment is inherit to the Sampling-Importance-Resampling family of particle filters.</p>

<p>An alternative solution which does require some extra effort is to switch to a Markov Chain Monte Carlo (MCMC) particle filter. MCMC relies on constructing a Markov chain that has a stationary distribution which is equal to the distribution you want to sample from. Meaning that if you draw samples from this Markov chain long enough, as $n\rightarrow\infty$, you will sample $x_n\sim P$, where P is the distribution you want to sample from.</p>

<p>The construction of such a Markov chain is often done through the Metropolis-Hastings algorithm. Here, a proposal state $x_k^*$ is generated from the current state $x_k$, which is most often done by a Gaussian around the current state: $x_k^*\sim N(x_k,1)$. After this, the likelihood of both the initial state (seed) and proposal are calculated. Based on the likelihood ratio, the proposal is accepted with some probability. A simple introduction to MCMC and the M-H algorithm is given <a href="https://health.adelaide.edu.au/psychology/ccs/docs/ccs-class/technote_metropolishastings.pdf" rel="nofollow noreferrer">here</a>.</p>

<p>In a particle filtering context, generating proposals around an initial seed means that the diversity in particles will never diminish, as long as the proposals are generated such that at least some of them are accepted.</p>

<p>EDIT: There do exist other types of SIR-like particle filters which have their own way to combat degeneracy/sample impoverishment. I suggest looking at <a href="http://www.nuff.ox.ac.uk/economics/papers/1997/w13/Sir.pdf" rel="nofollow noreferrer">Auxiliary Particle Filtering</a>, where an auxiliary variable is introduced during sampling. This variable selects particles based on their goodness-of-fit to current observations. This helps to better model the tails of the density (which is the weak point with sample degeneracy).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11185" data-toggle = "popover">
				<p>user name : P. Geurts</p>
				<p> user reputation : 21</p>
				<p class = "tagcontent" id = "usertaginfo-11185">{'None': 2}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11185">Load Comments</button></br>
			<div id = "commentsection-11185" class = 'collapse'>
			<div id = "comment-20210" class = "comment">
				<p>Welcome to *Robotics*, P.Geurts! Always great to see an expert appear in threads like this. For this particular question, OP had asked about ways to address the perceived problem of sample impoverishment. It looks like your suggestion was to ditch the particle filter and move to a different filtering scheme, but it didn't look like you had addressed the original problem (sample impoverishment). Is there anything OP could do to improve the impoverished sampling problem, or is the best route really to change filtering schemes?</p>
			</div>
			<div id = "comment-20235" class = "comment">
				<p>Thanks, Chuck. I do know my answer is not directly what OP was looking for. However, Jacob has already provided a good answer by linking to the other question. One of the answers there links to this [paper](http://user.it.uu.se/~thosc112/pubpdf/holsg2006.pdf), which nicely explains various resampling methods and their advantages.</p>
			</div>
			</div>
				<textarea id = "speech-11185" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11185">
					<img id="start_img-11185" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11185">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>