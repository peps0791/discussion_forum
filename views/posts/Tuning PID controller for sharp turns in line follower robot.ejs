<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Tuning PID controller for sharp turns in line follower robot
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-11292" class = "post">
			<h2>Question</h2>
			<div id="vote-11292" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 453</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Tuning PID controller for sharp turns in line follower robot</h2>
<p>I'm working on a TWDD line-following robot using qtr-8a reflectance sensor array.
The sensors are connected to BeagleBone Black, and BBB is sending the speed serially to an arduino Due.
My approach is using a PID controller for the sensor so the error equals to zero when the robot is centred on the line and a positive/negative error depending on the robot's position. Applying Trial and error method I finally reached a Kp value that tracks straight lines perfectly. However, I'm still unable to turn and stay on the line even on a similarly smooth turns. I guess this is related to the Kd value. I'm not using the integral part Ki since the error is keep increasing. I tried to set conditions when the robots is drifting away from the line but it's not working probably (even without the conditions it is somehow turning smoother but then losing the line)
I'm using the following draft code:</p>

<pre><code>from bbio import *
import time


integral = 0
last_prop = 0
Kp = 20
Ki= 0
Kd = 150
amax = list(0 for i in range(0,8))
amin = list(1024 for i in range(0,8))
timeout = time.time() + 10

# Read ADC data from MCP3008
# ch: 0-7, ADC channel
# cs: 0-1, SPI chip select
# See MCP3008 datasheet p.21
def adc_read(cs, ch):
    spidata = SPI1.transfer(cs, [1,(8+ch)&lt;&lt;4, 0])
    data = ((spidata[1] &amp; 3) &lt;&lt; 8) + spidata[2]

    return data

def setup():
# SPI1 setup
    Serial2.begin(9600)
    Serial5.begin(9600)
    pinMode(GPIO1_7, OUTPUT)
    digitalWrite(GPIO1_7, LOW)
    SPI1.begin()
    SPI1.setMaxFrequency(0,50000)  # =&gt; ~47kHz, higher gives occasional false readings
  #  SPI1.setMaxFrequency(1,50000)
    calibrate()

# reading the IR sensor data    
def read_sensors():
    sensors = []
    for i in range(8):
        sensors.append(adc_read(0,i))

    return sensors
# calculating the error from PID controller
def calc_pid(x,sp):
    global  integral, last_prop , Kp, Ki ,Kd
    set_point = sp
    pos = sensor_average(x)/sensor_sum(x)
    prop = pos - set_point
    integral = integral + prop
    deriv = prop - last_prop
    last_prop = prop
    error = (prop*Kp + integral*Ki + deriv*Kd)/100

    return error

def get_position(s):
    return sensor_average(s)/sensor_sum(s)        

def sensor_average(x):
    avg = 0
    for i in range(8):
        avg += x[i]*i*100

    return avg

def sensor_sum(x):
    sum = 0  
    for i in range(8):
        sum += x[i] 
    return sum


def get_sensor(x):
    j= read_sensors()[x]
    return j

def calc_setpoint(x,y):
    avg = 0
    sum = 0
    for i in range(8):
        avg += (x[i]-y[i])*i*100
        sum += x[i]-y[i]
    return avg/sum
# calibrate the sensors reading to fit any given line
def calibrate():
    global amin
    global amax

    while(time.time() &lt; timeout):
        for i in range(0,8):
            amin[i] = min(amin[i],read_sensors()[i])
            amax[i] = max(amax[i],read_sensors()[i])
            digitalWrite(GPIO1_7, HIGH)
    digitalWrite(GPIO1_7,LOW)


# calculating the correspondent speed
def calc_speed(error):
    avg_speed = 150
    min = 100
    pos = get_position(read_sensors())
    speed = []
    if(error &lt; -35):
        right = avg_speed -(2*error)
        left = avg_speed + (2*error)
    elif(error &gt; 35):
        right =avg_speed - (2*error)
        left = avg_speed + (2*error)
    else:      
        right = avg_speed - (error)
        left = avg_speed + (error)
    speed.append(right)
    speed.append(left)
    return speed


def loop():

    s = read_sensors()
    setpoint = calc_setpoint(amax,amin)
    position = get_position(s)
    err = calc_pid(s,setpoint)

    print err

    #print "divided by 100:"
    speeds = calc_speed(err) 
    print speeds
    right_motor = speeds[0]
    left_motor = speeds[1]


    Serial2.write(right_motor)

    Serial5.write(left_motor)
    delay(10)

run(setup,loop)        
</code></pre>

<p>PS: the sent speed over serial is limited to 255 and I'm multiplying it by a factor from the Arduino side.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-11292" data-toggle = "popover">
				<p>user name : DieDen</p>
				<p> user reputation : 45</p>
				<p class = "tagcontent" id = "usertaginfo-11292">{'quadcopter': 0, 'kuka': 0, 'None': 2, 'walking-robot': 1, 'line-following': 0, 'power': 1, 'arduino': 3, 'battery': 1, 'pid': 0, 'servomotor': 1, 'python': 0, 'matlab': 1, 'beagle-bone': 0, 'serial': 3, 'ultrasonic-sensors': 0, 'inverse-kinematics': 0}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11292" class = 'collapse'>
			</div>
				<textarea id = "speech-11292" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11292">
					<img id="start_img-11292" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11292">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-11294"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11294" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>While calculating speeds, you are multiplying by 2*error. If PID (or PD) calculates an error, I believe it should be fed directly to the motors because in each loop it does not account for an additional 2* multiplier in speed in the next loop. That would act like an unforeseen impulse that is unaccounted for by the PID. So for starters, I would suggest try removing the 2*error term, compare to a smaller error (or as required) and go without the last else-if condition like below:</p>

<pre><code>if(error &lt; -20):
        right = avg_speed -(error)
        left = avg_speed + (error)
elif(error &gt; 20):
        right =avg_speed - (error)
        left = avg_speed + (error)
</code></pre>

<p>Secondly; If you are going with hit-&amp;-trial calculation of the PID constants, I would suggest, start with just P and get a decent line following (with manageable oscillations at low speeds). Then add an integral term (PI controller) and test it out.The Differential term can be added once the other two are giving a suitable response. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11294" data-toggle = "popover">
				<p>user name : Atif Anwer</p>
				<p> user reputation : 21</p>
				<p class = "tagcontent" id = "usertaginfo-11294">{'None': 2}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11294">Load Comments</button></br>
			<div id = "commentsection-11294" class = 'collapse'>
			<div id = "comment-20436" class = "comment">
				<p>first thanks for your reply. The multiplied error is only an approach I was trying so the robot would respond quicker for big errors (away from the line). I was using only right = 
avg_speed -(error)
left = avg_speed + (error)
but it didn't work as wanted for slightly sharper turns.
Regarding the PD controller, I'm able to follow straight lines perfectly with my P value. Adding the D part enhanced the performance a bit for turns. However, Adding the Integral part caused a big overshoots, even the error value kept increasing when I added the integral term.</p>
			</div>
			<div id = "comment-20437" class = "comment">
				<p>Well, for quicker response, always increase the proportional constant.Because it is directly multiplied with error, so it effects it more. You can incorporate the multiplier by 2 by increasing the proportional constant by say 1.5 to start with. As for the integral part, since PID is best designed once a system model is developed first (normal control systems) so hit-and-trial will be difficult to get right immediately. PD is easier to correct as the effects are move visible, while integral increases/decreases  over  time hence difficult to keep track of without mathematical models.</p>
			</div>
			</div>
				<textarea id = "speech-11294" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11294">
					<img id="start_img-11294" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11294">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>