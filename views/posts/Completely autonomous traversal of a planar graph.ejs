<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Completely autonomous traversal of a planar graph
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-8761" class = "post">
			<h2>Question</h2>
			<div id="vote-8761" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 98</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Completely autonomous traversal of a planar graph</h2>
<p>I have to program an autonomous robot to traverse through a grid given in the following figure.<br/>
But the main problem is that the nodes to visit is not known beforehand, it will be received by the bot in real time.<br/>
E.g.- after reaching the node 19, the bot now has to go to node 6. The shortest path(19-17-7-6) can be calculated by Dijkstra algo but i don't know how to make the robot traverse that path.<br/>
Any idea ?</p>

<p><a href="https://i.stack.imgur.com/y7EBi.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/y7EBi.png" alt="enter image description here"></a></p>

<p>Edit: Sorry for not making the question clear enough.<br/>
I am facing the problem in determining the current position and the direction the robot is facing so i can't define the set of commands (turn left/right/forward) to traverse to the next desired node.<br/>
I am thinking about an extra array for previously visited nodes and the current node and an extra variable for facing direction.<br/>
But for that i will have to define command sets for each node from each and every node.<br/>
Any better idea ?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-8761" data-toggle = "popover">
				<p>user name : Shivendra Singh Vishen</p>
				<p> user reputation : 13</p>
				<p class = "tagcontent" id = "usertaginfo-8761">{'None': 0, 'dynamic-programming': 1, 'first-robotics': 0, 'mobile-robot': 1, 'automatic': 1, 'interrupts': 1}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8761">Load Comments</button></br>
			<div id = "commentsection-8761" class = 'collapse'>
			<div id = "comment-14343" class = "comment">
				<p>What difficulty are you having? You seem to already understand Dykstra's algorithm, and you're given the map in advance - what is it that you are not understanding? Navigation from one point to another? Locating? Line following? How is this actually set up - A line on the floor? A maze with walls? Please be specific.</p>
			</div>
			<div id = "comment-14353" class = "comment">
				<p>I'm voting to close this question because it's unclear what you're asking.</p>
			</div>
			<div id = "comment-14367" class = "comment">
				<p>It is unclear why this is a problem. "Go to 17 from 19" should be a reasonable activity for the robot. Please elaborate why it is difficult to make the robot do this. Some reasons that might pop up: Is the robot hard to manuver? Is the whole graph not known to the robot? Does the robot not know where it is on the graph?</p>
			</div>
			<div id = "comment-14372" class = "comment">
				<p>Have updated my ques. Please take a look @Josh Vander Hook</p>
			</div>
			<div id = "comment-14408" class = "comment">
				<p>Is this a real robot or a simulated one? So, if you are at 19 and you knew you were in 20 before, a simulated robot knows it is facing north and has to turn 90 degrees clockwise. If it were a real robot, there would be error in its movement, so you would need sensors to tell you where you are and which direction you are facing.</p>
			</div>
			<div id = "comment-14420" class = "comment">
				<p>I'm afraid it is still unclear what you are asking. Rather than adding an "edit" section, please consider merging the info in that section into the main part of the question.</p>
			</div>
			<div id = "comment-14421" class = "comment">
				<p>When editing, please also consider Shabaz's subsequent questions. How can you use Dijkstra to find your way to node 6 if you don't know where you are now? One of the input parameters is missing. Can your (real or simulated) robot tell which node it is currently on? Can it determine it's orientation? Can it tell what exit paths there are available? Does it have any global localisation? For instance, even if you don't know where you are, an exits sensor, a compass and a move along a randomly chosen path would allow you to uniquely identify position and orientation on this map.</p>
			</div>
			</div>
				<textarea id = "speech-8761" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8761">
					<img id="start_img-8761" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8761">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-8764"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8764" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">-1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>There are generally three parts to a simple roboitic system:</p>

<ul>
<li>Guidance 

<ul>
<li>How do I get to my goal?

<ul>
<li>extends to state-space, not just position of robot</li>
</ul></li>
</ul></li>
<li>Navigation

<ul>
<li>Where am I?

<ul>
<li>measurement of the robot's state</li>
</ul></li>
</ul></li>
<li>Control

<ul>
<li>How do I use the actuators to achieve my goal, given my current state.</li>
</ul></li>
</ul>

<p>Your path-planning application that uses Djekstra's algorithm to find a path covers only the Guidance part. You still need to be able to estimate where you are, then change your actuators (wheel direction, speed etc..) in order to achieve your goal position.</p>

<p>You can do all this in simulation with <a href="http://gazebosim.org/tutorials?tut=ros_overview" rel="nofollow">Gazebo + ROS</a>, I think everything you need is already developed open-source in ROS.</p>

<p>A very good introductory resource is from Peter Corke <a href="http://www.petercorke.com/RVC/" rel="nofollow">"Robotics, Vision and Control"</a>.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8764" data-toggle = "popover">
				<p>user name : Gouda</p>
				<p> user reputation : 632</p>
				<p class = "tagcontent" id = "usertaginfo-8764">{'control': 0, 'None': 39, 'computer-vision': 1, 'calibration': 1, 'cameras': 1, 'kalman-filter': 0, 'jacobian': 0}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8764">Load Comments</button></br>
			<div id = "commentsection-8764" class = 'collapse'>
			<div id = "comment-14366" class = "comment">
				<p>This is a classic "RTFM" answer to an unclear question. It does not answer anything, and directs the reader to a textbook and waves some high-level knowledge like "use gazebo+ros" which does doesn't help a person new to robotics.  Let's hold off until the question is clear.</p>
			</div>
			</div>
				<textarea id = "speech-8764" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8764">
					<img id="start_img-8764" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8764">Comment</button>
			<br><div id = "ans-8777"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8777" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>You are absolutely correct that Dijkstra's Shortest Path Algorithm can tell you the correct path for the robot to follow. The problem seems to be that you cannot tell where the robot is, and what actions to make the robot take to get to the next node. </p>

<p>There's no "right" answer here, but I can offer some guidance about how I'd do it.</p>

<h3>Where is the robot</h3>

<ul>
<li>If the robot can observe the configuration of the outgoing edges, then he can narrow down his location to a set of possible nodes. For example, if there are two outgoing edges, he can only be in 2,3,5,6,8,9, 11, or 12. Similarly for 3, and 4 outgoing is uniquely the center</li>
<li>Since you say you have to deal with the robot's orientation when moving, it is probably safe to assume the robot can measure its orientation or at least discover it relative to the current configuration of edges. If the robot has some way of knowing his orientation, then the number of edges and their cardinal direction would help even more. For example, with two edges <em>facing north and south</em>, then we know the robot is at 3,5,9, or 11.</li>
<li>Furthermore, if the robot knew the history of possible locations, then we can also incorporate that information. If we knew the robot had two outgoing edges facing east and west, then he moved to the westmost edge and now had two edges facing north and south, then we know the robot is now at 3 and came from 2. What's cool here, is the robot did not know from just the edges, it was the <em>action of moving</em> that caused it to figure out where it was.</li>
</ul>

<p>I might do that as follows:</p>

<ul>
<li>Keep a separate list of all nodes and their edges. Assume all nodes are "unmarked"</li>
<li>At the start

<ul>
<li>Observe the number of outgoing edges at the current node</li>
<li>Mark all nodes with a different number of edges</li>
<li>Observe the outgoing edge orientations, and mark all nodes which have different orientation (i.e., if we notice an edge going north, mark all nodes which don't have an edge going north).</li>
<li>At this point, we know the robot is only in an unmarked node</li>
<li>Travel along an arbitrary edge (but not back to start)</li>
<li>Check the new outgoing edges. Mark all nodes which have different outgoing edges. </li>
<li>Additionally, mark all nodes which have the same edges but are not connected to an unmarked node</li>
</ul></li>
</ul>

<p>Repeat this process until only one unmarked node remains. Without orientation, this will never happen though (for example, 4 and 10 are identical up to orientation)</p>

<p>If you have no orientation information, and no way to observe outgoing edges, then history is all you have. If you know what node you started at, then by all means, you must come up with a complete sequence of actions to get the robot to the desired node. Here's how we might do that.</p>

<h3>Getting there</h3>

<p>Let's assume the robot starts at 1 and has to get to 21. I'd program a small subroutine that did the following.</p>

<ul>
<li>Call dijkstra to get the shortest path.</li>
<li>Until reached:  

<ul>
<li>Turn the robot toward the next node</li>
<li>take the edge</li>
<li>Update the robot's current node</li>
<li>Update the next node from the list in Dijkstra's output</li>
</ul></li>
</ul>

<p>Using this, the robot always knows his current node and next node. We only assumed that we knew the starting orientation. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8777" data-toggle = "popover">
				<p>user name : Josh Vander Hook</p>
				<p> user reputation : 3960</p>
				<p class = "tagcontent" id = "usertaginfo-8777">{'None': 345}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-8777" class = 'collapse'>
			</div>
				<textarea id = "speech-8777" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8777">
					<img id="start_img-8777" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8777">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>