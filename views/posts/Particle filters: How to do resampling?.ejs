<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Particle filters: How to do resampling?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-479" class = "post">
			<h2>Question</h2>
			<div id="vote-479" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">17</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 12782</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Particle filters: How to do resampling?</h2>
<p>I understand the basic principle of a particle filter and tried to implement one. However, I got hung up on the resampling part. </p>

<p>Theoretically speaking, it is quite simple: From the old (and weighted) set of particles, draw a new set of particles with replacement. While doing so, favor those particles that have high weights. Particles with high weights get drawn more often and particles with low weights less often. Perhaps only once or not at all. After resampling, all weights get assigned the same weight.</p>

<p>My first idea on how to implement this was essentially this:</p>

<ol>
<li>Normalize the weights</li>
<li>Multiply each weight by the total number of particles</li>
<li>Round those scaled weights to the nearest integer (e.g. with <code>int()</code> in Python)</li>
</ol>

<p>Now I should know how often to draw each particle, <em>but</em> due to the roundoff errors, I end up having <em>less particles</em> than before the resampling step. </p>

<p>The Question: How do I "fill up" the missing particles in order to get to the same number of particles as before the resampling step? Or, in case I am completely off track here, how do I resample correctly?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-479" data-toggle = "popover">
				<p>user name : Daniel Eberts</p>
				<p> user reputation : 546</p>
				<p class = "tagcontent" id = "usertaginfo-479">{'None': 32, 'particle-filter': 17, 'localization': 17}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-479" class = 'collapse'>
			</div>
				<textarea id = "speech-479" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-479">
					<img id="start_img-479" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-479">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-480"  class = "post">
				<h2>Answer</h2>
			<div id="vote-480" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>For an example of python code that properly implements resampling, you might find this github project to be useful:
<a href="https://github.com/mjl/particle_filter_demo" rel="nofollow noreferrer">https://github.com/mjl/particle_filter_demo</a></p>

<p>Plus, it comes with its own visual representation of the resampling process, that should help you debug your own implementation.
<img src="https://i.stack.imgur.com/YylQT.gif" alt="Particle filter operation"></p>

<p>In this visualization, the green turtle shows the actual position, the large grey dot shows the estimated position and turns green when it converges.  The weight goes from likely (red) to unlikely (blue).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-480" data-toggle = "popover">
				<p>user name : Ian</p>
				<p> user reputation : 9640</p>
				<p class = "tagcontent" id = "usertaginfo-480">{'planning': 10, 'None': 809, 'power': 1, 'algorithm': 10, 'battery': 1, 'slam': 7, 'coverage': 10, 'mobile-robot': 9, 'sensors': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-480">Load Comments</button></br>
			<div id = "commentsection-480" class = 'collapse'>
			<div id = "comment-554" class = "comment">
				<p>Thanks for the link. It's always insightful to see how other people implemented an algorithm.</p>
			</div>
			<div id = "comment-557" class = "comment">
				<p>This is a visualization of a particle filter converging. Not sure what insight it provides with respect to the question.</p>
			</div>
			<div id = "comment-563" class = "comment">
				<p>I included the visualization since it's what is produced by the code I posted -- an example of how to properly implement resampling.</p>
			</div>
			</div>
				<textarea id = "speech-480" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-480">
					<img id="start_img-480" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-480">Comment</button>
			<br><div id = "ans-481"  class = "post">
				<h2>Answer</h2>
			<div id="vote-481" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">12</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The issue you're running into is often referred to as sample impoverishment. We can see why your approach suffers from it with a fairly simple example. Let's say you have 3 particles and their normalized weights are 0.1, 0.1, 0.8. Then multiplying by each weight by the 3 yields 0.3, 0.3, and 2.4. Then rounding yields 0, 0, 2. This means you would not pick the first two particles and the last one would be picked twice. Now you are down to two particles. I suspect this is what you have been seeing when you say "due to the roundoff errors, I end up having less particles."</p>

<p>An alternative selection method would be as follows.</p>

<ol>
<li>Normalize weights.</li>
<li>Calculate an array of the cumulative sum of the weights.</li>
<li>Randomly generate a number &amp; determine which range in that cumulative weight array to which the number belongs.</li>
<li>The index of that range would correspond to the particle that should be created.</li>
<li>Repeat until you have the desired number of samples.</li>
</ol>

<p>So, using the example above we would start with the normalized weights. We would then calculate the array [0.1, 0.2, 1]. From there we calculate 3 random numbers say 0.15, 0.38, and 0.54. This would have us pick the second particle once and the third particle twice. The point is that it gives the smaller particles a chance to propagate.</p>

<p>One thing to note is that while this method will deal with impoverishment it can lead to a suboptimal solutions. For instance, it may be that none of the particles really match your given location well (assuming you're using this for localization). The weights only tell you which particles match best, not the quality of the match. As such when you take additional readings and repeat the process you may find that all your particles group at a single location that is not the correct location. This is usually because there were no good particles to start. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-481" data-toggle = "popover">
				<p>user name : DaemonMaker</p>
				<p> user reputation : 3321</p>
				<p class = "tagcontent" id = "usertaginfo-481">{'control': 4, 'stereo-vision': 15, 'None': 271, 'computer-vision': 15, 'battery': 7, 'cameras': 15, 'research': 4, 'troubleshooting': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-481">Load Comments</button></br>
			<div id = "commentsection-481" class = 'collapse'>
			<div id = "comment-553" class = "comment">
				<p>Thanks for the insightful response! The selection method you suggested seems familiar. If i recall correctly, that was a common way of treating the sample impoverishment problem. I have seen it before but never really understood the reason for this procedure. Now i know better!</p>
			</div>
			<div id = "comment-556" class = "comment">
				<p>I think your interpretation of sampling impoverishment may be a little misleading. The fact the the poster looses particles is due to an unsuitable method for resampling. Particle impoverishment is when your posterior distribution is not adequately represented by the particles anymore.</p>
			</div>
			</div>
				<textarea id = "speech-481" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-481">
					<img id="start_img-481" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-481">Comment</button>
			<br><div id = "ans-484"  class = "post">
				<h2>Answer</h2>
			<div id="vote-484" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">7</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>As I guess you found out yourself, the resampling method you are proposing is slightly flawed, as it should not alter the number of particles (unless you want to). The principle is that the weight represents the relative probability with respect to the other particles. In the resampling step, you draw from the set of particles such that for each particle, the normalized weight times the number of particles represents the number of times that particle is drawn on average. In that your idea is correct. Only by using rounding instead of sampling, you will always eliminate particles for which the expected value is less than half. </p>

<p>There are a number of ways to perform the resampling properly. There is a nice paper called <a href="http://users.isy.liu.se/rt/schon/Publications/HolSG2006.pdf">On resampling algorithms for particle filters</a>, comparing the different methods. Just to give a quick overview:</p>

<ul>
<li><p>Multinomial resampling: imagine a strip of paper where each particle has a section, where the length is proportional to its weight. Randomly pick a location on the strip N times, and pick the particle associated with the section.</p></li>
<li><p>Residual resampling: this approach tries to reduce the variance of the sampling, by first allocating each particle their integer floor of the expected value, and leave the rest to multinomial resampling. E.g. a particle with an expected value of 2.5 will have 2 copies in the resampled set and another one with an expected value of 0.5.</p></li>
<li><p>Systematic resampling: take a ruler with regular spaced marks, such that N marks are the same length as your strip of paper. Randomly place the ruler next to your strip. Take the particles at the marks.</p></li>
<li><p>Stratified resampling: same as systematic resampling, except that the marks on the ruler are not evenly placed, but added as N random processes sampling from the interval 0..1/N.</p></li>
</ul>

<p>So to answer your question: what you have implemented could be extended to a form of residual sampling. You fill up the missing slots by sampling based on a multinonmial distribution of the reminders.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-484" data-toggle = "popover">
				<p>user name : Jakob</p>
				<p> user reputation : 2519</p>
				<p class = "tagcontent" id = "usertaginfo-484">{'ransac': 3, 'None': 210, 'computer-vision': 1, 'cameras': 1, 'c++': 3, 'slam': 12, 'rock': 1, 'i2c': 3, 'servos': 3, 'software': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-484">Load Comments</button></br>
			<div id = "commentsection-484" class = 'collapse'>
			<div id = "comment-558" class = "comment">
				<p>+1 for having already answered my follow-up question :)</p>
			</div>
			</div>
				<textarea id = "speech-484" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-484">
					<img id="start_img-484" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-484">Comment</button>
			<br><div id = "ans-9942"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9942" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>one simple way to do this is 
numpy.random.choice(N, N, p=w, replace=True)  where N is the no. of particles and w = normalized weights.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9942" data-toggle = "popover">
				<p>user name : narayan</p>
				<p> user reputation : 1</p>
				<p class = "tagcontent" id = "usertaginfo-9942">{'None': 0}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9942">Load Comments</button></br>
			<div id = "commentsection-9942" class = 'collapse'>
			<div id = "comment-17710" class = "comment">
				<p>Welcome to *Robotics*, narayan. Could you please expand this answer some? For instance, why use a random choice? What is `p` in your function? The more detailed you can make your answer, the more useful it will be for future visitors who have the same problem.</p>
			</div>
			</div>
				<textarea id = "speech-9942" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9942">
					<img id="start_img-9942" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9942">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>