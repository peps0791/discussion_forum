<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>A Vector Field Histogram implementation in Python 2.7
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-9200" class = "post">
			<h2>Question</h2>
			<div id="vote-9200" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 276</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>A Vector Field Histogram implementation in Python 2.7</h2>
<p>I am trying to implement the Vector Field Histogram as described by <a href="http://www.cs.cmu.edu/~motionplanning/papers/sbp_papers/integrated1/borenstein_VFHisto.pdf">Borenstein, Koren, 1991</a> in Python 2.7 using the <a href="https://scipy.org/">SciPy stack</a>.</p>

<p>I have already been able to calculate the polar histogram, as described in the paper, as well as the smoothing function to eliminate noise. This variable is stored in a numpy array, named <code>self.Hist</code>.</p>

<p>However, the function <code>computeTheta</code>, pasted below, which computes the steering direction, is only able to compute the proper direction if the valleys (i.e. consecutive sectors in the polar histogram whose obstacle density is below a certain threshold) do not contain the section where a full circle is completed, i.e. the sector corresponding to <code>360 </code>.</p>

<p>To make things clearer, consider these two examples: </p>

<ul>
<li>If the histogram contains a peak in the angles between, say, <code>330 </code> and <code>30 </code>, with the rest of the histogram being a valley, then the steering direction will be computed correctly.</li>
<li><p>If, however, the peak is contained between, say, <code>30 </code> and <code>60 </code>, then the valley will start at <code>60 </code>, go all the way past <code>360 </code> and end in <code>30 </code>, and the steering direction will be computed incorrectly, since this single valley will be considered two valleys, one between <code>0 </code> and <code>30 </code>, and another between <code>60 </code> and <code>360 </code>.</p>

<p>def computeTheta(self, goal):</p>

<pre><code>thrs = 2.
s_max = 18


#We start by calculating the sector corresponding to the direction of the target.
target_sector = int((180./np.pi)*np.arctan2(goal[1] - self.VCP[1], goal[0] - self.VCP[0]))
if target_sector &lt; 0:
    target_sector += 360
target_sector /= 5

#Next, we assume there is no best sector.
best_sector = -1
dist_best_and_target = abs(target_sector - best_sector)

#Then,  we find the sector within a valley that is closest to the target sector.
for k in range(self.Hist.shape[0]):
    if self.Hist[k] &lt; thrs and abs(target_sector - k) &lt; dist_best_and_target:
        best_sector = k
        dist_best_and_target = abs(target_sector - k)

#If the sector is still -1, we return it as an error.
print (target_sector, best_sector)
if best_sector == -1:
    return -1

#If not, we can proceed...
elif best_sector &gt; -1:
    #... by deciding whether the valley to which the best sector belongs is a "wide" or a "narrow" one.
    #Assume it's wide.
    type_of_valley = "Wide"

    #If we find a sector that contradicts our assumption, we change our minds.
    for sector in range(best_sector, best_sector + s_max + 1):
        if sector &lt; self.Hist.shape[0]:
            if self.Hist[sector] &gt; thrs:
                type_of_valley = "Narrow" 

    #If it is indeed a wide valley, we return the angle corresponding to the sector (k_n + s_max)/2.
    if type_of_valley == "Wide":

        theta = 5*(best_sector + s_max)/2
        return theta

    #Otherwise, we find the far border of the valley and return the angle corresponding to the mean value between the best sector and the far border.
    elif type_of_valley == "Narrow":
        for sector in range(best_sector, best_sector + s_max):
            if self.Hist[sector] &lt; thrs:
                far_border = sector

        theta = 5*(best_sector + far_border)/2
        return theta
</code></pre></li>
</ul>

<p>How can I address this issue? Is there a way to treat the histogram as circular? Is there maybe a better way to write this function?</p>

<p>Thank you for your time.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-9200" data-toggle = "popover">
				<p>user name : Danks C.</p>
				<p> user reputation : 28</p>
				<p class = "tagcontent" id = "usertaginfo-9200">{'python': 5, 'None': 0, 'motion-planning': 5, 'planning': 5}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9200">Load Comments</button></br>
			<div id = "commentsection-9200" class = 'collapse'>
			<div id = "comment-16367" class = "comment">
				<p>May I ask how fast is the execution time per calculation of the polar histogram?</p>
			</div>
			</div>
				<textarea id = "speech-9200" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9200">
					<img id="start_img-9200" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9200">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-9201"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9201" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Because you are using Python's arctan2 function (which returns values between $[-\pi, \pi]$), I don't see why you need to normalize the target sector angle using</p>

<pre><code>if target_sector &lt; 0:
    target_sector += 360
</code></pre>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9201" data-toggle = "popover">
				<p>user name : SteveO</p>
				<p> user reputation : 2960</p>
				<p class = "tagcontent" id = "usertaginfo-9201">{'None': 222}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9201">Load Comments</button></br>
			<div id = "commentsection-9201" class = 'collapse'>
			<div id = "comment-16265" class = "comment">
				<p>You make a good point. This is basically "debugging sugar"; something I did to make it easier for me to read out the angles on the shell during runtime. I'll probably remove it in a final version.</p>
			</div>
			<div id = "comment-16269" class = "comment">
				<p>Isn't this what is causing you the error of the algorithm causing you to steer 360 degrees past the desired direction when you start your search at the larger angle of the valley?</p>
			</div>
			<div id = "comment-16270" class = "comment">
				<p>I tried removing this section ans making the pertinent changes, but it's still basically the same. These lines basically just convert a negative angle such as -30 to a positive one, such as 330 degrees. When I removed this line of code, essentially what happened was that I accessed the array using a construction such as self.Hist[-1]. The circularity was still be a problem.</p>
			</div>
			</div>
				<textarea id = "speech-9201" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9201">
					<img id="start_img-9201" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9201">Comment</button>
			<br><div id = "ans-9202"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9202" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I'm having a hard time following your code, partly because I don't know Python but I think mostly because I'm not sure I understand your variables. That said, I think I <em>do</em> understand your problem. </p>

<p>An approach I would take to solve this would be to "warp" the data before evaluation, then make your decisions, then "de-warp" the output. For example, consider the following pseudo-code:</p>

<pre><code>headingOffset = 0;
while(histogram[0] != peak)
    headingOffset = headingOffset + 1;
    histogram = CircularShift(histogram, -1);
end

&lt;find heading&gt;
heading = CircularShift(heading,+headingOffset);
</code></pre>

<p>Hopefully I've made this clear; basically, re-orient your data such that you always start at a peak. This will ensure a valley always ends &lt;= 360 degrees. Then, once you find your heading, shift it according to how far you shifted your data to start with.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9202" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-9202">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9202">Load Comments</button></br>
			<div id = "commentsection-9202" class = 'collapse'>
			<div id = "comment-16264" class = "comment">
				<p>As a comment, I assumed the heading would be a flag or similar in a bit/byte array that corresponds 1:1 with your histogram variable. In the event that it's just an angle, then you need to convert based on the number of steps times the angular step between points in the histogram field.</p>
			</div>
			<div id = "comment-16292" class = "comment">
				<p>So, I tried it with the numpy.roll() function, rotating the histogram around the index with the highest density, and it worked! Thank you very much! :D</p>
			</div>
			</div>
				<textarea id = "speech-9202" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9202">
					<img id="start_img-9202" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9202">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>