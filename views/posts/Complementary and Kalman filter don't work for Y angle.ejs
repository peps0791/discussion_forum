<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Complementary and Kalman filter don't work for Y angle
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-7831" class = "post">
			<h2>Question</h2>
			<div id="vote-7831" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 402</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Complementary and Kalman filter don't work for Y angle</h2>
<p>I'm working on a Python script which reads the data from the <strong>MPU6050</strong> IMU and returns the angles using sensor fusion algorithms: <strong>Kalman</strong> and <strong>Complementary</strong> <strong>filter</strong>. Here is the implementation:
Class MPU6050 reads the data from the sensor, processes it. Class Kalman is the implementation of the Kalman filter. The problem is the next: None of the Kalman, neither the Complementary filter returns appropriate angle values from the <strong>Y</strong> angle. The filters work fine on the <strong>X</strong> angle, but the <strong>Y</strong> angle values make no sense. See the graphs below. I've checked the code million times, but still can't figure out where the problem is. <a href="https://i.stack.imgur.com/1hgV8.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/1hgV8.png" alt="X angle"></a> <a href="https://i.stack.imgur.com/Hugl7.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/Hugl7.png" alt="Y angle"></a></p>

<pre><code>class MPU6050():
    def __init__(self):
        self.bus = smbus.SMBus(1)
        self.address = 0x68

        self.gyro_scale = 131.072 # 65535 / full scale range (2*250deg/s)
        self.accel_scale = 16384.0 #65535 / full scale range (2*2g)

        self.iterations = 2000                    

        self.data_list = array('B', [0,0,0,0,0,0,0,0,0,0,0,0,0,0])
        self.result_list = array('h', [0,0,0,0,0,0,0])       

        self.gyro_x_angle = 0.0
        self.gyro_y_angle = 0.0
        self.gyro_z_angle = 0.0         

        self.kalman_x = Kalman()
        self.kalman_y = Kalman()

    def init_sensor()...

    def calculate_angles(self):
        dt = 0.01

        comp_y = 0.0
        comp_x = 0.0
        print("Reading data...")

        while True:             
            self.read_sensor_raw()

            gyro_x_scaled = (self.result_list[4] / self.gyro_scale)
            gyro_y_scaled = (self.result_list[5] / self.gyro_scale)
            gyro_z_scaled = (self.result_list[6] / self.gyro_scale)

            acc_x_scaled = (self.result_list[0] / self.accel_scale)
            acc_y_scaled = (self.result_list[1] / self.accel_scale)
            acc_z_scaled = (self.result_list[2] / self.accel_scale)

            acc_x_angle = math.degrees(math.atan2(acc_y_scaled, self.dist(acc_x_scaled,acc_z_scaled)))
            acc_y_angle = math.degrees(math.atan2(acc_x_scaled, self.dist(acc_y_scaled,acc_z_scaled)))

            comp_x = 0.95 * (comp_x + (gyro_x_scaled * dt)) + 0.05 * acc_x_angle
            comp_y = 0.95 * (comp_y + (gyro_y_scaled * dt)) + 0.05 * acc_y_angle

            kalman_y_angle = self.kalman_y.filter(acc_y_angle, gyro_y_scaled, dt)
            kalman_x_angle = self.kalman_x.filter(acc_x_angle, gyro_x_scaled, dt)

            self.gyro_x_angle += gyro_x_scaled * dt
            self.gyro_y_angle -= gyro_y_scaled * dt
            self.gyro_z_angle -= gyro_z_scaled * dt   

            time.sleep(dt) 

    def read_sensor_raw(self):
        self.data_list = self.bus.read_i2c_block_data(self.address, 0x3B, 14)

        for i in range(0, 14, 2):
            if(self.data_list[i] &gt; 127):
                self.data_list[i] -= 256

            self.result_list[int(i/2)] = (self.data_list[i] &lt;&lt; 8) + self.data_list[i+1]

    def dist(self, a,b):
        return math.sqrt((a*a)+(b*b))

class Kalman():
    def __init__(self):
     self.Q_angle = float(0.001)
     self.Q_bias = float(0.003)
    self.R_measure = float(0.03)

    self.angle = float(0.0)
    self.bias = float(0.0)
    self.rate = float(0.0)

    self.P00 = float(0.0)
    self.P01 = float(0.0)
    self.P10 = float(0.0)
    self.P11 = float(0.0)

def filter(self, angle, rate, dt):
    self.rate = rate - self.bias
    self.angle += dt * self.rate

    self.P00 += dt * (dt * self.P11 - self.P01 - self.P10 + self.Q_angle)
    self.P01 -= dt * self.P11
    self.P10 -= dt * self.P11
    self.P11 += self.Q_bias * dt

    S = float(self.P00 + self.R_measure)

    K0 = float(0.0)
    K1 = float(0.0)
    K0 = self.P00 / S
    K1 = self.P10 / S

    y = float(angle - self.angle)

    self.angle += K0 * y
    self.bias += K1 * y

    P00_temp = self.P00
    P01_temp = self.P01

    self.P00 -= K0 * P00_temp
    self.P01 -= K0 * P01_temp
    self.P10 -= K1 * P00_temp
    self.P11 -= K1 * P01_temp

    return self.angle
</code></pre>

<p><strong>EDIT:</strong>
I've added some information based on @Chuck's answer:</p>

<ul>
<li><code>self.result_list[3]</code> contains the temperature</li>
<li>In my opinion the compl. filter is implemented correctly: <code>gyro_x_scaled</code> and <code>gyro_y_scaled</code> are angular velocities, but they are multiplied by <code>dt</code>, so they give <strong>angle</strong>. <code>acc_?_scaled</code> are accelerations, but <code>acc_x_angle</code> and <code>acc_x_angle</code> are <strong>angles</strong>. Check my comment, where the Complementary filter tutorial is.</li>
<li>Yes, there was something missing in the Kalman filer, I've corrected it.</li>
<li>I totally agree with you, <code>sleep(dt)</code> is not the best solution. I've measured how much time the calculation takes, and it is about 0.003 seconds. The Y angle filters return incorrect values, even if <code>sleep(0.007)</code> or <code>sleep(calculatedTimeDifference)</code> is used.</li>
</ul>

<p>The Y angle filters still return incorrect values.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-7831" data-toggle = "popover">
				<p>user name : Alex</p>
				<p> user reputation : 26</p>
				<p class = "tagcontent" id = "usertaginfo-7831">{'quadcopter': 0, 'None': 1, 'accelerometer': 0, 'raspberry-pi': 1, 'kalman-filter': 2, 'servos': 1, 'gyroscope': 0}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-7831">Load Comments</button></br>
			<div id = "commentsection-7831" class = 'collapse'>
			<div id = "comment-11389" class = "comment">
				<p>The Kalman filter implementation is taken from [this page](http://blog.tkjelectronics.dk/2012/09/a-practical-approach-to-kalman-filter-and-how-to-implement-it/)</p>
			</div>
			<div id = "comment-11393" class = "comment">
				<p>The complementary filter is taken from [this page](http://www.pieter-jan.com/node/11)
In my code: `gyro_x_scaled * dt` is an angle and `acc_x_angle` is also an angle</p>
			</div>
			<div id = "comment-11395" class = "comment">
				<p>Does the gyro in fact output a velocity and not an acceleration? Also, I've been wondering if the x-axis neatness is a fluke caused by the less demanding input. Can you provide test data where you run the same input profile on each axis? Or, alternatively, another troubleshooting step would be to run the same test but swap the definitions of gyro_x_scaled/gyro_y_scaled and the same for acceleration. This way x data is filtered using y's filters and vice versa.</p>
			</div>
			</div>
				<textarea id = "speech-7831" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7831">
					<img id="start_img-7831" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7831">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-7835"  class = "post">
				<h2>Answer</h2>
			<div id="vote-7835" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I've never used Python before in my life, but I'm a Matlab wizard and an engineer, so I'll just go through point-by-point and highlight things that look questionable to me. </p>

<ol>
<li>What is self.result_list[3]? The linear accelerations are 0-2, are you sure you meant to skip 3? Gyro accelerations are 4-6.</li>
<li>I see what you're doing using linear accelerations to generate a rotational acceleration,  but keep in mind that technique will only generate valid output if there is no true linear acceleration.</li>
<li>Your <code>comp_</code> calculation leaves off a <code>dt</code> at the end. I'm assuming you want that to be angular velocity, but you are multiplying sample time to only the gyro acceleration and not the accel term - you are adding a velocity and an acceleration and using that as one term. </li>
<li>Your Kalman filter doesn't update its covariance matrix correctly. The code to which you linked uses <code>tempP00</code> and <code>tempP01</code> to update P00, P01, P10, and P11. You do not, so you are changing P00 and P01 first, then using those new values to update P10 and P11. Refer to step 7 on the site you linked. </li>
<li>I would caution against using a dedicated sample time variable like your <code>dt</code> in conjuction with <code>sleep</code>. Your loop polls the sensor and does some calculations, all of which requires time. Say that time is 1ms, and your sample time variable is 10ms (0.01s). Because you pause/sleep for 0.01s and THEN do 1ms of communication and processing, your ACTUAL sample time (time between samples) is 11ms, so the sample time you're using for filtering and numeric integration is off by 10%. It's much better to use an interrupt to time sampling than a sleep command. Here it may not be such an issue, but in the future, with longer code or code with logic that has a variable execution time on a per-sample basis, it could have a bigger impact. </li>
</ol>

<p>As mentioned I'm no Python user so I can't comment regarding your syntax or execution otherwise. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-7835" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-7835">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-7835">Load Comments</button></br>
			<div id = "commentsection-7835" class = 'collapse'>
			<div id = "comment-11394" class = "comment">
				<p>Thanks for your answer, I've edited the question, added more information.</p>
			</div>
			</div>
				<textarea id = "speech-7835" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7835">
					<img id="start_img-7835" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7835">Comment</button>
			<br><div id = "ans-7836"  class = "post">
				<h2>Answer</h2>
			<div id="vote-7836" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I've found the answer: a minus sign is needed here: <code>gyro_y_scaled = - (self.result_list[5] / self.gyro_scale)</code>.</p>

<p>Explanation: <code>gyro_y_scaled</code> is the velocity in rad/sec. If you check the code, especially lines 29-31 on <a href="http://blog.bitify.co.uk/2013/11/reading-data-from-mpu-6050-on-raspberry.html" rel="nofollow">this page</a>, you can see, there is a minus sign before <code>math.degrees(radians)</code>, but my implementation has no minus sign before <code>math.degrees(math.atan2(acc_x_scaled, self.dist(acc_y_scaled,acc_z_scaled)))</code>. In addition, <code>self.gyro_y_angle -= gyro_y_scaled * dt</code>, there is also minus sign instead of plus. To sum up, the velocity and the angles, mentioned above, had "opposite" values and this is why the filters didn't work. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-7836" data-toggle = "popover">
				<p>user name : Alex</p>
				<p> user reputation : 26</p>
				<p class = "tagcontent" id = "usertaginfo-7836">{'quadcopter': 0, 'None': 1, 'accelerometer': 0, 'raspberry-pi': 1, 'kalman-filter': 2, 'servos': 1, 'gyroscope': 0}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-7836" class = 'collapse'>
			</div>
				<textarea id = "speech-7836" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-7836">
					<img id="start_img-7836" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-7836">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>