<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Robotics with Kinect
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-687" class = "post">
			<h2>Question</h2>
			<div id="vote-687" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 923</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Robotics with Kinect</h2>
<p>I want to learn robotics and really interested in making a robot based on Kinect sensor.</p>

<p>I see so many projects like <a href="http://www2.macleans.ca/2011/11/03/the-150-robot-revolution/" rel="nofollow">this one</a>, and just wondering how it works on top level. I downloaded Kinect SDK and did some basic tutorials, but I just don't think that Microsoft SDK is the library to use for real robotics projects. Any suggestions where to start and what library to use? Any good books in particular or online resources?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-687" data-toggle = "popover">
				<p>user name : mishap</p>
				<p> user reputation : 108</p>
				<p class = "tagcontent" id = "usertaginfo-687">{'kinect': 1, 'None': 0}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-687">Load Comments</button></br>
			<div id = "commentsection-687" class = 'collapse'>
			<div id = "comment-871" class = "comment">
				<p>This would be easier to answer if you provided more specifics about your intended project. Then, remove the many questions and focus on one question regarding implementation or theory which can be concisely answered. If you do not have a design in mind, then that itself is the place to start!</p>
			</div>
			</div>
				<textarea id = "speech-687" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-687">
					<img id="start_img-687" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-687">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-688"  class = "post">
				<h2>Answer</h2>
			<div id="vote-688" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">7</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Welcome to the Robotics StackExchange! The Kinect is only a sensor, albeit a relatively powerful one for its price. To use it with a robot, you need to cover basically two bases:</p>

<ol>
<li><p><strong>Get a robot that is able to interface with it</strong></p>

<p>That means you need to somehow build/buy something consisting of processing unit (a microcontroller or PC) with USB connectivity and the appropriate drivers to recognize and control the Kinect (usually easier with a PC running Linux). This thing also needs to be able to provide appropriate power input to the sensor.</p>

<p>You also want it to be able to move, so you need to add motors or other actuators to it and figure out how to get your processing unit to control them (usually easier with a microcontroller).</p>

<p>If you want it to be able to process all the data from the Kinect and make complex decisions by itself you will need enough processing power onboard (usually a PC). Otherwise, you might have to add wireless communication with other computers that will do the heavy calculations.</p></li>
<li><p><strong>Figure out how to get the Kinect data and what to do with it</strong></p>

<p>The Microsoft SDK is perfectly usable, as is OpenNI or libfreenect... It really comes down to what operating system is running on your robot. I am not aware of how to interface the Kinect with less powerful microcontrollers not running a popular OS (Windows/Linux/Mac) and while it may be possible it definitely is not desirable (as in it would be a lot of work for a beginner).</p>

<p>Once you've chosen which programming library and driver to use to get Kinect data, you will need to find out what you want to do with the data you get. The raw sensor data is just a range image, but some of these libraries can provide some higher-level info extracted from these range images such as skeletonized models of people.</p></li>
</ol>

<p><strong>In short:</strong></p>

<ol>
<li><p>Start by figuring out what kind of robot you want, how you want it to move, where the Kinect will be placed and so on. </p></li>
<li><p>Choose your processing unit after searching for alternatives that are able to interface with the Kinect easily. I would suggest something like a netbook running Linux to a beginner, with a microcontroller board like the Arduino connected via USB to control motors and other low-level components of the robot.</p></li>
<li><p>Once you have the basic components of your robot ready (e.g. mechanical parts in place, PC running Linux, motor control working, etc) add the Kinect to the mix by connecting it to your processing unit and start working on what to do with it.</p></li>
</ol>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-688" data-toggle = "popover">
				<p>user name : georgebrindeiro</p>
				<p> user reputation : 1266</p>
				<p class = "tagcontent" id = "usertaginfo-688">{'computer-vision': 9, 'None': 98, 'slam': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-688">Load Comments</button></br>
			<div id = "commentsection-688" class = 'collapse'>
			<div id = "comment-879" class = "comment">
				<p>As an example of a relatively simple robot that operates with a Kinect as its main sensor, have a look at [turtleboots](http://turtlebot.com/) from willowgarage. I would hesitate to recommend buying one, as the software that runs it can get quite involved, but it illustrates all the components needed, as per @George's excellent answer.</p>
			</div>
			</div>
				<textarea id = "speech-688" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-688">
					<img id="start_img-688" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-688">Comment</button>
			<br><div id = "ans-692"  class = "post">
				<h2>Answer</h2>
			<div id="vote-692" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Evil Closet Monkey nicely itemized the possible Kinect libraries in <a href="https://robotics.stackexchange.com/a/660/577">his answer</a> to another Kinect related question mentioning <a href="http://openkinect.org/wiki/Main_Page" rel="nofollow noreferrer">OpenKinect SDK</a> and <a href="http://openni.org/" rel="nofollow noreferrer">OpenNI SDK</a> besides Windows SDK.</p>

<p>A good book on Kinect is <a href="http://shop.oreilly.com/product/0636920020684.do" rel="nofollow noreferrer">Making Things See</a> by Greg Borenstein from O'Reilly.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-692" data-toggle = "popover">
				<p>user name : rics</p>
				<p> user reputation : 551</p>
				<p class = "tagcontent" id = "usertaginfo-692">{'kinect': 32, 'multi-agent': 3, 'None': 25, 'sensors': 32}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-692" class = 'collapse'>
			</div>
				<textarea id = "speech-692" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-692">
					<img id="start_img-692" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-692">Comment</button>
			<br><div id = "ans-2650"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2650" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Excellent answer by George. If I may, I'd like add more details and suggestions. (I would recommend googling terms that are new to you). </p>

<p>Your entire robot (input) configuration depends on what kind of data your code is going to process. If it's more vision oriented, the data can be depth maps, point clouds, rgb images  or a combination of the 3. This means you can use something like the Kinect (which would require a more powerful processor that the arduino), or simple rgb cameras (for which something like the arducam+arduino is sufficient). Arduino can run simple computer vision programs, but nothing too heavy and processor intensive. Also, if I'm not wrong, Arduino cannot process and use its GPIO pins at the same time. Which means during an intensive processing task, your robot motors are basically off.</p>

<p>In my experience, if you're planning to use point cloud stream, it would require a dedicated graphics hardware (like a GPU chip that's present on the Raspberry Pi or pcduino). (Hell, even my laptop cannot run the point cloud stream openni drivers without a dedicated graphics card)</p>

<p>Depth maps can be easily processed without a GPU, but it still requires high processing capabilities which would render the Arduino micro'controller' pretty useless. In this case you'd require a microprocessor board viz. Beagleboard, pcduino, gumstix, Raspi, Arduino TRE (not released yet), to name a few.</p>

<p>In terms of the output, the way to control your robot's mobility is to send power to the dc motors, servos, or stepper motors of your robot. This requires writing programs similar to what one would write on the microcontroller like an arduino. </p>

<p>If you require microprocessors, in my opinion (although I've never used it before), the pcduino V2 has it all: First of all, it's relatively cheap (~$70 + some cables etc). Raspi is cheaper, but not as powerful. 
Pcduino has 1Ghz A10 processor, expandable upto 32GB SD slot, a GPU chip (OpenGL ES2.0) which means you can program CV applications and integrate webcams, or maybe even a Kinect. It also has wifi arduino headers, HDMI and usb outputs for easily connecting to monitors for programming etc. 
But the thing I love about pcduino is that it has arduino headers. Which means you can attach something like the ADAfruit motor shield (normally used with arduino to effectively control a bunch of motors) on top of the pcduino board and send motor signals to control your robot.</p>

<p>Hope this helps</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2650" data-toggle = "popover">
				<p>user name : Anshul</p>
				<p> user reputation : 151</p>
				<p class = "tagcontent" id = "usertaginfo-2650">{'None': 10, 'irobot-create': 2, 'microcontroller': 0, 'openni': 1, 'kinect': 2, 'ros': 1, 'arm': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2650">Load Comments</button></br>
			<div id = "commentsection-2650" class = 'collapse'>
			<div id = "comment-5202" class = "comment">
				<p>The PCDuino is great but be sure you get the V2. The V1 is Arduino compatible but the headers are not laid out to take a shield. Of course most shields need some form of level conversion inline too. Not just for PCDuino but most any 32bit Arduino compatible.</p>
			</div>
			</div>
				<textarea id = "speech-2650" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2650">
					<img id="start_img-2650" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2650">Comment</button>
			<br><div id = "ans-10735"  class = "post">
				<h2>Answer</h2>
			<div id="vote-10735" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>As a follow-up (albeit after 2.5 years) I would like to add some other things that I was able to work on and might possibly help you / anybody else foraying into this field.</p>

<p><strong>Option 1)</strong> Use an existing robot hardware and add your own sensors and actuators:</p>

<p>For e.g.: I had access to a iRobot Create (Roomba without the vaccum cleaner). So I modified that hardware-wise by adding a long "neck" made out of a plastic tube that was lying around (I had to add a tough-plastic platform on top of the Create on the screws provided so that I could fix whatever I wanted to this plastic platform (see image below to get an idea). </p>

<p><a href="https://i.stack.imgur.com/hlrkc.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/hlrkc.jpg" alt="Robot"></a></p>

<p>You can then interface with the Roomba from your laptop or other PC using several Roomba interface packages available (I used the one for Matlab since my CV code was in Matlab). I connected a Kinect v2 to my laptop and thus I had complete control over the robot as well as was able to acquire data from the Kinect. The wires and electronics that you see on the robot are from my previous attempt to supply power directly from the robot battery to the Kinect v1 that I was using on it earlier to make the robot completely mobile. For the v2 I did not bother with the power conversion as it was complicated so I just used tethered power supply for the kinect v2. Since I had a laptop (Thinkpad with usb 3.0 that the Kinect v2 needs), the interfacing with Kinect v2 was relatively easy; I used the libfreenect2 for running Kinect v2. I called it as a system call from my Matlab image processing code.</p>

<p>The advantage of this system is that it's cheap. You only have to pay for the robot base, the Kinect, and any other hardware you buy. The disadvantage is that it's very slow moving robot since it's top heavy. The Kinect v2 also had to be tethered. This setup cost me around \$ 300 since the base was pre-owned from ebay, and the Kinect costs ~$200. Not including any additional hardware costs.</p>

<p><strong>Option 2)</strong>: Build your own robot hardware. This option is more time+money consuming. The way I did this was I purchased a 6-wheel drive robot chasis (it's not cheap; around $300) from <a href="https://www.sparkfun.com/products/11056" rel="nofollow noreferrer">sparkfun</a>. To this I added a pan-tilt system from <a href="https://www.servocity.com/pt785-s" rel="nofollow noreferrer">servocity</a>. And to this PT system I added a asus xtion (since it's light). The motors of the robot and the PT system were controlled by a gorilla controller board, which received commands from a Jetson TK1 which was processing the Asus depth data, and sending commands to the motors. Unfortunately I do not have the pictures on my machine right now; but it looks a bit like a cross between Wall-E and a 6WD military vehicle ;) . Jetson TK1 is considerably powerful and I've run Kinect v1, Asus Xtion, and Kinect v2 on it (it has a usb 3.0 as well).  For Kinect v1 and Asus I used OpenNI2 and for Kinect v2 I used libfreenect2 (for both these robot options I used Ubuntu btw). But since the PT system was present I stuck with the lightweight Asus sensor.</p>

<p>The advantage of this system is that you can change it however u want with different hardware or electronics. The disadvantage is that you've to do a lot of motor controller programming on your own which means you've to understand how to control motors using PWM signals, for example. This setup aint cheap. Cost me around $800-900 without the additional hardware I had to purchase to make it work.</p>

<p>In both these options I did not use any odometry data coming from the wheels or sensors (e.g. how many rotations of the wheel, data from the IR sensors on the Create etc). I relied entirely on vision data.</p>

<p>Hopefully this helps. Let me know if you have questions.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-10735" data-toggle = "popover">
				<p>user name : Anshul</p>
				<p> user reputation : 151</p>
				<p class = "tagcontent" id = "usertaginfo-10735">{'None': 10, 'irobot-create': 2, 'microcontroller': 0, 'openni': 1, 'kinect': 2, 'ros': 1, 'arm': 1}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-10735" class = 'collapse'>
			</div>
				<textarea id = "speech-10735" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-10735">
					<img id="start_img-10735" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-10735">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>