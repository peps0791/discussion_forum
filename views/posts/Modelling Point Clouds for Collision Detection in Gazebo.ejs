<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Modelling Point Clouds for Collision Detection in Gazebo
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-8546" class = "post">
			<h2>Question</h2>
			<div id="vote-8546" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 694</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Modelling Point Clouds for Collision Detection in Gazebo</h2>
<p>I am currently applying path planning to my robotic arm (in Gazebo) and have chosen to use an RRT. In order to detect points of collision, I was thinking of getting a Point Cloud from a Kinect subscriber and feeding it to something like an Octomap to have a collision map I could import into Gazebo. However, there is no Gazebo plugin to import Octomap files and I do not have enough experience to write my own. The next idea would be to instead feed this point cloud to a mesh generator (like Meshlab) and turn that into a URDF, but before starting I'd rather get the input of somebody far more experienced. Is this the right way to go? Keep in mind the environment is static, and the only things moving are the arms. Thank you. Below is just a picture of an octomap.<a href="https://i.stack.imgur.com/B8OEZ.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/B8OEZ.png" alt="enter image description here"></a></p>

			</div>
			<div class = "userinfosection"  id = "userinfo-8546" data-toggle = "popover">
				<p>user name : Iche</p>
				<p> user reputation : 114</p>
				<p class = "tagcontent" id = "usertaginfo-8546">{'planning': 1, 'None': 6, 'computer-vision': 1, 'mobile-robot': 1, 'inverse-kinematics': 4, 'localization': 2, 'python': 0, 'forward-kinematics': 0, 'cameras': 1, 'kinect': 2, 'joint': 0, 'slam': 1, 'kinematics': 0, 'matlab': 0, 'robotic-arm': 3, 'jacobian': 0, 'dh-parameters': 0, 'motion-planning': 1, 'gazebo': 2, 'rrt': 1}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8546">Load Comments</button></br>
			<div id = "commentsection-8546" class = 'collapse'>
			<div id = "comment-13848" class = "comment">
				<p>I think converting to URDF (STL meshes from MeshLab should work) is the best option, but I have limited experience with Gazebo.</p>
			</div>
			<div id = "comment-13849" class = "comment">
				<p>Thanks, as always! Just wanted to do a check with more experienced people to see if there was an established framework for what I'm trying to do. I'll post my results within the next few days in case anybody's interested.</p>
			</div>
			<div id = "comment-13850" class = "comment">
				<p>Yes please, I don't know if there are any examples of this out there but interesting to see how well it works.</p>
			</div>
			<div id = "comment-13861" class = "comment">
				<p>Posted the generated STL.</p>
			</div>
			</div>
				<textarea id = "speech-8546" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8546">
					<img id="start_img-8546" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8546">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-8553"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8553" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>For the most part I was able to get this done. The only difference I chose was to use the Point Cloud library's triangular mesh generator instead of Meshlab's mesh generator mainly because Meshlab's generator is interactive. Below is the image of the Kinect (on top of the Baxter) taking a picture of the shelf, and a picture of the STL put together from the PointCloud the Kinect took.<a href="https://i.stack.imgur.com/2qp64.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/2qp64.png" alt="enter image description here"></a></p>

<p><a href="https://i.stack.imgur.com/CbpMx.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/CbpMx.png" alt="enter image description here"></a></p>

<p>The code I used is as below:</p>

<pre><code>#include &lt;ros/ros.h&gt;
#include &lt;sensor_msgs/PointCloud2.h&gt;
#include &lt;pcl_conversions/pcl_conversions.h&gt;
#include &lt;pcl/point_cloud.h&gt;
#include &lt;pcl/point_types.h&gt;
#include &lt;pcl/io/pcd_io.h&gt;
#include &lt;pcl/kdtree/kdtree_flann.h&gt;
#include &lt;pcl/features/normal_3d.h&gt;
#include &lt;pcl/surface/gp3.h&gt;
#include &lt;pcl/io/vtk_io.h&gt;
#include &lt;pcl/io/vtk_lib_io.h&gt;
#include &lt;pcl/io/io.h&gt;
int n = 0;
void 
cloud_cb ()
{
 // Load input file into a PointCloud&lt;T&gt; with an appropriate type
  pcl::PointCloud&lt;pcl::PointXYZ&gt;::Ptr cloud (new pcl::PointCloud&lt;pcl::PointXYZ&gt;);
  pcl::PCLPointCloud2 cloud_blob;
  pcl::io::loadPCDFile ("mesh.pcd", cloud_blob);
  pcl::fromPCLPointCloud2 (cloud_blob, *cloud);
  //* the data should be available in cloud

  // Normal estimation*
  pcl::NormalEstimation&lt;pcl::PointXYZ, pcl::Normal&gt; n;
  pcl::PointCloud&lt;pcl::Normal&gt;::Ptr normals (new pcl::PointCloud&lt;pcl::Normal&gt;);
  pcl::search::KdTree&lt;pcl::PointXYZ&gt;::Ptr tree (new pcl::search::KdTree&lt;pcl::PointXYZ&gt;);
  tree-&gt;setInputCloud (cloud);
  n.setInputCloud (cloud);
  n.setSearchMethod (tree);
  n.setKSearch (20);
  n.compute (*normals);
  //* normals should not contain the point normals + surface curvatures

  // Concatenate the XYZ and normal fields*
  pcl::PointCloud&lt;pcl::PointNormal&gt;::Ptr cloud_with_normals (new pcl::PointCloud&lt;pcl::PointNormal&gt;);
  pcl::concatenateFields (*cloud, *normals, *cloud_with_normals);
  //* cloud_with_normals = cloud + normals

  // Create search tree*
  pcl::search::KdTree&lt;pcl::PointNormal&gt;::Ptr tree2 (new pcl::search::KdTree&lt;pcl::PointNormal&gt;);
  tree2-&gt;setInputCloud (cloud_with_normals);

  // Initialize objects
  pcl::GreedyProjectionTriangulation&lt;pcl::PointNormal&gt; gp3;
  pcl::PolygonMesh triangles;

  // Set the maximum distance between connected points (maximum edge length)
  gp3.setSearchRadius (0.025);

  // Set typical values for the parameters
  gp3.setMu (2.5);
  gp3.setMaximumNearestNeighbors (100);
  gp3.setMaximumSurfaceAngle(M_PI/4); // 45 degrees
  gp3.setMinimumAngle(M_PI/18); // 10 degrees
  gp3.setMaximumAngle(2*M_PI/3); // 120 degrees
  gp3.setNormalConsistency(false);

  // Get result
  gp3.setInputCloud (cloud_with_normals);
  gp3.setSearchMethod (tree2);
  gp3.reconstruct (triangles);

  // Additional vertex information
  std::vector&lt;int&gt; parts = gp3.getPartIDs();
  std::vector&lt;int&gt; states = gp3.getPointStates();
pcl::io::savePolygonFileSTL("mesh.stl", triangles);
}

void saveFile(const sensor_msgs::PointCloud2::ConstPtr&amp; input)
{
if(n &lt;= 1)
{
 pcl::PCLPointCloud2::Ptr pcl_input_cloud(new pcl::PCLPointCloud2);
     pcl_conversions::toPCL(*input, *pcl_input_cloud);
    pcl::io::savePCDFile("mesh.pcd", *pcl_input_cloud);
n++;
    cloud_cb();
    }

    return; 
}

int
main (int argc, char** argv)
{
  // Initialize ROS
  ros::init (argc, argv, "my_pcl_tutorial");
  ros::NodeHandle nh;
    ros::Rate loop_late(1);
  // Create a ROS subscriber for the input point cloud
  ros::Subscriber sub = nh.subscribe("/cameras/kinect/depth/points", 1, saveFile);

    while(n&lt;=1)
    {
    ros::spinOnce();
    loop_late.sleep();
    }
return 0;
}
</code></pre>

<p>Most of the code is copied exactly from <a href="http://pointclouds.org/documentation/tutorials/greedy_projection.php" rel="nofollow noreferrer">http://pointclouds.org/documentation/tutorials/greedy_projection.php</a> . I'll have to find a way to get a better 3D reconstruction of the shelf considering there are gaps in the levels.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8553" data-toggle = "popover">
				<p>user name : Iche</p>
				<p> user reputation : 114</p>
				<p class = "tagcontent" id = "usertaginfo-8553">{'planning': 1, 'None': 6, 'computer-vision': 1, 'mobile-robot': 1, 'inverse-kinematics': 4, 'localization': 2, 'python': 0, 'forward-kinematics': 0, 'cameras': 1, 'kinect': 2, 'joint': 0, 'slam': 1, 'kinematics': 0, 'matlab': 0, 'robotic-arm': 3, 'jacobian': 0, 'dh-parameters': 0, 'motion-planning': 1, 'gazebo': 2, 'rrt': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8553">Load Comments</button></br>
			<div id = "commentsection-8553" class = 'collapse'>
			<div id = "comment-13862" class = "comment">
				<p>Awesome, thanks for sharing! Since the Kinect has a dense gridded point cloud, you can definitely fill in those gaps with ease. Not sure how to do it with PCL (probably a way), but it isn't hard to create ASCII STL files automatically from a pointcloud with your own code -- I have done it in MATLAB and can share that if you want.</p>
			</div>
			<div id = "comment-13863" class = "comment">
				<p>Whoops, uploaded the wrong code earlier. This one is what worked. And thank you, that would be really helpful!</p>
			</div>
			<div id = "comment-13880" class = "comment">
				<p>Will do, I do notice that you define the maximum distance between points: `gp3.setSearchRadius (0.025);` -- try making that some big number like 10.</p>
			</div>
			</div>
				<textarea id = "speech-8553" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8553">
					<img id="start_img-8553" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8553">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>