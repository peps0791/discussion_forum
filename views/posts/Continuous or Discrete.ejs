<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Continuous or Discrete
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-2148" class = "post">
			<h2>Question</h2>
			<div id="vote-2148" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 332</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Continuous or Discrete</h2>
<p>I am new to robotics and control and I have been thinking about how to deal with problems in real life. I have passed a course in control, but I do not have any idea about control for discrete/digital systems.<br>
There are a lot of robots and in general dynamic systems which are controlled by microcontrollers or computers with some software, i.e. simulink. Usually there are sensors which send feedback to the microcontroller or the computer and the controller sends a signal w.r.t the input signal from sensors. I was wondering how we decide if the system is discrete or continuous? How one can decide if he should use discrete or continuous blocks in simulink to control a dynamic system. Does it really matter which one we use?<br>
After all computers are digital and I think it is easier to work with digital signals and also  do we really have continuous signal? I have not passed any signals course, so my questions might be really easy. I did not find any other place for my question.</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-2148" data-toggle = "popover">
				<p>user name : user2388</p>
				<p> user reputation : 11</p>
				<p class = "tagcontent" id = "usertaginfo-2148">{'control': 2, 'None': 0, 'microcontroller': 2}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2148">Load Comments</button></br>
			<div id = "commentsection-2148" class = 'collapse'>
			<div id = "comment-4258" class = "comment">
				<p>At some level or the other, everything that goes through a computer/microcontroller is discrete. Even the seemingly continuous signals are sampled after a discrete, finite time interval to produce digital signals, which may be represented as continuous signals by some software (Simulink etc.).</p>
			</div>
			<div id = "comment-4259" class = "comment">
				<p>@metsburg Yes, you are right. But how should one decide   to model and control the system as a discrete system or continuous system. Because everything will be different, after making this decision.</p>
			</div>
			<div id = "comment-4830" class = "comment">
				<p>for most of the blocks in the simulink you can start with them as continuous blocks. And most of the time if you go in the properties of that block you will find 'sample time' property which is set to be continuous and you can change it to something else. So usually for modeling and analyzing or design the system we start with continuous stuff. After debugging the system, we can move to discrete systems easily. Although converting to discrete has its own difficulties.</p>
			</div>
			</div>
				<textarea id = "speech-2148" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2148">
					<img id="start_img-2148" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2148">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-4434"  class = "post">
				<h2>Answer</h2>
			<div id="vote-4434" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Complex systems of differential equations governing a physical phenomenon under study are solved by means of a computer <strong>always</strong> in a discrete way, meaning that the differential equations are integrated step-wise with the integration steps decided according to some smart set of rules. This does happen therefore also within <em>Simulink</em> and even when you select <strong>continuous</strong> mode from the Solver panel.</p>

<p>What does really matter when you switch to <strong>discrete</strong> mode is that you plug in the simulation the fact that you use a <strong>real-time</strong> device (e.g. typically a controller) to deal with your task.</p>

<p>In simulation (e.g. in Simulink) you can even disregard the fact that you have such devices and focus on how the physical phenomena take place and evolve over time. However, whenever you have to implement the simulated controller you came up with into a real embedded system working under real-time constraints (e.g. the C++ code running on the Linux aboard your quadcopter), then you have to carry out the discretization stage.</p>

<p>A discretized system is not an exact copy of its continuous ancestor of course, depending the differences on the transformation you applied (e.g. Tustin, forward Euler formulas). Roughly speaking, the continuous mode gives us a more informative perspective on a system than its discrete counterpart, since it embeds all the behaviors the system can expose in the limit of the sample time approaching zero. Nevertheless, a code written for a machine cannot handle explicitly the notion of such a limit and will certainly make some approximations which may or may not be valid for your problem. Thus, always remember: never be happy about your results! Even if you enable <em>continuous</em> mode, the outcome might turn to be a too coarse estimation of what is going on in reality.</p>

<p>Simulink and other modern environments allow users to:</p>

<ol>
<li>focus on the physics and controller design (continuous mode);</li>
<li>focus on the design of controllers to be deployed in real embedded devices (discrete mode);</li>
<li>evaluate the overall performance of the controller along with the plant (hybrid mode), where the controller is discrete and the plant is meant to run at much faster frequency (practically continuous).</li>
</ol>

<p>As result, a typical work flow could be the following:</p>

<ol>
<li>Continuous mode: simulate the plant given the set of its differential equations.</li>
<li>Continuous mode: design a controller for such a plant by optimizing some merit costs.</li>
<li>Discrete mode: discretize the controller and validate the final performance.</li>
<li>Discrete mode: deploy the controller's law in the embedded unit.</li>
</ol>

<p>If you are not interested in code deployment or in assessing the effects of discretization, but you'd like rather to simulate the physics, you could stay "continuous". Conversely, if you deal with systems that are intrinsically discrete, the suggestion is of course to start already in discrete mode.</p>

<p>Philosophically speaking, <em>continuous vs. discrete</em> can represent a sort of dualism in engineering like the much more famous <em>wave vs. particle</em> dualism in nature: a continuous signal must be sampled to be handled by a digital machine, but a discrete signal remains physically continuous because sharp transitions link the digital levels. Even a switching state can be seen as a very quick voltage transition. It depends on the level of details we are interested in.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-4434" data-toggle = "popover">
				<p>user name : Ugo</p>
				<p> user reputation : 1482</p>
				<p class = "tagcontent" id = "usertaginfo-4434">{'None': 99}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-4434" class = 'collapse'>
			</div>
				<textarea id = "speech-4434" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-4434">
					<img id="start_img-4434" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-4434">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>