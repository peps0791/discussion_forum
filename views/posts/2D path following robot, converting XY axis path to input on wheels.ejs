<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>2D path following robot, converting XY axis path to input on wheels
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-2279" class = "post">
			<h2>Question</h2>
			<div id="vote-2279" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 629</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>2D path following robot, converting XY axis path to input on wheels</h2>
<p>at the moment I am creating an android program, that will steer my simple, 3 wheel (2 motors, 1 for balance) robot to move online following the path drawn by user on his screen. The robot is operated through WiFi and has 2 motors that will react on any input signals.</p>

<p>Imagine user drawing a path for this robot on smartphone screen. It has aquired all the points on XY axis, every time beginning with (0,0). Still I have no idea, how to somehow "convert" just points, into voltage input to both motors. Signals will be sent in approx. 60Hz connection, so quite fast. Maybe not every single axis point will be taken into consideration, there will be surely some skips, but that is irrelevant, since this path does not have to be done perfectly by the robot, just in reasonable error scale.</p>

<p>Do you have any idea on how to make the robot follow defined axis points that overall create a path?</p>

<p>Edit 10.01:</p>

<p>The voltage will be computed by the robot, so input on both is between -255 and 255 and the velocity should increase or decrease lineary in those borders.
Additionaly, I would like to solve it as if there were perfect conditions, I don't need any feedback crazy models. Let's assume that all the data is true, no sensors and additional devices. Just XY axis path and required input (ommit wheel slide too).</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-2279" data-toggle = "popover">
				<p>user name : Sullson</p>
				<p> user reputation : 18</p>
				<p class = "tagcontent" id = "usertaginfo-2279">{'two-wheeled': 3, 'None': 0, 'wifi': 3, 'wheeled-robot': 3}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-2279" class = 'collapse'>
			</div>
				<textarea id = "speech-2279" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2279">
					<img id="start_img-2279" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2279">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-2280"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2280" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><h1>for the hardware</h1>

<p>You don't say what type of motor you use. If it's a DC-brushed type, putting more or less voltage will not necessary linearly alter the speed, in fact if you increase the voltage the relative amount the load on the motor increase the speed won't change. To do a good control you need a feed-back of the motor or wheel speed, or an angle sensor that you can derivate the speed.
If you use this information, and correct it according to the speed you want.</p>

<h1>for the software</h1>

<p>What you presumable want to navigation is <a href="http://en.wikipedia.org/wiki/Dead_reckoning" rel="nofollow">Dead reckoning</a>, but if one wheel slips, the position information will drift and accumulates to the point it turns unusable. So, don't expect the best results with only this.</p>

<p>One more <em>simple</em> solution is to use an <em>electronic compass</em> so you know to what direction relative to north (deviations should not be a problem), your robot is pointing. This should help at the turns and more straight path, even if some wheel slip occurs, it will close the loop by that. Wheel slip will still affect the distance traveled.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2280" data-toggle = "popover">
				<p>user name : Diego C Nascimento</p>
				<p> user reputation : 758</p>
				<p class = "tagcontent" id = "usertaginfo-2280">{'None': 39, 'mechanism': 1, 'motor': 1}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2280">Load Comments</button></br>
			<div id = "commentsection-2280" class = 'collapse'>
			<div id = "comment-4435" class = "comment">
				<p>Hey, thx for ideas. You pointed out some good issues. I made some edits in original question about that, as I mentioned, I am not seeking for perfect model with feedback and feedforward and everything, first, I want to discover a simple algorythm, assuming all the data is good and there will be no errors.</p>
			</div>
			<div id = "comment-4442" class = "comment">
				<p>Indoor robot navigation is an actively research topic, this suggestion is the basic when is far from perfect (from the point of accuracy). The suggested feedback only compensates for motor speed vs voltage, as the wheel can slip without being detected. The suggestion of using an _electronic compass_ will compensate for wheel slip but just in the turns. Anyway, you don't want any type of feedback.</p>
			</div>
			</div>
				<textarea id = "speech-2280" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2280">
					<img id="start_img-2280" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2280">Comment</button>
			<br><div id = "ans-2284"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2284" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>There are two ways you can approach this problem, open-loop and closed-loop. Open-loop approach should be easier although it will be highly inaccurate. The closed-loop is more complex but it should improve the accuracy. The decision depends on your application and how much time you can spend.</p>

<p>The robot has to follow a requested path drawn by the user. To do that, you <strong>first</strong> need to track the position and orientation (state) of the robot. In the open-loop approach this is done by blindly predicting the state of the robot based on the input. So for example if you know that the robot is positioned at (0,0) facing at 0 degrees, and the input in the wheels is the same (i.e. drives "straight") at 1 meter per second, you would expect that after a second, the state of the robot will be (1,0) and still facing at 0 degrees (in reality this wont be the case because of uncertainties but it is just a rough estimation). This is usually done based on a mathematical model of the robot.  For the close-loop approach you also use feedback from the robot. One way to do this is with odometry, i.e. measuring the distance traveled by each wheel and therefore estimating its state using a model, for example the Kinematic Model. State estimation is improved, since you have the model (as in the open-loop) to "predict" the state and then you have the feedback to correct that prediction. For later reference lets define the state estimation as $\hat{x}$.</p>

<p>The closed-loop approach is certainly more accurate but it mainly depends on what sensors you use. An odometry based estimation will be acceptable for short periods but after that it will diverge and be useless. As always, this depends on your application and tolerance for accuracy.</p>

<p><strong>The second step</strong> is to decide what input is required to send to the motor. This decision is made based on where the robot is i.e. $\hat{x}$ and where it needs to go $x_r$. For this you need a controller that constantly tries to minimize the error $e=\hat{x}-x_r$. So for your example, $x_r$ holds the coordinates of the next point that has to be visited by the robot. A simple controller would be one that:</p>

<ol>
<li>Rotates the robot until it faces the point $x_r$</li>
<li>Moves the robot in a straight line until it reaches the point</li>
<li>Load the next point in $x_r$ and go to the first step</li>
</ol>

<p>There are of course more sophisticated controllers which have certain properties but the above should work for your application.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2284" data-toggle = "popover">
				<p>user name : Demetris</p>
				<p> user reputation : 414</p>
				<p class = "tagcontent" id = "usertaginfo-2284">{'None': 24}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2284">Load Comments</button></br>
			<div id = "commentsection-2284" class = 'collapse'>
			<div id = "comment-4437" class = "comment">
				<p>Yes, yes! That is an idea I was also considering but I thought its not very good because the robot will do a lot of spinning around... but now that I think of it, the frequency of signals will be so high, that it will be barely noticable! And about first point with direction: The robot will always start in (0,0) facing 0 degrees, I will measure angle to second point, rotate, go to it, and do the same with the path from second point to third but! I will simply take into consideration previous angle and substract new one with it, so it will face mentioned third point!</p>
			</div>
			<div id = "comment-4438" class = "comment">
				<p>I am not sure what you mean by your comment "the robot will do a lot of spinning around". To minimize the uncertainties it would be good idea to take some measurements to figure out how the robot reacts to specific inputs and use those. For example, for going straight use input 100 for both wheels and try to figure out the velocity by measuring the time it takes to travel 1 meter. Do this for rotation as well. Then use those specific inputs to drive the robot around.</p>
			</div>
			<div id = "comment-4439" class = "comment">
				<p>I meant like this: the path will be very accurate, like every pixel on the screen, It all depends on how accurate will I do in on the ground for robot. If its like 1px = 1cm the movement will be like: spin in direction, move ~1cm, spin, move, spin, move. I was afraid of it for a moment, but I realised it will be executed really fast so for small degrees it will be barely noticable. And yes, practical tests will be really important, to determine like... everything.</p>
			</div>
			<div id = "comment-4444" class = "comment">
				<p>@Sullson yes I think you should go to a practical test and so you get the idea of what these errors are going to show up. If your ground has a small difference or obstacle that the robot can pass, a wheel has some difference from the other, putting 100% of voltage on but motor wouldn't result in a strain line, and this will accumulates the error. With practical test you will get that, and how much it will affect the end position of the path.</p>
			</div>
			<div id = "comment-4445" class = "comment">
				<p>Yes, input equal to 100% is just stupid, I will manipulate it, so it can meet the expectation of frequency of inputng strings from smartphone, and preferably I will make the time between inputs longer, depending on the length of the distance it hs to pass!</p>
			</div>
			<div id = "comment-4455" class = "comment">
				<p>@Sullson there's nothing stupid in putting 100% of voltage in your motor. If it's load is near it's stall torque you will get a slow rotation putting 100% of voltage, and perhaps no rotation putting less than that. Anyway, if it will just travel over a very line ground, it will be useful for fun. For serious navigation you would need feedback. Anyway I think you are getting the small step first to know how it perform and learn, there's no problem with this, tell later how it performed :)</p>
			</div>
			<div id = "comment-4456" class = "comment">
				<p>Nice, ok I will post the video of everything after all is finished, but I guess it will take like a month for everything to be done...</p>
			</div>
			</div>
				<textarea id = "speech-2284" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2284">
					<img id="start_img-2284" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2284">Comment</button>
			<br><div id = "ans-2285"  class = "post">
				<h2>Answer</h2>
			<div id="vote-2285" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>You're attempting to move a robot along a predefined path without the aid of sensors, so really we just need to convert the list of points into a list of pre-scripted actions.</p>

<ol>
<li>Convert input points to $({\Delta}x, {\Delta}y)$ pairs</li>
<li><p>Convert $({\Delta}x, {\Delta}y)$ pairs to $(\Delta\theta, d)$ pairs</p></li>
<li><p>Convert $(\Delta\theta, d)$ pairs to $(V_{left}, V_{right}, {\Delta}t)$ tuples</p></li>
</ol>

<p>The first step is easy -- simple subtraction.</p>

<p>The second step is also fairly straightforward: using the pythagorean theorem for the distance and the <code>atan2</code> function for the angle:</p>

<p><a href="https://i.stack.imgur.com/m7CLt.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/m7CLtm.jpg" alt="Angle between 2 points"></a></p>

<p>(Then just keep track of the last $\theta$ so you can calculate $\Delta\theta$).</p>

<p>The last step is a little tricky.  You want to convert that set of angles and distances to the left and right wheel voltages, and the time to run them.  This will actually give you <em>two</em> $(V_{left}, V_{right}, {\Delta}t)$ tuples for every $(\Delta\theta, d)$ pair: one to change the angle, and one to travel the distance.  </p>

<p>For a given width $w$ between the wheels, the change in the angle (radians) will be based on the movements of the right and left wheel:
$$
\Delta \theta = \frac{1}{w} \left( {\Delta}d_{left} - {\Delta}d_{right}\right)
$$
You'll have to decide what voltages and $\Delta t$ will produce that change in distance for your robot.</p>

<p>Next, you'll do the same calculation for $d$.  Both motors will use the same voltage to (hopefully) travel the same distance.</p>

<p>That should produce a list of times and voltages that approximate the line you drew.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-2285" data-toggle = "popover">
				<p>user name : Ian</p>
				<p> user reputation : 9640</p>
				<p class = "tagcontent" id = "usertaginfo-2285">{'planning': 10, 'None': 809, 'power': 1, 'algorithm': 10, 'battery': 1, 'slam': 7, 'coverage': 10, 'mobile-robot': 9, 'sensors': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-2285">Load Comments</button></br>
			<div id = "commentsection-2285" class = 'collapse'>
			<div id = "comment-4441" class = "comment">
				<p>That is exacly what I am going to do, thx for making it really clear!</p>
			</div>
			<div id = "comment-4473" class = "comment">
				<p>Hey mate, there is one problem with `atan2` function. It only makes specyfic angles. Take a look on my link[link](http://postimg.org/image/8m5o2wtiv/). Over there I have 4 possibilities in what direction will my robot go. `atan2` will always tell me different angle. Though I have previous one, I don't know how to thell the robot what is the degree it has to turn from current position...</p>
			</div>
			<div id = "comment-4474" class = "comment">
				<p>Hmmm, I am thinking about Law of cosines, I will just have to have 2 lengths - previous distance and current distance and 3rd will be length between previous point and next point!</p>
			</div>
			</div>
				<textarea id = "speech-2285" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-2285">
					<img id="start_img-2285" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-2285">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>