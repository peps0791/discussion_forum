<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Do I need to use separate function in PID algorithm to make the bot go LEFT or RIGHT?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-12853" class = "post">
			<h2>Question</h2>
			<div id="vote-12853" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 47</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Do I need to use separate function in PID algorithm to make the bot go LEFT or RIGHT?</h2>
<p>Do I need to use separate function in PID algorithm to make the bot go LEFT or RIGHT?</p>

<pre><code>/**************************
  Author-
  Project- PID Code V-2
**************************/

float Kp = 0, Ki = 0, Kd = 0;
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0, previous_I = 0;
int sensor[5] = {0, 0, 0, 0, 0};
int initial_motor_speed = 100;

void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);
void motor_left(void);
void motor_right(void);
void setup()
{
  pinMode(3, OUTPUT); //PWM Pin 1;9;EN PIN
  pinMode(5, OUTPUT); //PWM Pin 2;10;EN PIN
  pinMode(12, OUTPUT); //Left Motor Pin 1;4
  pinMode(13, OUTPUT); //Left Motor Pin 2;5
  pinMode(7, OUTPUT); //Right Motor Pin 1;6
  pinMode(8, OUTPUT); //Right Motor Pin 2;7

  Serial.begin(9600); //Enable Serial Communications
}

void loop()
{
  read_sensor_values();
  delay(15);
  calculate_pid();
  delay(15);
  motor_control();
}

void read_sensor_values()
{
  sensor[0] = digitalRead(A0);
  Serial.print("Sensor[0]:");
  Serial.println(sensor[0]);
  sensor[1] = digitalRead(A1);
  Serial.print("Sensor[1]:");
  Serial.println(sensor[1]);
  sensor[2] = digitalRead(A2);
  Serial.print("Sensor[2]:");
  Serial.println(sensor[2]);
  sensor[3] = digitalRead(A3);
  Serial.print("Sensor[3]:");
  Serial.println(sensor[3]);
  sensor[4] = digitalRead(A4);
  Serial.print("Sensor[4]:");
  Serial.println(sensor[4]);
  delay(3);

//  for(int i=0; i&lt;5; i++)
//  {
//    sensor[i] = digitalRead(i);
//    Serial.print("Sensor[i]:");
//    Serial.println(sensor[i]);
//  }

  if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 1))
    error = 4;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 1) &amp;&amp; (sensor[4] == 1))
    error = 3;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 1) &amp;&amp; (sensor[4] == 0))
    error = 2;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 1) &amp;&amp; (sensor[4] == 1) &amp;&amp; (sensor[4] == 0))
    error = 1;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 1) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    error = 0;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 1) &amp;&amp; (sensor[2] == 1) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    error = -1;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 1) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    error = -2;
  else if ((sensor[0] == 1) &amp;&amp; (sensor[1] == 1) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    error = -3;
  else if ((sensor[0] == 1) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    error = -4;
  else if ((sensor[0] == 0) &amp;&amp; (sensor[1] == 0) &amp;&amp; (sensor[2] == 0) &amp;&amp; (sensor[4] == 0) &amp;&amp; (sensor[4] == 0))
    if (error == -4) error = -5;
    else error = 5;
}

void calculate_pid()
{
  P = error;
  I = I + previous_I;
  D = error - previous_error;

  PID_value = (Kp * P) + (Ki * I) + (Kd * D);

  previous_I = I;
  previous_error = error;
}

void motor_control()
{
  // Calculating the effective motor speed:
  int left_motor_speed = initial_motor_speed - PID_value;
  int right_motor_speed = initial_motor_speed + PID_value;

  // Constraining the motor speed:
  constrain(left_motor_speed, 0, 255);
  constrain(right_motor_speed, 0, 255);

  analogWrite(3, initial_motor_speed - PID_value); //Left Motor Speed
  analogWrite(5, initial_motor_speed + PID_value); //Right Motor Speed

  //goForward:

  /*The pin numbers and high, low values are configurable depending on connections */
  digitalWrite(12, HIGH);
  digitalWrite(13, LOW);
  digitalWrite(7, HIGH);
  digitalWrite(8, LOW);
}
</code></pre>

			</div>
			<div class = "userinfosection"  id = "userinfo-12853" data-toggle = "popover">
				<p>user name : Momshad Dinury</p>
				<p> user reputation : 6</p>
				<p class = "tagcontent" id = "usertaginfo-12853">{'wheeled-robot': 1, 'None': 0, 'pid': 1, 'line-following': 1}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-12853" class = 'collapse'>
			</div>
				<textarea id = "speech-12853" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-12853">
					<img id="start_img-12853" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-12853">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-12854"  class = "post">
				<h2>Answer</h2>
			<div id="vote-12854" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">6</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>No, but you <em>do</em> need to calculate the P/I/D terms correctly. You have:</p>

<pre><code>I = I + previous_I;
</code></pre>

<p>followed by:</p>

<pre><code>previous_I = I;
</code></pre>

<p>With</p>

<pre><code>I = 0;
previous_I = 0;
</code></pre>

<p>declared at the start. So your <code>I</code> term will always be zero here. What it <em>should</em> be is:</p>

<pre><code>error = reference - feedback;
P_error = error;
I_error = I + (error*timeStep);
D_error = (error - previous_error)/timeStep;
prevous_error = error;
</code></pre>

<p>That is the most bullet-proof way to implement the PID loop. If your loop time is relatively stable, then you can absorb the time steps (the elapsed time between function calls) into the control gains:</p>

<pre><code>P_term = P_gain * P_error;
I_term = I_gain * I_error;
D_term = D_gain * D_error;
</code></pre>

<p>Expanding this:</p>

<pre><code>P_term = P_gain * (error);
I_term = I_gain * (&lt;sum_0^k&gt;(error*timeStep));
D_term = D_gain * ((error - previous_error)/timeStep);
</code></pre>

<p>I used a <code>&lt;sum_0^k&gt;</code> term (the "sum from zero to k") there to highlight the fact the integral term is a numeric integral composed of:</p>

<pre><code>I_error = (error_0 * timeStep_0) + (error_1 * timeStep_1) + ... + (error_k * timeStep_k);
</code></pre>

<p>And if your <code>timeStep</code> is constant at every point, then you can factor it out and say:</p>

<pre><code>I_error = timeStep*(error_0 + error_1 + ... + error_k);
</code></pre>

<p>So, regrouping the PID terms:</p>

<pre><code>P_term = (P_gain) * error;
I_term = (I_gain*timeStep) * (&lt;sum_0^k&gt;error);
D_term = (D_gain/timeStep) * (error - previous_error);
</code></pre>

<p>At last, you can see that, <em>if your time steps are relatively constant</em>, you can say:</p>

<pre><code>Effective_P_gain = P_gain;
Effective_I_gain = I_gain*timeStep;
Effective_D_gain = D_gain/timeStep;

P_error = error;
I_error = I_error + error;
D_error = error - previous_error;
previous_error = error;
</code></pre>

<p>Here you can see that <code>I_error</code> accumulates the error terms. I frequently see the <code>timeStep</code> being left off of the PID error terms, which I grudgingly accept because, as shown above, it's mathematically possible to do, but the problem is that:</p>

<ol>
<li>If you build modular code (which you should), then gain values you test when you're just doing motor tuning may fail when you add more detailed logic (or remove faulty logic) later in the development cycle. This is because addition or removal of program logic will alter the total time between function calls. The PID loop becomes highly sensitive to logic changes and thus also becomes very difficult to tune. </li>
<li>You can't use empirical tuning methods like <a href="https://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method" rel="nofollow noreferrer">Ziegler-Nichols</a> because those tuning methods require you to be using the <em>true</em> PID gains, not the modified gains. The <code>timeStep</code> term scales the integral and derivative gains, and the values diverge pretty quickly. </li>
</ol>

<p>If your sample time is 10Hz, then your time step is (1/10) seconds, so integral gain is reduced by a factor of ten and your derivative gain is increased by a factor of ten, meaning they're a factor of ONE HUNDRED apart from one another. Ziegler-Nichols and others requires you to tune one gain until you see a particular system response, then set the remaining gains based on a formula that uses the first gain as an input. </p>

<p>If your gains aren't scaled correctly, those tuning methods will all fail. Now you're having twice the difficulty in tuning your PID controller:</p>

<ol>
<li>You can't use established tuning guidelines to tune the system, so you're guessing at the gains, then</li>
<li>Once you do finally find good gains, your system becomes highly sensitive to changes in logic, which means you'll have to re-tune (entirely by guessing) again. </li>
</ol>

<p>It's a huge time suck and a big distraction from the project.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-12854" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-12854">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-12854">Load Comments</button></br>
			<div id = "commentsection-12854" class = 'collapse'>
			<div id = "comment-22560" class = "comment">
				<p>PS - Also, I just re-checked your code as I submitted the answer and noticed that your gains (`Kp`, `Kd`, and `Ki`) are all set to zero. So you're not actually developing any PID output because, even if you calculated the error terms correctly, you're ignoring them. Set the gains to non-zero values and see what happens.</p>
			</div>
			<div id = "comment-22567" class = "comment">
				<p>Yes i set everything to zero. What happens if I set them inside the loop?Will they work? I mean their value will be zero at first.But as the loop starts their values should be replaced by the new ones right?</p>
			</div>
			<div id = "comment-22568" class = "comment">
				<p>@MomshadDinury - The control **error** terms will update automatically. The control **gain** terms are fixed and do not change once you set them. This is what I am referring to when I talk about the hassle of manual tuning; you have to pick a set of control gains, then test the system behavior. If you're not getting the response you're looking for, then you have to change the control gains and try again. You keep doing this until you get a set of control gains that yields the response you want.</p>
			</div>
			<div id = "comment-22582" class = "comment">
				<p>Can you correct my code and comment it here. I am kinda confused. I am really new to this PID algorithm.So if you correct my code with comments it will help me to understand by messing with it. Will you do that?</p>
			</div>
			</div>
				<textarea id = "speech-12854" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-12854">
					<img id="start_img-12854" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-12854">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>