<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Computing the Jacobian Matrix -- chain rule?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-9893" class = "post">
			<h2>Question</h2>
			<div id="vote-9893" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 291</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Computing the Jacobian Matrix -- chain rule?</h2>
<p>I am learning about robot kinematics and the Jacobian matrix, and I'm trying to understand how to compute the Jacobian matrix given a kinematic chain, such as a robot arm. I understand the theory behind the Jacobian matrix, but I'm not sure actually how it would be calculated in practice.</p>

<p>So, let's say that I have a 7 DoF robot arm, with 7 joints and 6 links between the joints. I know how to compute the transformation matrix between each joint, and by applying forward kinematics, I know the pose of the end effector for any configuration of joint angles. To calculate this, I have written some code which stores each transformation matrix, and then multiplies them in series to create the transformation matrix between the first joint and the end effector.</p>

<p>However, how do I now go about computing the Jacobian matrix? My solution so far, is to write down each transformation matrix by hand, then multiply them all by hand, to yield the overall transformation matrix, with respect to the joint angles. I could then differentiate this to create the Jacobian matrix. The problem with this though, is that the maths becomes very, very complicated as I move along the kinematic chain. By the end, there are so many terms as a result of the multiple matrix multiplications, that it just becomes so tedious doing this by hand.</p>

<p>Is there a better way to do this? In the case of calculating the forward kinematics, I didn't have to do it by hand, I just wrote some code to multiply the individual matrices. But when I want the Jacobian matrix, it seems like I need to compute the derivative of the overall transformation matrix after it has been computed, and so I need to do this by hand. What's the standard solution to this? Is it something to do with the chain rule for differentiation...? I'm not sure exactly how this applies here though...</p>

<p>Thank you!</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-9893" data-toggle = "popover">
				<p>user name : Karnivaurus</p>
				<p> user reputation : 328</p>
				<p class = "tagcontent" id = "usertaginfo-9893">{'control': 10, 'walking-robot': 4, 'simulator': 0, 'torque': 4, 'slam': 0, 'robotic-arm': 20, 'mobile-robot': 0, 'dynamics': 17, 'forward-kinematics': 7, 'manipulator': 10, 'accelerometer': 4, 'kinematics': 29, 'jacobian': 16, 'policy': 1, 'actuator': 4, 'None': 0, 'inverse-kinematics': 18, 'localization': 0, 'mapping': 0, 'sensors': 4, 'simulation': 0, 'navigation': 0}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9893">Load Comments</button></br>
			<div id = "commentsection-9893" class = 'collapse'>
			<div id = "comment-17607" class = "comment">
				<p>see `jacobian()` in Matlab. It can determine the jacobian matrix with ease and comfort.</p>
			</div>
			</div>
				<textarea id = "speech-9893" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9893">
					<img id="start_img-9893" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9893">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-9896"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9896" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>You are right about the tedious nature of multiplying all those individual matrices by hand!  You could search online for robot kinematics software and find some nice tools to help with this, but you learn it so much better when you actually work out the equations.  Since you've already written the forward kinematics code, it's clear you understand that process.  I recommend you use a symbolic algebra package (I used to use Maple IV, and that functionality is now within MatLab).  Re-write the forward kinematics program, but do not plug in values for each joint angle.  You'll end up with very long expressions for each term of $\vec x$, which can be reduced significantly by applying trigonometric identities.  The identities for $\sin (\theta_2 + \theta_3)$ and $\cos (\theta_2 + \theta_3)$ are particularly helpful for articulated arm geometries.</p>

<p>Regarding the Jacobian, I have always found differentiating the forward kinematics to be rather straightforward.  The chain rule isn't a major complicating factor, since each term is based on <em>partial</em>, not full, derivatives.  A symbolic algebraic tool can be helpful here, too.</p>

<p>I think the key for your situation is to first determine the kinematics in closed-form (keeping the $\theta_i$ terms in the equations).  Also compute the Jacobian in closed-form.  Then you have the equations ready for plugging in joint values regardless of the robot's pose.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9896" data-toggle = "popover">
				<p>user name : SteveO</p>
				<p> user reputation : 2960</p>
				<p class = "tagcontent" id = "usertaginfo-9896">{'None': 222}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-9896" class = 'collapse'>
			</div>
				<textarea id = "speech-9896" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9896">
					<img id="start_img-9896" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9896">Comment</button>
			<br><div id = "ans-9897"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9897" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Writing the equations by hand and deriving them is certainly the best way to understand what is happening "in the background". Generating the equations and deriving them using a syombolics engine, like @SteveO suggested is essentially the same process but someone else, in this case a symbolic engine, is doing the work for you. </p>

<p>There are however different approaches to obtain the jacobi matrix, geometrically. </p>

<p>You can consider that the Jacobi matrix is built up from submatrices. </p>

<p>$$ J = \left[
     \begin{matrix}
       J_T \\ \hdashline
       J_\omega        
       \end{matrix} \right] = 
       \left[
      \begin{matrix}
       J_{T_{1}}\quad J_{T_{2}}  \quad \dots \quad J_{T_{n}}\\ \hdashline\hdashline
       J_{\omega_{1}}  \quad J_{\omega_{2}} \quad \dots \quad J_{\omega_{n}}\\        
       \end{matrix} \right] = 
\left[
   \begin{matrix}
    \frac{\delta x}{\delta q_1} \;     \frac{\delta x}{\delta q_2} \; \dots \;     \frac{\delta x}{\delta q_n} \\
   \frac{\delta y}{\delta q_1} \;     \frac{\delta y}{\delta q_2} \; \dots \;     \frac{\delta y}{\delta q_n} \\ 
\frac{\delta z}{\delta q_1} \;     \frac{\delta z}{\delta q_2} \; \dots \;     \frac{\delta z}{\delta q_n} \\ 
\hdashline
\frac{\delta \alpha}{\delta q_1} \;     \frac{\delta \alpha}{\delta q_2} \; \dots \;     \frac{\delta \alpha}{\delta q_n} \\  
\frac{\delta \beta}{\delta q_1} \;     \frac{\delta \beta}{\delta q_2} \; \dots \;     \frac{\delta \beta}{\delta q_n} \\      
\frac{\delta \gamma}{\delta q_1} \;     \frac{\delta \gamma}{\delta q_2} \; \dots \;     \frac{\delta \gamma}{\delta q_n} \\  
    \end{matrix} \right]
$$</p>

<p>If your joint is a rotational joint than the its corresponding part in the Jacobi matrix is </p>

<p>$$ \left[
   \begin{matrix}
    J_{T_{i}} \\ \hdashline
    J_{\omega_{i}}        
    \end{matrix} \right] = 
    \left[
   \begin{matrix}
    \overrightarrow b_{i-1} \times \overrightarrow r_{i-1,ee}   \\ \hdashline
    \overrightarrow b_{i-1}       
    \end{matrix} \right]
$$</p>

<p>If your joint is a translational joint than the its corresponding part in the Jacobi matrix is 
$$ \left[
   \begin{matrix}
    J_{T_{i}} \\ \hdashline
    J_{\omega_{i}}        
    \end{matrix} \right] = 
    \left[
   \begin{matrix}
    \overrightarrow b_{i-1}  \\ \hdashline
    0_{_{1 \times 3}}      
    \end{matrix} \right]
$$</p>

<p><strong>where</strong></p>

<ul>
<li>$\overrightarrow b_{i-1}$  is the vector of the joint axis  </li>
<li>$\overrightarrow r_{i-1,ee}$ is the vector pointing from the origin of the joint coordinate system to origin of the end-effector coordinate system</li>
<li>$i$ refers to the Denavti Hartenber coordinate system numerotiation</li>
</ul>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9897" data-toggle = "popover">
				<p>user name : 50k4</p>
				<p> user reputation : 2800</p>
				<p class = "tagcontent" id = "usertaginfo-9897">{'geometry': 0, 'None': 193, 'kinematics': 0, 'robotic-arm': 0}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-9897" class = 'collapse'>
			</div>
				<textarea id = "speech-9897" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9897">
					<img id="start_img-9897" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9897">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>