<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Quadcopter PID Controller: Derivative on Measurement ~ Removing the Derivative Kick
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-8998" class = "post">
			<h2>Question</h2>
			<div id="vote-8998" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 281</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Quadcopter PID Controller: Derivative on Measurement ~ Removing the Derivative Kick</h2>
<p>Good day,</p>

<p>I am currently implementing a single loop PID controller using angle setpoints as inputs. I was trying out a different approach for the D part of the PID controller. </p>

<p>What bought this about is that when I was able to reach a 200Hz (0.00419ms) loop rate, when adding a D gain, the quadcopter seems to dampen the movements in a non continous manner. This was not the case when my algorithm was running at around 10Hz. At an angle set point of 0 degrees, I would try to push it to one side by 5 degrees then the quad would try to stay rock solid by resisting the movements but lets go after while enabling me to get it of by 2 degrees (the dampening effect weakens over time) then tries to dampen the motion again.</p>

<p>This is my implementation of the traditional PID:</p>

<blockquote>
  <p>Derivative on Error:</p>
</blockquote>

<pre><code>//Calculate Orientation Error (current - target)
float pitchError = pitchAngleCF - pitchTarget;
pitchErrorSum += (pitchError*deltaTime2);
float pitchErrorDiff = pitchError - pitchPrevError;
pitchPrevError = pitchError;

float rollError = rollAngleCF - rollTarget;
rollErrorSum += (rollError*deltaTime2);
float rollErrorDiff = rollError - rollPrevError;
rollPrevError = rollError;

float yawError = yawAngleCF - yawTarget;
yawErrorSum += (yawError*deltaTime2);
float yawErrorDiff = yawError - yawPrevError;
yawPrevError = yawError;


//PID controller list
float pitchPID = pitchKp*pitchError + pitchKi*pitchErrorSum + pitchKd*pitchErrorDiff/deltaTime2;
float rollPID = rollKp*rollError + rollKi*rollErrorSum + rollKd*rollErrorDiff/deltaTime2;
float yawPID = yawKp*yawError + yawKi*yawErrorSum + yawKd*yawErrorDiff/deltaTime2;

//Motor Control - Mixing    
//Motor Front Left (1)
float motorPwm1 =  -pitchPID + rollPID - yawPID + baseThrottle + baseCompensation;
</code></pre>

<p>What I tried to do now is to implement a derivative on measurement method from this article to remove derivative output spikes. However the Derivative part seems to increase the corrective force than dampen it.</p>

<blockquote>
  <p>Derivative on Measurement:</p>
</blockquote>

<pre><code>//Calculate Orientation Error (current - target)
float pitchError = pitchAngleCF - pitchTarget;
pitchErrorSum += (pitchError*deltaTime2);
float pitchErrorDiff = pitchAngleCF - pitchPrevAngleCF; // &lt;----
pitchPrevAngleCF = pitchAngleCF;

float rollError = rollAngleCF - rollTarget;
rollErrorSum += (rollError*deltaTime2);
float rollErrorDiff = rollAngleCF - rollPrevAngleCF; // &lt;----
rollPrevAngleCF = rollAngleCF;

float yawError = yawAngleCF - yawTarget;
yawErrorSum += (yawError*deltaTime2);
float yawErrorDiff = yawAngleCF - yawPrevAngleCF; // &lt;----
yawPrevAngleCF = yawAngleCF;


//PID controller list // &lt;---- The D terms are now negative
float pitchPID = pitchKp*pitchError + pitchKi*pitchErrorSum - pitchKd*pitchErrorDiff/deltaTime2;
float rollPID = rollKp*rollError + rollKi*rollErrorSum - rollKd*rollErrorDiff/deltaTime2;
float yawPID = yawKp*yawError + yawKi*yawErrorSum - yawKd*yawErrorDiff/deltaTime2;


//Motor Control - Mixing    
//Motor Front Left (1)
float motorPwm1 =  -pitchPID + rollPID - yawPID + baseThrottle + baseCompensation;
</code></pre>

<p>My question now is:</p>

<blockquote>
  <p>Is there something wrong with my implementation of the second method? </p>
</blockquote>

<p>Source: <a href="http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-derivative-kick/" rel="nofollow noreferrer">http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-derivative-kick/</a></p>

<p>The way I've obtained the change in time or DT is by taking the timestamp from the start of the loop then taking the next time stamp at the end of the loop. Their difference is obtained to obtain the DT. getTickCount() is an OpenCV function.</p>

<pre><code>/* Initialize I2c */  
/* Open Files for data logging */ 
while(1){
    deltaTimeInit=(float)getTickCount();

    /* Get IMU data */
    /* Filter using Complementary Filter */
    /* Compute Errors for PID */
    /* Update PWM's */

    //Terminate Program after 40 seconds
    if((((float)getTickCount()-startTime)/(((float)getTickFrequency())))&gt;20){
            float stopTime=((float)getTickCount()-startTime)/((float)getTickFrequency());
    gpioPWM(24,0);  //1
    gpioPWM(17,0);  //2
    gpioPWM(22,0);  //3
    gpioPWM(18,0);  //4
    gpioTerminate(); 
        int i=0;
    for (i=0 ; i &lt; arrPitchCF.size(); i++){
        file8 &lt;&lt; arrPitchCF.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrYawCF.size(); i++){
        file9 &lt;&lt; arrYawCF.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrRollCF.size(); i++){
        file10 &lt;&lt; arrRollCF.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPitchAccel.size(); i++){
        file2 &lt;&lt; arrPitchAccel.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrYawAccel.size(); i++){
        file3 &lt;&lt; arrYawAccel.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrRollAccel.size(); i++){
        file4 &lt;&lt; arrRollAccel.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPitchGyro.size(); i++){
        file5 &lt;&lt; arrPitchGyro.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrYawGyro.size(); i++){
        file6 &lt;&lt; arrYawGyro.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrRollGyro.size(); i++){
        file7 &lt;&lt; arrRollGyro.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPWM1.size(); i++){
        file11 &lt;&lt; arrPWM1.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPWM2.size(); i++){
        file12 &lt;&lt; arrPWM2.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPWM3.size(); i++){
        file13 &lt;&lt; arrPWM3.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPWM4.size(); i++){
        file14 &lt;&lt; arrPWM4.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrPerr.size(); i++){
        file15 &lt;&lt; arrPerr.at(i) &lt;&lt; endl;
    }

    for (i=0 ; i &lt; arrDerr.size(); i++){
        file16 &lt;&lt; arrDerr.at(i) &lt;&lt; endl;
    }


        file2.close();
        file3.close();
        file4.close();
        file5.close();
        file6.close();
        file7.close();
        file8.close();
        file9.close();
        file10.close();
        file11.close();
        file12.close();
        file13.close();
        file14.close();
        file15.close();
        file16.close();
        cout &lt;&lt; " Time Elapsed = " &lt;&lt; stopTime &lt;&lt; endl;
        break;
    }

    while((((float)getTickCount()-deltaTimeInit)/(((float)getTickFrequency())))&lt;=0.00419){ //0.00209715|0.00419
       cout &lt;&lt; " DT end = " &lt;&lt; deltaTime2 &lt;&lt; endl;
       deltaTime2=((float)getTickCount()-deltaTimeInit)/(((float)getTickFrequency()));
    }

    cout &lt;&lt; " DT end = " &lt;&lt; deltaTime2 &lt;&lt; endl;
}
</code></pre>

<p>Here's my data:</p>

<p><a href="https://i.stack.imgur.com/H9O7s.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/H9O7s.jpg" alt="Derivative on Error without D gain"></a></p>

<p><a href="https://i.stack.imgur.com/flipn.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/flipn.jpg" alt="Derivative on Error with D gain"></a></p>

<p><a href="https://i.stack.imgur.com/B8x2r.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/B8x2r.jpg" alt="Derivative on Measurement with D gain"></a></p>

			</div>
			<div class = "userinfosection"  id = "userinfo-8998" data-toggle = "popover">
				<p>user name : user123456098</p>
				<p> user reputation : 415</p>
				<p class = "tagcontent" id = "usertaginfo-8998">{'control': 16, 'stereo-vision': 2, 'communication': 0, 'pid': 19, 'uav': 0, 'stability': 13, 'mobile-robot': 2, 'sensor-error': 0, 'tuning': 2, 'cameras': 0, 'integration': 0, 'opencv': 2, 'differential-drive': 0, 'motion-planning': 0, 'None': 13, 'raspberry-pi': 14, 'localization': 0, 'microcontroller': 0, 'mapping': 0, 'path-planning': 0, 'real-time': 1, 'sensors': 0, 'quadcopter': 19, 'computer-vision': 2, 'vfh': 0, 'c++': 2, 'filter': 0, 'dead-reckoning': 0, 'sensor-fusion': 5, 'sonar': 1}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-8998" class = 'collapse'>
			</div>
				<textarea id = "speech-8998" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8998">
					<img id="start_img-8998" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8998">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-8999"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8999" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>All PID controllers act on an <em>error</em> signal, so you definitely should stick with your first implementation. The derivative term in the PID controller wants to "see" how the error is changing - if the error is getting bigger, then the derivative term gets larger and "kicks in" a higher contribution. If the error is getting smaller, then the derivative term backs off. </p>

<p>Your problem description is vague; something about "pushing" the quadcopter and damping and feeling something. </p>

<p>Engineers don't have feelings, they have data. </p>

<p>For the moment, with no data, all I can tell you is to reuse your first implementation and double check how you are acquiring your <code>deltaTime2</code> information. Typically, in industrial controls, the derivative term is left off of the controller and only a PI controller is implemented. This is because any bit of temporal sampling problems (not taking the sample on time or mis-judging the sampling rate) can cause <em>huge</em> problems with the derivative term.</p>

<p>Imagine your sampling rate is supposed to be 0.005 seconds (200Hz). If instead of that sampling rate, you mis-judged the sample rate to be 0.006 seconds for <em>one sample</em>, then the following happens:</p>

<ol>
<li>No change to proportional error because it doesn't interact with the sampling rate. </li>
<li>Integral error multiplies proportional error by this sampling rate <em>and then adds it to all of the previous integral error samples</em>, so overall it's a pretty small impact. </li>
<li>Derivative error <em>divides</em> proportional error by this sampling rate <em>with no other means of context</em>. </li>
</ol>

<p>So, conceivably, you could have something like:</p>

<pre><code>prevIntError = 1.8;
prevDerError = 1.1
PropError = 1;
IntError = prevIntError + 1*0.006;
derError = (1 - 1.1)/0.006;
</code></pre>

<p>So where the integral error is now 1.806 instead of 1.805 (an error of 0.05%), your derivative error is -16.6 instead of what it should be, (1 - 1.1)/0.005, which is -20. That means that error in the proportional error signal is 0, the error in the integral error signal is 0.05%, and the error in the derivative error signal is 17%! </p>

<p>As your sampling rate increases, your sampling period goes down. Errors in timing can begin to become significant after a point. For example, at 10Hz, you are sampling every 0.1s. If your timing accuracy is +/- 0.001s, then this means that your time sampling error is +/- 1%. If you push to 200Hz (0.005s), and your timing accuracy is still +/- 0.001s, then suddenly your time sampling error is +/- 20%! </p>

<p>So, in summary:</p>

<ol>
<li>Post data, not feelings. </li>
<li>Revert to your first implementation.</li>
<li>Check how you acquire <code>deltaTime2</code> and report back. </li>
</ol>

<p>Please update your question to include the answers to 1 and 3 (don't post it as a comment to this answer please). </p>

<p>:EDIT:</p>

<p>I would move your timestamp evaluation to one location in your code, and I would put that location immediately before you use it. At the moment, you don't update the sampling time until <em>after</em> you've done your derivative/integral calculations. This is even more problematic given the fact that you are performing communications in the same sampling window. </p>

<p>Say your first sweep, you read some data, do your calculations, and that sample time is 5ms. Then, on the second sweep, something happens to the communications (no data, data error, IMU reset, etc.). The time it takes to get back to the derivative/integral calculations <em>won't</em> be 5ms, it'll be 1ms or 10ms or something similar. So you use the wrong sample time for that sample, but then your sample time gets updated <em>after the fact</em> to reflect that sweep took the 10ms or whatever, then that gets used on the following sample, which again may not be correct. </p>

<p>I would revise your code to the following:</p>

<pre><code>/* Initialize I2c */  
/* Open Files for data logging */ 
deltaTimeInit=(float)getTickCount(); //&lt;--- Placeholder value for first pass
while(1){
    /* Get IMU data */
    deltaTime2=((float)getTickCount()-deltaTimeInit)/(((float)getTickFrequency())); //&lt;--- Get the time that elapsed to NOW
    deltaTimeInit=(float)getTickCount(); //&lt;--- Start the timer for the next loop
    /* Filter using Complementary Filter */
    /* Compute Errors for PID */ //&lt;--- Use the actual time elapsed for the calculations
    /* Update PWM's */

  /* (more stuff) */
}
</code></pre>

<p>Basically, you care about the time that has elapsed from when you get data to the next time that you get data, and you want to act on current information. Your sample time should be calculated before you use it, on the current sweep. </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8999" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-8999">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8999">Load Comments</button></br>
			<div id = "commentsection-8999" class = 'collapse'>
			<div id = "comment-14821" class = "comment">
				<p>I've added the data outputs</p>
			</div>
			</div>
				<textarea id = "speech-8999" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8999">
					<img id="start_img-8999" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8999">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>