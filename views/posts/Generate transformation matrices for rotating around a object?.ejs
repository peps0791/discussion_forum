<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Generate transformation matrices for rotating around a object?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "reward_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-9691" class = "post">
			<h2>Question</h2>
			<div id="vote-9691" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 385</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Generate transformation matrices for rotating around a object?</h2>
<p>How do i compute all transformation matrices which places a robot endeffector at the shell of this sphere, with the end effector pointing toward the object in the center. </p>

<p><a href="https://i.stack.imgur.com/fSeyk.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/fSeyk.png" alt="enter image description here"></a></p>

<p>I know at all time how far the object is relative to the endeffector, and radius of the sphere is the desired distance i want between the object and endeffector.  </p>

<p>I want by using inverse kinematics pan around this object in a sphere shaped trajectory. </p>

<p>Each transformation matrix should contain different positions on the sphere and the rotation should be oriented such that the arm looks at the object. </p>

<p>The position should be relative easy to compute, as i already know the distance to to object, and radius of the sphere. </p>

<p>But the rotation matrix for each position is still a mystery for me.  </p>

			</div>
			<div class = "userinfosection"  id = "userinfo-9691" data-toggle = "popover">
				<p>user name : test</p>
				<p> user reputation : 36</p>
				<p class = "tagcontent" id = "usertaginfo-9691">{'None': 0, 'inverse-kinematics': 2, 'c++': 2, 'industrial-robot': 1, 'robotic-arm': 6, 'rotation': 4}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9691">Load Comments</button></br>
			<div id = "commentsection-9691" class = 'collapse'>
			<div id = "comment-17205" class = "comment">
				<p>Maybe it's easier in spherical coordinates.</p>
			</div>
			<div id = "comment-17208" class = "comment">
				<p>Would You elaborate?</p>
			</div>
			<div id = "comment-17210" class = "comment">
				<p>@BendingUnit22 Would you care to elaborate a bit more on your idea,  how would you use spherical coordinates to form the rotational matrix?</p>
			</div>
			<div id = "comment-17221" class = "comment">
				<p>Which end-effector axis do you want pointed at the center?</p>
			</div>
			<div id = "comment-17222" class = "comment">
				<p>The endeffector has  a camera on it, so i want to camera facing the object..</p>
			</div>
			<div id = "comment-17229" class = "comment">
				<p>@Ben the Z-axis of the camera should be facing the object</p>
			</div>
			</div>
				<textarea id = "speech-9691" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9691">
					<img id="start_img-9691" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9691">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-9695"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9695" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><ol>
<li><p>make sure tha your axes are parallel with the coordinate system in which your robots orientations are expressed.</p></li>
<li><p>Caclulate the orientation angles geometrically by taking projections of the vector marked with red.</p></li>
</ol>

<p>I do not see the need for any rotation matrices.</p>

<p>EDIT:</p>

<p>Here is a 2D example. The camera moves on the circle and the Z orinetation has to be adjusted. The dx and dy can be calculated form the circle equations and the Z rotation is </p>

<p>$Z_{rot}= atan2(dy,dx)$</p>

<p><a href="https://i.stack.imgur.com/4QfTK.jpg" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/4QfTK.jpg" alt="2D example"></a></p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9695" data-toggle = "popover">
				<p>user name : 50k4</p>
				<p> user reputation : 2800</p>
				<p class = "tagcontent" id = "usertaginfo-9695">{'geometry': 0, 'None': 193, 'kinematics': 0, 'robotic-arm': 0}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9695">Load Comments</button></br>
			<div id = "commentsection-9695" class = 'collapse'>
			<div id = "comment-17214" class = "comment">
				<p>Could give an example?</p>
			</div>
			<div id = "comment-17215" class = "comment">
				<p>I need the rotation matrix to perform inverse kinematics, so i have an idea of what the desired transformation is..</p>
			</div>
			<div id = "comment-17216" class = "comment">
				<p>your inverse kinematics should have angles as input not a rotation matrix. If for some reason it does have a roation matrix as input, you can obtain it by calculating the 3 angels and then multiplying the 3 pure rotation matrces (x, y, z rotations) and obtain yout orientation matrix so</p>
			</div>
			<div id = "comment-17217" class = "comment">
				<p>but could you give an example... i am having a hard time getting my head around it...</p>
			</div>
			<div id = "comment-17218" class = "comment">
				<p>Thanks for the example.. so given dy,dx you form the rotation along the z-axis. does that mean that given dy,dz will give rotation along x axis, and dz, dx give rotation along the y axis. thus given all angles for making a rotation matrix?</p>
			</div>
			<div id = "comment-17219" class = "comment">
				<p>an x axis rotation will affect the aother two coordinates but not the x cordinate. a y axis rotation will only affect the z and x cooridnates but not the y coordiante and a z axis rotation will an z axis rotation will only affect x and y coordinats, but not z. you will have to find the correct triangles to see of in 3D everything es perfectly analogous or only similar. I recommend finding triangles from the projections and writing atan2 function (since it will take care of all your quadrant finding issues)</p>
			</div>
			<div id = "comment-17225" class = "comment">
				<p>So... How you are extracting x,y,z angles makes sense.. But what i am not sure of, is how would make form a full rotation matrix using this?</p>
			</div>
			<div id = "comment-17227" class = "comment">
				<p>Well..if you have the angles, you know the order of rotations...all of them ar pure rotations...so...you multiply three baisc rotation matrices Rotx, Roty and Rotz and you have your rotation matrix. Again, I do not think you need it in matrix form.</p>
			</div>
			</div>
				<textarea id = "speech-9695" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9695">
					<img id="start_img-9695" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9695">Comment</button>
			<br><div id = "ans-9698"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9698" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Remember that the columns of a rotation matrix are simply unit vectors indicating where each axis points.  Lets say your end-effector is at $p_e = (x_e, y_e, z_e)$, and the center of the circle is at $p_o = (x_o, y_o, z_o)$.  You didn't fully answer my comment about your end-effector axes, so I will assume you want $z_e$ pointed at the object. Here are the steps you should take.</p>

<p>First, some notation.  The transform from the world frame to your desired end-effector is:
$$
T^{world}_{ee} = \begin{bmatrix} R_e &amp; p_e \\ 0 &amp; 1 \end{bmatrix}
$$</p>

<p>Where $R_e$ is the rotation matrix in question.  It is composed of 3 column vectors:</p>

<p>$$
R_e = \begin{bmatrix} R_{x_e} &amp; R_{y_e} &amp; R_{z_e} \end{bmatrix}
$$</p>

<ol>
<li>The third (Z) column of the rotation matrix is simply $R_{z_e} = \widehat{p_o - p_e}$.</li>
<li>Pick a natural orientation for your camera.  Perhaps $y_e$ down.  So think about a plane created by the world down axis and $R_{z_e}$.  Now $x_e$ must be normal to that plane.  Assuming the world down axis is $down = (0,0,-1)$.  Now $R_{x_e} = \widehat{down \times R_{z_e}}$.  This is the first (X) column of your rotation matrix.  (Note: be careful to avoid degenerate cases, like when the camera is directly above the object ($z_e = z_o$).  You need to test for this case and handle this differently.)</li>
<li>Lastly, the Y axis of your new frame must be the cross product of the other two, so: $R_{y_e} = R_{z_e} \times R_{x_e}$.  This is the second (Y) column of your new rotation matrix.  </li>
</ol>

<p>This gives you a single orientation for each position on your sphere in which the object will be upright in the camera image.  </p>

<p>Your question was a little vague on whether this is sufficient, or if you want many orientations for each point on the sphere.  Since the camera can rotate about its focal axis, the arm and camera will still be pointing at the object.  However, the object will be rotated in the image.  </p>

<p>There are an infinite number of orientations that satisfy the constrains for each point, but you can get a discrete set by picking some angles from 0 to 360 degrees then simply rotating your end-effector frame about its Z axis by this amount.  </p>

<p>$$
T^{world}_{newee} =  T^{world}_{ee} * \begin{bmatrix}
\cos \theta &amp;  -\sin \theta &amp; 0 &amp; 0\\
\sin \theta &amp; \cos \theta &amp; 0 &amp; 0\\
0 &amp; 0 &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 0 &amp; 1\\
\end{bmatrix}
$$</p>

<p>So now $T^{world}_{newee}$ will have the object upside down if you chose $\theta = 180^{\circ}$ for example.</p>

<p>Here is some simple Python code which implements this solution (without the arbitrary rotation), and displays the frames with OpenRave.</p>

<pre><code>#! /usr/bin/env python

import numpy as np
from openravepy import *

# set up OpenRave environment
env = Environment()
env.SetViewer('qtcoin')

# center of sphere
p_o = np.array([0.0, 0.0, 0.0])

# radius of sphere
r = 1.0

# down vector
down = np.array([0.0, 0.0, -1.0])

# large coordinate frame at the center of the sphere
originaxes = misc.DrawAxes(env, [1, 0, 0, 0, p_o[0], p_o[1], p_o[2]], dist=1, linewidth=2)

# all other frames
axes = []

for i in range(200):

    # get a random point on the sphere
    p_e = np.random.uniform(-1, 1, 3)
    p_e *= r / np.linalg.norm(p_e)
    p_e += p_o

    # Z column
    R_z = (p_o - p_e)
    R_z /= np.linalg.norm(R_z)

    # X column
    R_x = np.cross(down, R_z)
    R_x /= np.linalg.norm(R_x)

    # Y column
    R_y = np.cross(R_z, R_x)

    # Full transformation matrix
    T = np.array([[ R_x[0], R_y[0], R_z[0], p_e[0] ],
                  [ R_x[1], R_y[1], R_z[1], p_e[1] ],
                  [ R_x[2], R_y[2], R_z[2], p_e[2] ],
                  [      0,      0,      0,      1]])

    # draw it
    axes.append(misc.DrawAxes(env, T, dist=0.2, linewidth=1))
</code></pre>

<p>This should give you frames all around the sphere like this:
<a href="https://i.stack.imgur.com/42Il4.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/42Il4.png" alt="Random frames around a circle"></a></p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9698" data-toggle = "popover">
				<p>user name : Ben</p>
				<p> user reputation : 3608</p>
				<p class = "tagcontent" id = "usertaginfo-9698">{'None': 277, 'inverse-kinematics': 3, 'accelerometer': 5, 'calibration': 10, 'kinematics': 14, 'robotic-arm': 8, 'jacobian': 6, 'dh-parameters': 8, 'imu': 5, 'sensors': 5}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-9698">Load Comments</button></br>
			<div id = "commentsection-9698" class = 'collapse'>
			<div id = "comment-17230" class = "comment">
				<p>thanks for the answer :)..

There is a few things i am questioning... 

First of all..
Why $| p_0 - p_e|$  and not $p_0 - p_e$ for $R_z$?</p>
			</div>
			<div id = "comment-17231" class = "comment">
				<p>The columns of the rotation matrix must be normalized to have a length of 1.  I'll switch to the hat notation which is more proper.</p>
			</div>
			<div id = "comment-17234" class = "comment">
				<p>ahh.. Makes sense :)

Most of the things make sense, Just a last thing. If i understand it correctly $T_{world}^{ee}$ is the transformation matrix describing the desired position and orientation..  I am not sure i understand the effect of the last matrix in the last multiplication.  Aren't you already doing that with $T_{world}^{ee}$.</p>
			</div>
			<div id = "comment-17235" class = "comment">
				<p>doing as in rotation about the z-axis.</p>
			</div>
			<div id = "comment-17254" class = "comment">
				<p>See expanded answer.  the last step gives you an arbitrary (but discrete) rotation about the camera's axis.  Steps 1 through 3 give you the one transform where the object is upright.  I guess you could use a different vector in step 2 instead of world-down to get different orientations.  But that seems difficult to me and not as useful.</p>
			</div>
			<div id = "comment-17256" class = "comment">
				<p>The orientation of the camera should be as such that is should at all time be pointing into to the object. The object shall be seen from the camera regardless which position the camera is in on the sphere, which the rotation has to do.</p>
			</div>
			<div id = "comment-17361" class = "comment">
				<p>Sorry for the delayed response. 
I've implemented it to my simulation, which wasn't as smooth as i thought i would be.. I first had some problems with singularity, and then had implement invKin for large displacement, such that i could interpolate between the start conf. to the position on the sphere.. A made a simple Animation of how the system moves here https://giphy.com/gifs/l4HojuDYt0UtdM4Cc

From the Gif it is clear to see that the only axis which seem to be pointing inwards seem to be the red axis => x axis....  Could there be something wrong with the vector calculations? (..)</p>
			</div>
			<div id = "comment-17362" class = "comment">
				<p>I would gladly share the code if it may help in any way?</p>
			</div>
			<div id = "comment-17363" class = "comment">
				<p>ps.  Don't mind the stutter in the gif. I think i may have messed up the naming of the images frames..</p>
			</div>
			</div>
				<textarea id = "speech-9698" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9698">
					<img id="start_img-9698" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9698">Comment</button>
			<br><div id = "ans-9699"  class = "post">
				<h2>Answer</h2>
			<div id="vote-9699" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Currently your problem still has one degree of freedom, namely the orientation of the robot can still roll around the vector. For now I will assume that you would want the top of the robot to keep facing upwards as best as possible.</p>

<p>A rotation matrix can be seen as an second order tensor, which can be constructed by summing multiple <a href="http://mathworld.wolfram.com/Dyad.html" rel="nofollow">dyads</a> of the new and old base vector,</p>

<p>$$
R = \vec{e}_{x1} \vec{e}_{x0} + \vec{e}_{y1} \vec{e}_{y0} + \vec{e}_{z1} \vec{e}_{z0}.
$$</p>

<p>Because each basis should be orthonormal, then taking the dot product of $R$ with either $\vec{e}_{x0}$, $\vec{e}_{y0}$ or $\vec{e}_{z0}$ will result in the base vectors $\vec{e}_{x1}$, $\vec{e}_{y1}$ or $\vec{e}_{z1}$ respectively. Each dyad can be expressed as a matrix by taking the <a href="http://mathworld.wolfram.com/VectorDirectProduct.html" rel="nofollow">vector direct product</a>.</p>

<p>Now all you have to do is find an expression for the initial and final orthonormal basis. Since you want the robot to face the center of the sphere, you can define $\vec{e}_{x0}$ by the direction the front of the robot is facing, when no rotation is applied, and $\vec{e}_{x1}$ as the unit vector pointing towards the center of the sphere. By using the addition constraint for the roll you can define $\vec{e}_{y0}$ as the direction the top of the robot is facing, when no rotation is applied, and $\vec{e}_{y1}$ by taking the orthogonal component of $\vec{e}_{y0}$ with respect to $\vec{e}_{x1}$,</p>

<p>$$
\vec{e}_{y1} = \frac{\vec{e}_{y0} - \left(\vec{e}_{y0} \cdot \vec{e}_{x1}\right) \vec{e}_{x1}}{\left\|\vec{e}_{y0} - \left(\vec{e}_{y0} \cdot \vec{e}_{x1}\right) \vec{e}_{x1}\right\|}.
$$</p>

<p>The remaining vectors van be found using the fact that each basis should be orthonormal, which can be achieved by simply taking the cross product of the other base vectors. So $\vec{e}_{z0}=\vec{e}_{x0}\times\vec{e}_{y0}$ and $\vec{e}_{z1}=\vec{e}_{x1}\times\vec{e}_{y1}$, you could reverse the order of the vectors in the cross product, but you should do for both the $\vec{e}_{z0}$ and $\vec{e}_{z1}$ because otherwise the resulting "rotation" will also contain a reflection (the robot will be rotated but also a mirror image of itself).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-9699" data-toggle = "popover">
				<p>user name : fibonatic</p>
				<p> user reputation : 373</p>
				<p class = "tagcontent" id = "usertaginfo-9699">{'quadcopter': 2, 'None': 19, 'design': 2}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-9699" class = 'collapse'>
			</div>
				<textarea id = "speech-9699" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-9699">
					<img id="start_img-9699" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-9699">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		$("#reward_tool").load("/reward_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>