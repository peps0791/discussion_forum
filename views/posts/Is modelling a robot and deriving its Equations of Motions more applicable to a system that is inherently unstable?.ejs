<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Is modelling a robot and deriving its Equations of Motions more applicable to a system that is inherently unstable?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div id = "comment_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-8313" class = "post">
			<h2>Question</h2>
			<div id="vote-8313" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 107</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Is modelling a robot and deriving its Equations of Motions more applicable to a system that is inherently unstable?</h2>
<p>As someone who is new and is still learning about robotics, I hope you can help me out.</p>

<p>Let's say I have two systems: </p>

<ul>
<li>(a) Inverted Pendulum (unstable system)</li>
<li>(b) Pole Climbing Robot (stable system)</li>
</ul>

<p>For system (a), I would say that generally, it is a more dynamic system that produces fast motion. So, in order to effectively control it, I would have to derive the Equations of Motions (EOM) and only then I can supply the sufficient input to achieve the desired output. Eventually, the program will implement the EOM which enables the microcontroller to produce the right signal to get the desired output.</p>

<p>However for system (b), I assume that it is a stable system. Instead of deriving the EOM, why cant I just rely on the sensor to determine whether the output produced is exactly what I want to achieve? </p>

<p>For unstable system, controlling it is just difficult and moreover, it does not tolerate erratic behavior well. The system will get damaged, as a consequence. </p>

<p>On the contrary, stable system is more tolerant towards unpredictable behavior since it is in fact stable.</p>

<p>Am I right to think about it from this perspective? What exactly is the need for deriving the EOM of systems (a) and (b) above? What are the advantages?  How does it affect the programming of such systems?</p>

<p><strong>Edited:</strong>
Some examples of the climbing robot that I'm talking about: </p>

<ol>
<li><p><a href="http://i.ytimg.com/vi/gf7hIBl5M2U/hqdefault.jpg" rel="nofollow">i.ytimg.com/vi/gf7hIBl5M2U/hqdefault.jpg</a></p></li>
<li><p><a href="http://ece.ubc.ca/~baghani/Academics/Project_Photos/UTPCR.jpg" rel="nofollow">ece.ubc.ca/~baghani/Academics/Project_Photos/UTPCR.jpg</a></p></li>
</ol>

			</div>
			<div class = "userinfosection"  id = "userinfo-8313" data-toggle = "popover">
				<p>user name : goddar</p>
				<p> user reputation : 76</p>
				<p class = "tagcontent" id = "usertaginfo-8313">{'control': 3, 'None': 2, 'power': 0, 'arduino': 0, 'battery': 2, 'microcontroller': 0, 'wheeled-robot': 0, 'imu': 1, 'sensor-fusion': 1, 'mobile-robot': 4, 'electronics': 0, 'sensors': 1}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-8313" class = 'collapse'>
			</div>
				<textarea id = "speech-8313" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8313">
					<img id="start_img-8313" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8313">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-8315"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8315" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Interesting question...</p>

<p>In a closed loop system you always rely on a sensor to see if the output equals your reference value or not (e.g. is the actual state and desired state the same). If no, your controller acts tries to minimize the difference between desired state and current state. </p>

<p>The input you can give to the inverted pendulum is not the same as your output, what you measure. If it would be, it would not be an inverted pendulum. Infact with the EOM you try to figure out what input should you give to the system to produce the output you expect. In other word how does your input relate to your output (or vice versa).  </p>

<p>Here is a tutorial on how to write the EOM:
<a href="http://ctms.engin.umich.edu/CTMS/index.php?example=InvertedPendulum&amp;section=SimulinkModeling" rel="nofollow">http://ctms.engin.umich.edu/CTMS/index.php?example=InvertedPendulum&amp;section=SimulinkModeling</a></p>

<p>I am not sure what you meen by pole climbing robot, but I assume it is a more complex system consisting of more actuators and so it has a higher level (maybe open loop) control system and then closed loops for all different actuators...</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8315" data-toggle = "popover">
				<p>user name : 50k4</p>
				<p> user reputation : 2800</p>
				<p class = "tagcontent" id = "usertaginfo-8315">{'geometry': 0, 'None': 193, 'kinematics': 0, 'robotic-arm': 0}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8315">Load Comments</button></br>
			<div id = "commentsection-8315" class = 'collapse'>
			<div id = "comment-13310" class = "comment">
				<p>Some examples of the climbing robot that I'm talking about:                       i) http://i.ytimg.com/vi/gf7hIBl5M2U/hqdefault.jpg      ii) http://www.ece.ubc.ca/~baghani/Academics/Project_Photos/UTPCR.jpg</p>
			</div>
			<div id = "comment-13311" class = "comment">
				<p>Thanks for the explanation. So, without the EOM, controlling the motion of the inverted pendulum will be difficult due to the tight requirement and margin of error for the following criteria: overshoot, rise time, settling time and etc?  So, how about the stable system?  What if none of the criteria above matter?</p>
			</div>
			<div id = "comment-13389" class = "comment">
				<p>If you take a look at a simple motor control application for position control you give PWM signals to the motor which turns the rotor. If you stop giving the pwm signals the motor stops moving. The PID controller or a cascaded PID controller can then deal with the position control, ths controlled variable (motor torque) is more or less in a direct relationship with the desired output (rotor position). For the case of the inverted pendulum this relationship is given by the EOM.</p>
			</div>
			</div>
				<textarea id = "speech-8315" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8315">
					<img id="start_img-8315" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8315">Comment</button>
			<br><div id = "ans-8316"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8316" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>A system is (marginally) stable if <em>all</em> of the poles are (equal to or) <a href="https://en.wikibooks.org/wiki/Control_Systems/Stability#Poles_and_Stability" rel="nofollow">less than zero</a>. In general, the poles of a system determine whether a system is stable or not, and the zeros of a system determine the <em>approach</em> to stability (rise time, settling time, overshoot, etc.) </p>

<p>A PID controller operates with no system model taken into account. A PID controller adds a pole at zero and two zeros to the system; these can be adjusted to tune the system response. </p>

<p>The problem with trying to use a PID controller on an unstable system is that you need to tune the zeros of the controller to <em>exactly equal to</em> the unstable poles to achieve pole-zero cancellation. If, for some reason (friction, wear, capacitor aging, vibration, etc.) the controller's zero end up not <em>exactly equal to</em> the unstable poles, then the unstable poles are no longer cancelled and the system goes unstable again. </p>

<p>In scenarios like this, adding zeros is not the solution. The way to control an unstable pole is to actually <em>place</em> the (unstable) open-loop poles somewhere else. In this manner you're not trying to control the system by cancelling the poles, you're actually acting to change the fundamental dynamics of the system. </p>

<p>The technique to achieve pole placement is generally <a href="https://en.wikipedia.org/wiki/Full_state_feedback" rel="nofollow">state feedback control</a>. This requires a system model because (hand-waving) you need to know which poles are unstable and in order to be able to make them stable. Remember, for stability, a positive pole is unstable and a negative pole is stable, from the inverse Laplace tranform of the pole, $e^{\pm pt}$ - the time response either decays or "explodes" exponentially. </p>

<p>So, once you have a system model and evaluate which poles need to be moved from the right- to the left-hand plane you can calculate the gains required to do the move et voila, the controller is complete. Note the (hand-waving); this can be a very time-consuming task.</p>

<p>So, in conclusion, while you might be able to "skate by" with a PID controller on an unstable system, PID control will never change the pole locations of the underlying system so you will only ever achieve tenuous stability. In order to change the underlying system dynamics, you first need to <em>know</em> the underlying system dynamics, and that's why you need a system model.  </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8316" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-8316">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8316">Load Comments</button></br>
			<div id = "commentsection-8316" class = 'collapse'>
			<div id = "comment-13312" class = "comment">
				<p>Thanks Chuck. I may need some time to digest this and will get back to you later.</p>
			</div>
			<div id = "comment-13548" class = "comment">
				<p>Hi Chuck, finally. Now I get it that PID is susceptible to external factors, but how is this different from using the state feedback method? They are also made up of the same components. Physically, I know that using PID requires us to tweak the gains Kp, Kd and Ki to calculate u (t) and thus sending the appropriate voltage to the actuators. But, can you explain how does state feedback change the fundamental dynamics? Physically, how is it possible to change the fundamental dynamics of a system that we have already built? How is that achieved? Only through software?</p>
			</div>
			<div id = "comment-13549" class = "comment">
				<p>Should I put up a new topic to discuss this because I have a few more questions. I like to know how the analytical aspect of a control system algorithm translates into the physical form to affect the system. What do you think?</p>
			</div>
			<div id = "comment-13550" class = "comment">
				<p>@goddar - I'm on my phone, so it's a little hard for me to search/comment well at the moment, but I wrote a rather long explanation of state feedback controls for another answer I can link you to. Briefly, PID controllers *add* poles and zeros to your system, while state feedback controllers *move the existing* poles of the system. As far as I know, all state feedback controllers are implemented in software, meaning I'm not aware of any electronic or fluid analogies like there are for PID controllers.</p>
			</div>
			<div id = "comment-13551" class = "comment">
				<p>@goddar - A PID controller uses the plant dynamics to generate an output, then applies more poles and zeros to a comparison of that output and the reference input. A state feedback controller doesn't *need* output feedback (but it does help!), so you are free to modify the reference signal *without* needing to apply the original plant dynamics first. A state feedback controller allows you to exploit a priori knowledge of the system for more "optimal" control. That's all I can really say here; if you have more questions just make one and I'll chip in!</p>
			</div>
			<div id = "comment-13670" class = "comment">
				<p>when we change the poles' positions using state feedback control, it automatically changes the fundamental dynamics of the system because it changes the whole system equations, is this what you meant? But, isn't the system subjected to the same (friction, wear, capacitor aging, vibration, etc.) in the PID example as you mentioned in the answer above? Maybe you are saying that since state feedback changes the location of the poles to the left, the system becomes stable and therefore those factors above have extremely minimal effects on the overall system?</p>
			</div>
			<div id = "comment-13671" class = "comment">
				<p>could you please post the link to the state feedback controls explanation that you mentioned above? Thanks.</p>
			</div>
			</div>
				<textarea id = "speech-8316" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8316">
					<img id="start_img-8316" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8316">Comment</button>
			<br><div id = "ans-8318"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8318" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>The inverted pendulum is unstable in the sense that it will diverge away from the upright position if <em>perturbed</em> (for example, slightly blown by wind or lightly vibrated). On the other hand the "climbing robot" will swing back to its original position if perturbed, so you can say it is stable.</p>

<p>You don't need to derive the equations of motion for an unstable system in order to control it if you have sensor feedback of the desired output (just like you said). Instead, you use a feedback control law that compares the sensor reading to your desired output to compute the required control input that reduces that difference. Read about <a href="https://en.wikipedia.org/wiki/PID_controller" rel="nofollow">PID controllers</a> to get an idea of how that works (it's actually pretty simple).</p>

<p>The advantage to using the equations of motion is that you can <em>predict</em> the required input to achieve a desired response, and this predicted input is often referred to as <em>feed-forward</em> control (or <em>open-loop</em> control). If you combine both feed-forward and feedback control you get a very robust system that applies predicted inputs to achieve a desired output but also implements feedback based on sensors to correct for errors (your equations of motion can never be perfectly accurate).</p>

<p>Another benefit of using the equations of motion is that you can account for non-linearities in the system that might otherwise be problematic for a PID controller.</p>

<p>When it comes to programming, using feedback will be much simpler than using feed-forward since the equations of motion will likely be relatively complex (in general, but not bad for a simple inverted pendulum).</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8318" data-toggle = "popover">
				<p>user name : Brian Lynch</p>
				<p> user reputation : 1237</p>
				<p class = "tagcontent" id = "usertaginfo-8318">{'None': 85}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8318">Load Comments</button></br>
			<div id = "commentsection-8318" class = 'collapse'>
			<div id = "comment-13316" class = "comment">
				<p>Thx. But I dont quite get the implementation of feedfwd+feedback part. You were saying that implementing feedforward requires me to derive the EOM, which allows me to calculate the input based on the output that I desire? However, the calculated feedforward control input does not adapt to the external load due to lack of feedback, right? At the same time, the feedback control also calculates the input based on the feedback by the sensor, which will also produce the desired output. Aren't this redundant? Will they end up produce excessive control input and thus overshoot the desired output?</p>
			</div>
			<div id = "comment-13317" class = "comment">
				<p>If you find it hard to understand, please let me know and I will rephrase them. This is because I am still confused.</p>
			</div>
			<div id = "comment-13318" class = "comment">
				<p>That is exactly correct, the EOM allows you to predict the input needed for some desired output response. There will be errors due to external load and so feedback will be needed to adapt. What is important is that the feedback controller is also accounting for the motion being caused by the feedforward controller. Yes, you may get larger inputs but it is not redundant since your feedback controller will be tuned to account for that. With better feedforward control you need less feedback correction.</p>
			</div>
			<div id = "comment-13320" class = "comment">
				<p>Not at all, I understand you perfectly, and you seem to understand the problem quite well. Just keep in mind that when we say "desired output" we are talking about the final motion of the system. And that motion is continuously updating, which then updates how the controller responds. As long as we account for everything in our model then we can design the feedback part to produce the output we want.</p>
			</div>
			<div id = "comment-13668" class = "comment">
				<p>Hi Brian, it seems that deriving EOM helps us to produce a more efficient system. This is because EOM tells us in advance, approximately where the range of our control inputs are in order for the plant to achieved the desired output. Therefore, at the onset, the controller can send the the closest signal to get the desired output. On the contrary, if we just rely on feedback control without deriving the EOM, the settling time or other specifications will be longer as the control input sent from the controller may be nowhere near the ballpark to produce the desired output. Does it make sense?</p>
			</div>
			<div id = "comment-13669" class = "comment">
				<p>Also, the EOM is also the transfer function as it relates the Input to the Output in the s-domain?</p>
			</div>
			<div id = "comment-13672" class = "comment">
				<p>Yes, your first comment sounds correct in spirit, but I wouldn't say "deriving the EOM helps us produce a more efficient system", it is simply "using the EOM to generate feed-forward control inputs improves the system performance". I can derive all kinds of EOMs but that doesn't do anything by itself. Also, don't think of some _control input_ producing _desired output_ directly. If you have a large positive error and feedback alone produces a large negative motion to correct it, then that _is_ the desired output in some senses.</p>
			</div>
			<div id = "comment-13673" class = "comment">
				<p>Equations of motion are equations of motion. You can transform any time-domain equation to Laplace-domain. The EOM is usually ***not*** the transfer function between input and output, especially with feedback control. It is typically only _part_ of what is called the "plant", and is usually integrated afterwards.</p>
			</div>
			<div id = "comment-13680" class = "comment">
				<p>I get it now. Thanks a lot @Brian.</p>
			</div>
			</div>
				<textarea id = "speech-8318" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8318">
					<img id="start_img-8318" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8318">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
					<li><a data-toggle="tab" href="#highlights">Highlights</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Links from the Page</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
						<div id="highlights" class="tab-pane fade">
							<h3>Highlights</h3>
							<div id = "highlightcontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		$("#comment_tool").load("/comment_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>