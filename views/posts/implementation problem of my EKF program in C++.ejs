<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>implementation problem of my EKF program in C++
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-14072" class = "post">
			<h2>Question</h2>
			<div id="vote-14072" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 16</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>implementation problem of my EKF program in C++</h2>
<p>I implemented EKF in c++;But the output value (pitch, yaw ,roll ) is not correct . Please give me some advice if you find my code's problem.</p>

<p>I used MPU9150 and I implemented EKF by referring to the following URL;</p>

<p><a href="https://github.com/gakuseishitsu/Exte" rel="nofollow noreferrer">https://github.com/gakuseishitsu/Exte</a>...</p>

<p>The following values are output of EKF while MPU9150 is not moved and placed on the flat table .</p>

<p>data.pitch_ekf:89.7621 data.yaw_ekf: 85.745 data.roll_ekf:-0.719216
data.pitch_sens:-0.074 data.yaw_sens:-0.010 data.roll_sens:0</p>

<p>I thought the attitude that is calculated from sensor is proper but the attitude that is calculated from my EKF is not correct;</p>

<p>The ekf's attitude value is always apploximately 89 degree. when I rotated the sensor from 0 degree to 90 degree , tha value is not 85 degree at first but it will be  immediately converged in approximately 85 degree.</p>

<p>[my ekf]</p>

<pre><code>    #include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;fstream&gt; // ifstream, ofstream
#include &lt;sstream&gt; // istringstream
#include &lt;cmath&gt;
#include &lt;eigen3/Eigen/Core&gt; 
#include &lt;eigen3/Eigen/LU&gt;   
#include &lt;sensor_msgs/Imu.h&gt;
#include &lt;sensor_msgs/MagneticField.h&gt;
#include &lt;geometry_msgs/Twist.h&gt;
#include &lt;ros/ros.h&gt;
#include "my_simple_ekf/send_msg.h"
const int NUM_OF_IMU_DATA = 6;
const double FIRST_TIME = 0.01;
const double DT = 0.01;
const double GRAV_ACC = 9.80665;
const double TO_DEG = 57.2958; // rad -&gt; deg
const std::vector&lt;double&gt; coordinateModifyFactor{1.0, -1.0, 1.0, 1.0, -1.0, 1.0};  

const std::vector&lt;double&gt; INIT_P{ 0.0001, 0.0001, 0.0001, 0.0001 };
const std::vector&lt;double&gt; INIT_Q{ 0.01, 0.01, 0.01, 0.01 };
const std::vector&lt;double&gt; INIT_R{ 1.0, 1.0, 10.0 };
const std::vector&lt;double&gt; INIT_X { 0.0, 0.0, 0.0, 1.0 };
const int SIZE_VECTOR_X = 4;
const int SIZE_VECTOR_Y = 3;

template&lt;typename T&gt;
class u {
private:
    T t;

    ros::NodeHandle nh;
    ros::Subscriber ros_imu_sub; 


public:
   u(const int num);
   ~u() {};
    std::vector&lt;T&gt; imuRawData;
    std::vector&lt;T&gt; imuDataLPF;
    void setUData(const std::vector&lt;T&gt;&amp; f);
    void setLPF(const T ft, const T lpf);
    ros::Publisher  twist_pub;
    ros::Publisher  data_pub;
    T getT() const { return t; };
    void imuCallback(const sensor_msgs::Imu&amp; imu_msg);
    void magCallback(const sensor_msgs::MagneticField&amp; msg);
};

// constructor of u
template&lt;typename T&gt;
u&lt;T&gt;::u(const int num)
{
 twist_pub = nh.advertise&lt;geometry_msgs::Twist&gt;("angle_simple_ekf",10);

  data_pub = nh.advertise&lt;my_simple_ekf::send_msg&gt;("save_data",10);

 ros_imu_sub = nh.subscribe("imu",100, &amp;u&lt;T&gt;::imuCallback,this);


 for (int i = 0; i &lt; num; ++i) {
    imuRawData.push_back(static_cast&lt;T&gt;(0));
    imuDataLPF.push_back(static_cast&lt;T&gt;(0));
  }
}

template&lt;typename T&gt;
void u&lt;T&gt;::setLPF(const T ft, const T lpf) {
  for (int i = 0; i &lt; static_cast&lt;int&gt;(imuRawData.size()); i++)
   imuDataLPF[i] = imuRawData[i];
}

template&lt;typename T&gt;
void u&lt;T&gt;::setUData(const std::vector&lt;T&gt;&amp; f) {
    for (int i = 0; i &lt; static_cast&lt;int&gt;(imuRawData.size()); i++)
        imuRawData[i] = f[i] * imuRawData[i];
}


template&lt;typename T&gt;
void u&lt;T&gt;::imuCallback(const sensor_msgs::Imu&amp; imu_msg)
{

 imuRawData[0] = imu_msg.linear_acceleration.x;
 imuRawData[1] = imu_msg.linear_acceleration.y;
 imuRawData[2] = imu_msg.linear_acceleration.z;
 imuRawData[3] = imu_msg.angular_velocity.x;
 imuRawData[4] = imu_msg.angular_velocity.y;
 imuRawData[5] = imu_msg.angular_velocity.z;
}


template&lt;typename T&gt;
std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const u&lt;T&gt;&amp; udata);

template&lt;typename T&gt;
class myKalmanFilter {
private:

Eigen::Matrix&lt;T, SIZE_VECTOR_X, 1&gt; xHatMinus;   // Advance estimate of the state valiable
Eigen::Matrix&lt;T, SIZE_VECTOR_Y, 1&gt; y;           // Observation value
Eigen::Matrix&lt;T, SIZE_VECTOR_X, 1&gt; f;           // System Matrix
Eigen::Matrix&lt;T, SIZE_VECTOR_Y, 1&gt; h;           // Transformation matrix from state valiable to observation value
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; A;   // Linearized f
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; AT;  // Transposition of A
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_Y&gt; C;   // Liniarized h
Eigen::Matrix&lt;T, SIZE_VECTOR_Y, SIZE_VECTOR_X&gt; CT;  // Transposition of C
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_Y&gt; g;   // Kalman gain
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; P;   // Covariance matrix
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; PMinus;  // Advance covariance matrix
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; Q;   // Variance matrix of w
Eigen::Matrix&lt;T, SIZE_VECTOR_Y, SIZE_VECTOR_Y&gt; R;   // Variance matrix of v
Eigen::Matrix&lt;T, SIZE_VECTOR_X, SIZE_VECTOR_X&gt; I;   // Unit Matrix
public:
myKalmanFilter(const std::vector&lt;T&gt;&amp; x, const std::vector&lt;T&gt;&amp; p, const std::vector&lt;T&gt;&amp; q, const std::vector&lt;T&gt;&amp; r);
~myKalmanFilter() {};
    Eigen::Matrix&lt;T, SIZE_VECTOR_X, 1&gt; xHat;        // Estimated value of the state valiable

void prediction(std::vector&lt;T&gt;&amp; imu);
void filter(std::vector&lt;T&gt;&amp; imu);

void normXHat();
};


// constructor of myKalmanFilter
template&lt;typename T&gt;
myKalmanFilter&lt;T&gt;::myKalmanFilter(const std::vector&lt;T&gt;&amp; x, const std::vector&lt;T&gt;&amp; p, const std::vector&lt;T&gt;&amp; q, const std::vector&lt;T&gt;&amp; r)
{
xHat &lt;&lt; x[0], 
        x[1], 
        x[2], 
        x[3];

P &lt;&lt; p[0]  , 0.0, 0.0, 0.0,
     0.0, p[1]  , 0.0, 0.0,
     0.0, 0.0, p[2]  , 0.0,
     0.0, 0.0, 0.0  , p[3];

Q &lt;&lt; q[0]  , 0.0, 0.0, 0.0,
     0.0, q[1]  , 0.0, 0.0,
     0.0, 0.0, q[2]  , 0.0,
     0.0, 0.0, 0.0, q[3]  ;

R &lt;&lt; r[0]  , 0.0, 0.0,
     0.0, r[1]  , 0.0,
     0.0, 0.0, r[2]  ;

I &lt;&lt; 1.0, 0.0, 0.0, 0.0,
     0.0, 1.0, 0.0, 0.0,
     0.0, 0.0, 1.0, 0.0,
     0.0, 0.0, 0.0, 1.0;

// fill other matrix 0
xHatMinus.setZero();
y.setZero();
f.setZero();
h.setZero();
PMinus.setZero();
g.setZero();
A.setZero();
AT.setZero();
C.setZero();
CT.setZero();
}


template&lt;typename T&gt;
void myKalmanFilter&lt;T&gt;::prediction(std::vector&lt;T&gt;&amp; imu)
{

std::vector&lt;T&gt; w,q;
w.push_back(static_cast&lt;T&gt;(0));
for (int i = 3; i &lt; 6; ++i)
    w.push_back(imu[i]); // w[1]~w[3]

A &lt;&lt;      1.0    ,  0.5*DT*w[3], -0.5*DT*w[2], 0.5*DT*w[1],
     -0.5*DT*w[3],      1.0    ,  0.5*DT*w[1], 0.5*DT*w[2],
      0.5*DT*w[2], -0.5*DT*w[1],      1.0    , 0.5*DT*w[3],
     -0.5*DT*w[1], -0.5*DT*w[2], -0.5*DT*w[3],     1.0    ;


f = A * xHat;
xHatMinus = f;

q.push_back(static_cast&lt;T&gt;(0));
for (int i = 0; i &lt; 4; ++i)
    q.push_back(xHatMinus[i]); // q[1]~q[4]

CT &lt;&lt;  2 * q[3] * GRAV_ACC, -2 * q[4] * GRAV_ACC, 2 * q[1] * GRAV_ACC, -2 * q[2] * GRAV_ACC,
       2 * q[4] * GRAV_ACC,  2 * q[3] * GRAV_ACC, 2 * q[2] * GRAV_ACC,  2 * q[1] * GRAV_ACC,
      -2 * q[1] * GRAV_ACC, -2 * q[2] * GRAV_ACC, 2 * q[3] * GRAV_ACC,  2 * q[4] * GRAV_ACC;

PMinus = A * P * A.transpose() + Q;

}

template&lt;typename T&gt;
void myKalmanFilter&lt;T&gt;::filter(std::vector&lt;T&gt;&amp; imu) {
std::vector&lt;T&gt; a, q;
a.push_back(static_cast&lt;T&gt;(0));
for (int i = 0; i &lt; 3; ++i)
    a.push_back(imu[i]); // a[1]~a[3]
q.push_back(static_cast&lt;T&gt;(0));
for (int i = 0; i &lt; 4; ++i)
    q.push_back(xHatMinus[i]); // q[1]~q[4]

C = CT.transpose();

g = PMinus * C * (CT * PMinus * C + R).inverse();

y &lt;&lt; a[1],
     a[2],
     a[3];

h &lt;&lt; 2 * (q[3] * q[1] - q[2] * q[4]) * GRAV_ACC,
     2 * (q[2] * q[3] - q[1] * q[4]) * GRAV_ACC,
     (q[3] * q[3] - q[1] * q[1] - q[2] * q[2] + q[4] * q[4]) * GRAV_ACC;

xHat = xHatMinus + g * (y - h);


P = ( I - g * CT ) * PMinus;
}

template&lt;typename T&gt;
void myKalmanFilter&lt;T&gt;::normXHat() {
    T norm;
    norm = sqrt(xHat(0, 0)*xHat(0, 0) + xHat(1, 0)*xHat(1, 0) + xHat(2, 0)*xHat(2, 0) + xHat(3, 0)*xHat(3, 0));
    xHat /= norm;
}



template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 3&gt; getDCM(Eigen::Matrix&lt;T, SIZE_VECTOR_X, 1&gt;&amp; q);

template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 1&gt; getEuler(Eigen::Matrix&lt;T, 3, 3&gt;&amp; dcm);

template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 1&gt; getEulerFromAccData(std::vector&lt;T&gt;&amp; imu);

int main(int argc, char** argv)
{
ros::init(argc,argv,"my_simple_ekf");

u&lt;double&gt; input(NUM_OF_IMU_DATA);
myKalmanFilter&lt;double&gt; kalman(INIT_X, INIT_P, INIT_Q, INIT_R);


ros::Rate loop_rate(100);

 geometry_msgs::Twist twist;
 my_simple_ekf::send_msg data;
while (ros::ok())
{
    ros::spinOnce(); 
    // string data -&gt; vector, bias filter, LPF
    input.setUData(coordinateModifyFactor);

    input.setLPF(FIRST_TIME, IMU_LPF);
    //  std::cout &lt;&lt; "LFPdata: " &lt;&lt; input &lt;&lt; std::endl &lt;&lt; std::/*
    // kalman filter and normalize quaternion
    kalman.prediction(input.imuDataLPF);//input.getImuDataLPF());
    kalman.filter(input.imuDataLPF);
    kalman.normXHat();

    // get DCM and Euler angles from quaternion
    Eigen::Matrix&lt;double, 3, 3&gt; DCM = getDCM(kalman.xHat);
    Eigen::Matrix&lt;double, 3, 1&gt; E = getEuler(DCM);

    Eigen::Matrix&lt;double, 3, 1&gt; e = getEulerFromAccData(input.imuDataLPF);//input.getImuDataLPF());

    twist.angular.x = E(0,0);     //pitch
    twist.angular.y = E(1,0);     //yaw
    twist.angular.z = E(2,0);     //roll   

    input.twist_pub.publish(twist);

    data.accelX = input.imuRawData[0];  // accel ax
    data.accelY = input.imuRawData[1];  // accel ay
    data.accelZ = input.imuRawData[2];  // accel az
    data.gyroX  = input.imuRawData[3];  // angular velocity  x
    data.gyroY  = input.imuRawData[4];  // angular velocity  y
    data.gyroZ  = input.imuRawData[5];  // angular velocity  z
    data.pitch  = E(0,0)*TO_DEG;         // pitch
    data.yaw    = E(1,0)*TO_DEG;         // yaw
    data.roll   = E(2,0)*TO_DEG;         // roll
    input.data_pub.publish(data);


    std::cout &lt;&lt; "data.pitch_ekf: " &lt;&lt; data.pitch &lt;&lt; std::endl ;
    std::cout &lt;&lt; "data.yaw_ekf: " &lt;&lt; data.yaw &lt;&lt; std::endl ;
    std::cout &lt;&lt; "data.roll_ekf: " &lt;&lt; data.roll &lt;&lt; std::endl ;
    std::cout &lt;&lt; "data.pitch_sens: " &lt;&lt; e(0,0)*TO_DEG &lt;&lt; std::endl ;
    std::cout &lt;&lt; "data.yaw_sens: " &lt;&lt; e(1,0)*TO_DEG &lt;&lt; std::endl ;
    std::cout &lt;&lt; "data.roll_sens: " &lt;&lt; e(2,0)*TO_DEG &lt;&lt; std::endl ;


    loop_rate.sleep();
}

return 0;
}

template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 3&gt; getDCM(Eigen::Matrix&lt;T, SIZE_VECTOR_X, 1&gt;&amp; x) {
Eigen::Matrix&lt;T, 3, 3&gt; dcm;
std::vector&lt;T&gt; q;
q.push_back(static_cast&lt;T&gt;(0));
for (int i = 0; i &lt; 4; ++i)
    q.push_back(x(i,0)); // q[1]~q[4]

dcm &lt;&lt; q[1] * q[1] - q[2] * q[2] - q[3] * q[3] + q[4] * q[4], 2 * (q[1] * q[2] + q[3] * q[4]), 2 * (q[3] * q[1] - q[2] * q[4]),
    2 * (q[1] * q[2] - q[3] * q[4]), q[2] * q[2] - q[3] * q[3] - q[1] * q[1] + q[4] * q[4], 2 * (q[2] * q[3] + q[1] * q[4]),
    2 * (q[3] * q[1] + q[2] * q[4]), 2 * (q[2] * q[3] - q[1] * q[4]), q[3] * q[3] - q[1] * q[1] - q[2] * q[2] + q[4] * q[4];

return dcm;
}

template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 1&gt; getEuler(Eigen::Matrix&lt;T, 3, 3&gt;&amp; dcm) {
    Eigen::Matrix&lt;T, 3, 1&gt; euler;
    T pitch, yaw, roll;

    pitch = atan(dcm(1,2)/dcm(2,2));
    yaw = atan(-dcm(0,2)/sqrt(dcm(1,2)*dcm(1,2)+dcm(2,2)*dcm(2,2)));
    roll =atan(dcm(0,1)/dcm(0,0));

    euler &lt;&lt; roll,
        pitch,
        yaw;

return euler;
}


template&lt;typename T&gt;
Eigen::Matrix&lt;T, 3, 1&gt; getEulerFromAccData(std::vector&lt;T&gt;&amp; imu) {
    Eigen::Matrix&lt;T, 3, 1&gt; euler;


T roll, pitch, yaw, acc;

acc = sqrt(imu[0] * imu[0] + imu[1] * imu[1] + imu[2] * imu[2]);

imu[0] = imu[0]/acc;
imu[1] = imu[1]/acc;
imu[2] = imu[2]/acc;

yaw = static_cast&lt;T&gt;(0);
pitch = atan(imu[0]/sqrt(imu[1]*imu[1]+imu[2]*imu[2]));
roll = atan(imu[1]/imu[2]);

euler &lt;&lt; roll,
    pitch,
    yaw;

return euler;
}
</code></pre>

			</div>
			<div class = "userinfosection"  id = "userinfo-14072" data-toggle = "popover">
				<p>user name : kkj</p>
				<p> user reputation : 1</p>
				<p class = "tagcontent" id = "usertaginfo-14072">{'ekf': 0, 'None': 0, 'ros': 0}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-14072" class = 'collapse'>
			</div>
				<textarea id = "speech-14072" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-14072">
					<img id="start_img-14072" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-14072">Comment</button>

<h1>Answers</h1>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>