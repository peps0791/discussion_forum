<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>What are good strategies for tuning PID loops?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-167" class = "post">
			<h2>Question</h2>
			<div id="vote-167" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">32</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 79950</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>What are good strategies for tuning PID loops?</h2>
<p>Tuning controller gains can be difficult, what <strong>general</strong> strategies work well to get a stable system that converges to the right solution?</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-167" data-toggle = "popover">
				<p>user name : Felix</p>
				<p> user reputation : 437</p>
				<p class = "tagcontent" id = "usertaginfo-167">{'planning': 4, 'control': 32, 'None': 0, 'errors': 20, 'tuning': 32, 'localization': -3, 'artificial-intelligence': 4, 'pid': 32, 'noise': 9, 'mobile-robot': 17, 'sensors': 9, 'motion-planning': 4}</p>
			</div><br>
			<br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-167">Load Comments</button></br>
			<div id = "commentsection-167" class = 'collapse'>
			<div id = "comment-197" class = "comment">
				<p>A question targeted at a more specific question would be more useful. Otherwise, you should just look at the [PID](http://en.wikipedia.org/wiki/PID_controller) article, with a section on tuning</p>
			</div>
			<div id = "comment-202" class = "comment">
				<p>I've always found tuning PIDs to be very dependent on the characteristics of the system, which is why I've never found *auto-tune* systems to be terribly useful. They are fine for a first pass, low performance set of parameters, but they are *far* from optimal, and you will have the same problem with any *general* strategy which is not optimised for the mechanical, electrical and control aspects of a given system.</p>
			</div>
			</div>
				<textarea id = "speech-167" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-167">
					<img id="start_img-167" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-167">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-171"  class = "post">
				<h2>Answer</h2>
			<div id="vote-171" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Sebastian Thrun presented a simple algorithm for tuning PID in his "How to Program a Robotic Car" class. It's called "twiddle", he describes it <a href="https://www.youtube.com/watch?v=2uQ2BSzDvXs" rel="nofollow">here</a>.</p>

<p>Twiddle is very prone to finding local minima--this means that you could come up with a set of three constants that are okay, but not <em>optimal</em> for the situation. The problem of tuning PID constants is a subset of a more general search problem to find certain parameters to maximize utility (in this case, minimizing error of the PID algorithm). You can look into other general solutions to this problem, like hill-climbing, simulated annealing, genetic algorithms, etc. that might end up finding more optimal solutions.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-171" data-toggle = "popover">
				<p>user name : Robz</p>
				<p> user reputation : 954</p>
				<p class = "tagcontent" id = "usertaginfo-171">{'pid': 8, 'embedded-systems': 0, 'slam': 20, 'sensor-error': 8, 'accelerometer': 5, 'kinematics': 7, 'mechanism': 1, 'differential-drive': 8, 'imu': 12, 'kalman-filter': 28, 'actuator': 21, 'gyroscope': 5, 'gps': 20, 'magnetometer': 5, 'None': 25, 'noise': 5, 'power': 0, 'localization': 20, 'microcontroller': 0, 'brushless-motor': 13, 'sensors': 41, 'quadcopter': 13, 'navigation': 7, 'sensor-fusion': 21, 'sonar': 8, 'servos': 7}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-171" class = 'collapse'>
			</div>
				<textarea id = "speech-171" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-171">
					<img id="start_img-171" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-171">Comment</button>
			<br><div id = "ans-174"  class = "post">
				<h2>Answer</h2>
			<div id="vote-174" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">38</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>For small, low torque motors with little or no gearing, one procedure you can use to get a good baseline tune is to probe it's response to a disturbance.</p>

<p>To tune a PID use the following steps:</p>

<ol>
<li>Set all gains to zero. </li>
<li>Increase the P gain until the response to a disturbance is steady oscillation. </li>
<li>Increase the D gain until the the oscillations go away (i.e. it's critically damped). </li>
<li>Repeat steps 2 and 3 until increasing the D gain does not stop the oscillations.</li>
<li>Set P and D to the last stable values. </li>
<li>Increase the I gain until it brings you to the setpoint with the number of oscillations desired (normally zero but a quicker response can be had if you don't mind a couple oscillations of overshoot)</li>
</ol>

<p>What disturbance you use depends on the mechanism the controller is attached to. Normally moving the mechanism by hand away from the setpoint and letting go is enough. If the oscillations grow bigger and bigger then you need to reduce the P gain.</p>

<p>If you set the D gain too high the system will begin to chatter (vibrate at a higher frequency than the P gain oscillations). If this happens, reduce the D gain until it stops. </p>

<p>I believe this technique has a name. I'll put it here when I find it.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-174" data-toggle = "popover">
				<p>user name : hauptmech</p>
				<p> user reputation : 2621</p>
				<p class = "tagcontent" id = "usertaginfo-174">{'battery': 2, 'None': 220, 'lithium-polymer': 2}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-174">Load Comments</button></br>
			<div id = "commentsection-174" class = 'collapse'>
			<div id = "comment-682" class = "comment">
				<p>Sounds like Ziegler-Nichols: http://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method</p>
			</div>
			<div id = "comment-4511" class = "comment">
				<p>@Throwback1986, This is definitely *not* Ziegler-Nichols which only uses the P gain and where I and D gain are then calculated accordingly from the oscillating P gain and the oscilation period</p>
			</div>
			</div>
				<textarea id = "speech-174" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-174">
					<img id="start_img-174" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-174">Comment</button>
			<br><div id = "ans-340"  class = "post">
				<h2>Answer</h2>
			<div id="vote-340" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">7</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>A similar experimental method to hauptmech's answer that I was taught in college:</p>

<ol>
<li>Set all gains to 0.</li>
<li>Increase <i>K<sub>d</sub></i> until the system oscillates.</li>
<li>Reduce <i>K<sub>d</sub></i> by a factor of 2-4.</li>
<li>Set <i>K<sub>p</sub></i> to about 1% of <i>K<sub>d</sub></i>.</li>
<li>Increase <i>K<sub>p</sub></i> until oscillations start.</li>
<li>Decrease <i>K<sub>p</sub></i> by a factor of 2-4.</li>
<li>Set <i>K<sub>i</sub></i> to about 1% of <i>K<sub>p</sub></i>.</li>
<li>Increase <i>K<sub>i</sub></i> until oscillations start.</li>
<li>Decrease <i>K<sub>i</sub></i> by a factor of 2-4.</li>
</ol>

<p>The <a href="http://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method">Ziegler-Nichols method</a> is more precise if you can get an accurate number for the oscillation period. It does generally cause oscillations using the "classic PID" numbers given, so it's not always optimal.</p>

<p>For general rules on the effect of each term on rise time, overshoot, settling time, steady-state error, and stability, see Table 1 of <a href="http://eprints.gla.ac.uk/3815/1/IEEE_CS_PID_01580152.pdf">"PID Control System Analysis and Design"</a>, by Li, Ang, and Chong in IEEE Control Systems Magazine.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-340" data-toggle = "popover">
				<p>user name : Joe Baker</p>
				<p> user reputation : 477</p>
				<p class = "tagcontent" id = "usertaginfo-340">{'None': 33}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-340">Load Comments</button></br>
			<div id = "commentsection-340" class = 'collapse'>
			<div id = "comment-370" class = "comment">
				<p>Kd first? I always thought that it was best to start with Kp.</p>
			</div>
			<div id = "comment-372" class = "comment">
				<p>I'm transcribing from old lecture slides, if there's a good reason to not do it that way I'd be curious to hear it.</p>
			</div>
			<div id = "comment-3221" class = "comment">
				<p>That's the algorithm that I advocate for "seat of the pants" tuning.  It's going to get you about as close as you can without modeling the system or measuring its response.  (Modeling and/or measuring is the only way to go if you really need the right tuning).</p>
			</div>
			<div id = "comment-4833" class = "comment">
				<p>Tuning Kd first doesn't make any sense to me, as in every PID I've implemented the sign of Kd is negative. It's used to reduce the control signal when very large changes in errors are occuring, in essence damping the system down. If you only have Kd, the system will move in the opposite direction, increasing the error and compounding the problem. If Kd is positive, then whenever a large change in the error occurs in the right direction, you're going to make it change even faster and overshoot your target.</p>
			</div>
			<div id = "comment-4891" class = "comment">
				<p>Actually, tuning D gain first makes some sense, but I'm assuming that "increasing" D gain means increasing absolute value and it's only increasing damping. The biggest problem with D gain is that it amplifies high-frequency noise and it's nice to see that effect without the P gain. So, you're essentially starting by looking for the gains at which it stops behaving like damping and starts to amplify noise and lagged error signals. I'm assuming for step 2, you need to poke your plant to see if it oscillates.</p>
			</div>
			</div>
				<textarea id = "speech-340" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-340">
					<img id="start_img-340" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-340">Comment</button>
			<br><div id = "ans-378"  class = "post">
				<h2>Answer</h2>
			<div id="vote-378" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>In contrast to the other two answers I'd say a good manual way of tuning a PID is ignoring the Kd. So start at 0 and increase Kp until you are getting to the target, then increase Ki to get rid of steady state error.</p>

<p>Kd can confuse the issue as it responds poorly to noise, then you start adding filters on your analog input and then question what that does besides slow down your control and make the whole thing harder to work out...</p>

<p>Another thing bound to confuse me is if the PID equation is in the standard form or in an independent (parallel in wikipedia) form. The effect of Ki seems to inverse when the form is the wrong way to what you think it is. Both types are used in automation, sometimes with the option to switch between them.   </p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-378" data-toggle = "popover">
				<p>user name : daniel</p>
				<p> user reputation : 131</p>
				<p class = "tagcontent" id = "usertaginfo-378">{'None': 3}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-378" class = 'collapse'>
			</div>
				<textarea id = "speech-378" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-378">
					<img id="start_img-378" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-378">Comment</button>
			<br><div id = "ans-487"  class = "post">
				<h2>Answer</h2>
			<div id="vote-487" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I just came across <a href="http://www.microcontrollercentral.com/author.asp?section_id=2379&amp;doc_id=254676&amp;" rel="nofollow">this article</a> showing the results of using genetic algorithms to tune a PID controller.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-487" data-toggle = "popover">
				<p>user name : Nis</p>
				<p> user reputation : 302</p>
				<p class = "tagcontent" id = "usertaginfo-487">{'None': 17}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-487" class = 'collapse'>
			</div>
				<textarea id = "speech-487" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-487">
					<img id="start_img-487" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-487">Comment</button>
			<br><div id = "ans-492"  class = "post">
				<h2>Answer</h2>
			<div id="vote-492" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">3</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p><strong>System modeling</strong> </p>

<p>Of course experimental tuning can be done as mentioned in the other answers, but if you are able to define a reasonable dynamic model for whatever you want to control and are able to <a href="http://en.wikipedia.org/wiki/System_identification" rel="nofollow">identify its parameters</a>, you should be able to design your controller based on well-defined criteria such as <a href="http://en.wikipedia.org/wiki/Overshoot_%28signal%29" rel="nofollow">overshoot</a>, <a href="http://en.wikipedia.org/wiki/Rise_time" rel="nofollow">rise time</a>, <a href="http://en.wikipedia.org/wiki/Settle_time" rel="nofollow">settling time</a>, <a href="http://en.wikipedia.org/wiki/Steady_state_%28electronics%29" rel="nofollow">steady-state</a> error and so on. </p>

<p>There are even <a href="http://www.mathworks.com/help/control/ref/pidtool.html" rel="nofollow">tools in MATLAB</a> that are able to tune your controller to optimize for a combination of these criteria, which makes it even better to use.</p>

<p><strong>Know your controller</strong></p>

<p>Learning what each parameter in the PID controller does is quite helpful as well. All the experimental algorithms are based on this kind of knowledge somehow. If you not only follow instructions, but are able to get that feeling yourself, you may find it easier to tune your controller manually.</p>

<p><strong>Real world problems</strong></p>

<p>There is a chance one of these things, among others, will get on your way when tuning your controller: <a href="http://en.wikipedia.org/wiki/Integral_windup" rel="nofollow">windup</a>, <a href="http://en.wikipedia.org/wiki/Nyquist_frequency" rel="nofollow">inadequate sampling rate</a>, <a href="http://wikis.controltheorypro.com/index.php?title=Saturation" rel="nofollow">saturation</a>.</p>

<p><strong>Conclusion</strong></p>

<p>In the end, it all depends on what you can actually do with your system to get some knowledge about how it works and what kind of experimentation can be done. The best thing is to actually learn more about PID controllers and control theory in general, IMO, but I'm biased :)</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-492" data-toggle = "popover">
				<p>user name : georgebrindeiro</p>
				<p> user reputation : 1266</p>
				<p class = "tagcontent" id = "usertaginfo-492">{'computer-vision': 9, 'None': 98, 'slam': 9}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-492">Load Comments</button></br>
			<div id = "commentsection-492" class = 'collapse'>
			<div id = "comment-9289" class = "comment">
				<p>I don't understand why people keep suggesting _heuristics_ for tuning PID while nowadays we are provided with plenty of automatic tools for plant identification and controller design that don't require deep theoretical background. Thumb up for this answer then.</p>
			</div>
			</div>
				<textarea id = "speech-492" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-492">
					<img id="start_img-492" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-492">Comment</button>
			<br><div id = "ans-600"  class = "post">
				<h2>Answer</h2>
			<div id="vote-600" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p><a href="http://en.wikipedia.org/wiki/Ziegler%E2%80%93Nichols_method" rel="nofollow">Ziegler-Nichols</a> is an easy manual method.  More robust methods also exist - these usually rely on mathematical solutions (analytic, iterative optimization, etc.)</p>

<p>Beyond that, google "self-tuning PID" for some automated techniques.  My favorite is the application of neural networks to PID tuning.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-600" data-toggle = "popover">
				<p>user name : Throwback1986</p>
				<p> user reputation : 281</p>
				<p class = "tagcontent" id = "usertaginfo-600">{'None': 15}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-600" class = 'collapse'>
			</div>
				<textarea id = "speech-600" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-600">
					<img id="start_img-600" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-600">Comment</button>
			<br><div id = "ans-1533"  class = "post">
				<h2>Answer</h2>
			<div id="vote-1533" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">5</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Embedded.com has moved my article yet again, but here is where it is now.  This shows you both how to write a PID loop (figuring out how to do it in something other than floating point is left as an exercise to the reader) and how to tune it.</p>

<p><a href="http://www.embedded.com/design/prototyping-and-development/4211211/PID-without-a-PhD">PID Without a PhD</a></p>

<p>The <em>best way</em> depends a lot on your abilities.  The way to get the <em>best tuning</em>, assuming you're an experienced control system hand, is usally to measure the response of the plant ("plant" == "the thing you're controlling"), then depending on how you did the measurements extract a model of the plant and design to that, or just design directly to the measurements.</p>

<p>For certain difficult plants you'll find that you can't ever make satisfactory measurements, in which case you have to go by models alone.  Those are rare, but satisfying when you get them working.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-1533" data-toggle = "popover">
				<p>user name : TimWescott</p>
				<p> user reputation : 1336</p>
				<p class = "tagcontent" id = "usertaginfo-1533">{'None': 107}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-1533" class = 'collapse'>
			</div>
				<textarea id = "speech-1533" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-1533">
					<img id="start_img-1533" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-1533">Comment</button>
			<br><div id = "ans-1541"  class = "post">
				<h2>Answer</h2>
			<div id="vote-1541" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">2</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I'll try to expand a little from my experience for those who may be interested.  I think the problem is we have a lot of control theory that is somewhat inaccessible (and sometimes not useful) and then we have rules of thumb that make assumptions about systems that are often inaccurate.</p>

<p><strong>Stability</strong></p>

<p>Let's talk first about why control loops become unstable.  For this discussion I'll assume a linear system.  Informally this means that if your control signal is a sine wave at a given frequency then your observed output is at the same frequency and if you change the amplitude of your control system your output responds at the same ratio.  This assumption is a good approximation for many real world systems and lets us look at different frequencies in isolation.</p>

<p>If you look at the control path you have a set-point, your PID controller, your system (aka "Plant"), and then your sensor.  Imagine a fixed set-point and a sine wave from your sensor (this is equal to a real world disturbance at the sensor, fed back).  In an unstable system your feedback causes the control loop to amplify the error rather than reducing it such that as time increases your amplitude increases.  The reason this happens is due do a delay, or for this particular frequency a phase shift between the input and output.  For a given frequency we can look at that open loop (i.e. no feedback) shift and amplitude of the output and when we draw all those on a graph we get something like a <a href="http://en.wikipedia.org/wiki/Bode_plot" rel="nofollow">Bode Plot</a>.  If we have a situation in this open loop graph where the error keeps getting amplified then we have an unstable system.  If the delay is less than 1/2 the wavelength or the gain is less than x1 the system will be <a href="http://en.wikipedia.org/wiki/Barkhausen_stability_criterion" rel="nofollow">stable</a>.  In practice we want some margin from that point (gain margin and phase margin) which is why you'll see this "backing off" in many of the manual/heuristic methods.</p>

<p>The main problem with those manual methods is that you're flying blind and you're pretty much guaranteed to get a poor control system.</p>

<p>Also keep in mind that the meaning P, I and D is related to what your sensor is measuring and what control you're applying.  A common mistake in home built controllers is for people to think they're applying P when they're actually not.  Motor controllers often have a position loop, running over a velocity loop running over a torque loop. (A <a href="http://www.controldesign.com/Media/0704/article_061_fig2-2.jpg" rel="nofollow">cascade</a>)</p>

<p><strong>OK but how does this help us?</strong> </p>

<p>The first point I'd like to make is that if you're building your own PID controller you should also build a way of measuring the open loop response.  Do a frequency sweep at the input to your controller and measure the sensor's output with the feedback disconnected.  Then you can draw the open loop Bode plot and <em>see</em> why your system is stable and be able to trade off the various controls.  It's also useful to measure the closed loop response and you can do that with any system by doing a frequency sweep of your set-point while the loop is closed.  Both these aren't that hard and don't require a lot of theoretical knowledge.</p>

<p>If you're simply tweaking controls without any understanding of what's going on under the hood you won't be able to optimize your system.  Building some intuition about these systems isn't that hard.  E.g. the proportional gain has no effect on phase but simply increases the open loop gain across all frequencies.  So what you're doing when you're increasing the proportional gain in all those manual tuning methods is finding the frequency where the phase goes to -180.  See <a href="http://en.wikibooks.org/wiki/Control_Systems/Bode_Plots#Examples" rel="nofollow">this</a> to get some more idea about the impact of the various controls on your frequency response.</p>

<p>Quite often getting best closed loop performance involves tweaking the system and not just the controller gains.  What you want is to make the system as "stiff" as possible.  That will let you ramp up the control parameters and get the best open and closed loop bandwidth.  In my experience in motor control applications the proportional gain is the one that should be doing most of the "work" and the integrator the "rest".  I don't think you need a D term at all.  Having a low pass filter and a notch filter helps a lot in situations where you may have some mechanical resonance but setting them without a Bode Plot is very difficult (the oscillation frequency you observe under closed loop may be different than the open loop one).</p>

<p>If safety is a concern (very powerful motors or a system that could be destroyed by the motor going out of control) you need to put in some limits before you start tuning (e.g. current limit, maximum position error) to protect the system.  Then you need to get some sort of feel for the range of the parameters.  If your feedback has 40 counts per rotation or 4000 counts per rotation your parameters will be a factor of 100 for a given system.  My approach would be to first find a range where you have some poor controllability and then ramp up from there starting with P and then I (though again you're flying blind).  Backing off creates this stability margin.</p>

<p><strong>Beyond closed loop</strong></p>

<p>Closed loop attempts to take out the error from the system.  It's always going to have a somewhat limited performance.  What you want to do is minimize the error your closed loop controller sees and one way to do that is through a technique called <a href="http://en.wikipedia.org/wiki/Feed_forward_%28control%29" rel="nofollow">feed forward</a>.  In feed-forward you go around the controller and drive a command directly to the system.  An example of that would be acceleration feed-forward.  If you know you're motor's torque constant and you know the load you can pretty much tell how much current you need to drive to get a certain acceleration of the load.  You simply take the command input acceleration, multiply it by a constant and add that to the controller's drive command.  You're basically doing what it would take to drive the system if there was no controller and the closer you can get the less error your loop has to take out and the better your system will perform.  It makes a huge difference in practice.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-1541" data-toggle = "popover">
				<p>user name : Guy Sirton</p>
				<p> user reputation : 970</p>
				<p class = "tagcontent" id = "usertaginfo-1541">{'None': 75}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-1541">Load Comments</button></br>
			<div id = "commentsection-1541" class = 'collapse'>
			<div id = "comment-4512" class = "comment">
				<p>"In my experience in motor control applications the proportional gain is the one that should be doing most of the "work" and the integrator the "rest". I don't think you need a D term at all."
I would agree with that for typical motor control application. The P does the main job and the I compensate for long-term drift/errors. But here, the quadcopter will subject to lots of external turbulence, so the D term is important to get a fast response. As for the I term, unless the quad is in autonomous navigation mode, it's not that crucial.</p>
			</div>
			<div id = "comment-4523" class = "comment">
				<p>@dm76: Most of my experience is with motor control, and I make that disclaimer ;-)  My intuition though says that there's still room for I in quadcopter application and I think if P is very high it could deal with external disturbances (just like it does in motor control).  I would really need to take a closer look at those systems to say something definite about quadcopters...  I think a lot of what I say here does apply (especially do your tuning in the frequency domain and have the open loop response of the system).</p>
			</div>
			<div id = "comment-4524" class = "comment">
				<p>@dm76: And really those "rule of thumb" PID tuning result in very mediocre performance in motors and presumably the same in quadcopters.  Sometimes a well placed notch filter can make an order of magnitude difference...</p>
			</div>
			</div>
				<textarea id = "speech-1541" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-1541">
					<img id="start_img-1541" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-1541">Comment</button>
			<br><div id = "ans-8943"  class = "post">
				<h2>Answer</h2>
			<div id="vote-8943" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Skogestad PID tune method Seems to be a very accurate one. A bit late with my reaction.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-8943" data-toggle = "popover">
				<p>user name : Oswaldfig</p>
				<p> user reputation : 47</p>
				<p class = "tagcontent" id = "usertaginfo-8943">{'forward-kinematics': 0, 'None': 2, 'kinematics': 1, 'dh-parameters': 3}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-8943">Load Comments</button></br>
			<div id = "commentsection-8943" class = 'collapse'>
			<div id = "comment-14728" class = "comment">
				<p>Can you improve your answer by elaborating please?</p>
			</div>
			<div id = "comment-14731" class = "comment">
				<p>Welcome to *robotics* Oswaldfig. Thanks for your answer but on Stack Exchange we are are looking for comprehensive answers that provide some explanation and context. One-line answers cannot do this, so please edit your answer to explain why it is right, ideally with citations. Answers that don't include explanations may be removed.</p>
			</div>
			</div>
				<textarea id = "speech-8943" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-8943">
					<img id="start_img-8943" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-8943">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>