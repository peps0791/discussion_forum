<html>
	<head>
		<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
		<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="  crossorigin="anonymous"></script>
		<script src = "/jquery-highlight.js"></script>
		<link href="/jquery.upvote.css" rel="stylesheet">
		<script src = "/jquery.upvote.js" type="text/javascript"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
		<link rel="stylesheet" href="/style.css"/>
		<script src="/createlinks.js"></script>
		<script src="/textaudit.js"></script>
		<script src="/PorterStemmer1980.min.js"></script>
		<script src="/highlight.js"></script>
		<title id = 'pagetitle'>Can I create an autonomous robot that can adapt its strategy using machine learning?
		</title>
	</head>
	<body id = 'pagebody'>
		<div id = "loginmodals"></div>
		<div id = "issuemodals"></div>
		<div id = "highlight_tool"></div>
		<div class = "container">
			<header>
				<h1>Just Another Discussion Forum</h1>
			</header>
			<div class="topnav" id="myTopnav">
				<a href="/home">Home</a>
				<a href = "#issueModal" data-toggle="modal" style = "float:right">Report Issue</a>
			</div>
			<div class = "content">
			<div id = "ques-11126" class = "post">
			<h2>Question</h2>
			<div id="vote-11126" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">1</span>
				<a class="downvote"></a>
				<a class="star"></a>
				<p>Views :: 85</p>
			</div>
			<form id = "questionpostsform" method="GET" action = "/ask">
				<input type="submit" id = "quesbtn" class="btn btn-primary btn-lg" value="Ask Question">
			</form>
				<h2>Can I create an autonomous robot that can adapt its strategy using machine learning?</h2>
<p><strong>BACKGROUND:</strong></p>

<p>I am creating a robot to score the most points in 30 seconds while running autonomously. Naturally, two thoughts come to mind: Linear programming and machine learning.</p>

<p>Linear programming would provide a stable, simple method of scoring points. However, it is limited by what it can do, and optimizing scores would require reworking the entire bot.</p>

<p><strong>PROBLEMS:</strong></p>

<p>The robot and code itself can change, but it is not time efficient due to the fact that it would require completely reworking the code and robot by a single programmer. The robot has to work with what its got.</p>

<p><strong>QUESTION:</strong></p>

<p>Can I create Android Java classes to allow my robot to work the field as an AI and tweak its strategy or course of action based on stats from previous rounds? (Self-Supervised Learning) If it is possible to do, how would I do it?</p>

<p><strong>SPECS:</strong></p>

<p>Max robot size of 18'' cubes</p>

<p>Android Marshmallow</p>

<p>ZTE speed or Motorola moto g gen 2 phones</p>

<p>Multiple inputs from a controlling phone and various sensors</p>

<p>Output to multiple motors and servos</p>

			</div>
			<div class = "userinfosection"  id = "userinfo-11126" data-toggle = "popover">
				<p>user name : Caleb</p>
				<p> user reputation : 120</p>
				<p class = "tagcontent" id = "usertaginfo-11126">{'None': 0, 'computer-vision': 0, 'motor': 0, 'first-robotics': 0, 'cameras': 0, 'wheeled-robot': 0, 'automation': 2, 'design': 2, 'machine-learning': 1, 'kinematics': 0, 'sensors': 2, 'automatic': 1}</p>
			</div><br>
			<br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11126" class = 'collapse'>
			</div>
				<textarea id = "speech-11126" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11126">
					<img id="start_img-11126" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11126">Comment</button>

<h1>Answers</h1>
			<br><div id = "ans-11131"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11131" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">4</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>I think the problem you're going to find is that machine learning requires <em>learning</em>. If the goals or objective vary just a little, then manually adjusting the software shouldn't be too difficult (if you programmed it well), and it might only take a few trials for the AI to adjust to the new scenario. </p>

<p>If the objectives change so much that you're looking at "reworking the entire bot," then you're probably also looking at ditching the previous AI and retraining it on the new course. </p>

<p>:EDIT: </p>

<p>I wrote the answer above on my phone over the weekend. I'll add some more content now:</p>

<p>What you're asking for is almost more like consciousness than a "simple task" - you want the robot to be spatially aware of itself, aware of the objectives its been given, how to move around its environment and then how to use its physical structure to achieve the goal. I'm positive this is all very far beyond the scope of the project/competition you're asking about. </p>

<p>The route I would take would be to break each action out into their own functions and then tune each as required. So you might have functions like:</p>

<ul>
<li>Localize - this is how the robot determines where it is. Dead reckoning, localization, SLAM (simultaneous localization and mapping), etc. would exist here.</li>
<li>Navigate - this would do pathfinding as required to set waypoints or instructions for how the robot would get from a given start to a given end. Maps and navigation routines like A*, Dijkstra, etc. exist here. </li>
<li>Locomotion - this would be the low-level interface between the navigate function and the wheels. Navigate says turn to a heading of XXX degrees and travel YYY centimeters, Locomotion actually does it. Here's where the wheel base, wheel radius, gear ratios, and other parameters related to locomotion reside. </li>
<li>Obstacle detection - if required, a detected obstacle could pause the navigate/locomotion routine, update the map with an obstacle, and force a new navigate call to find the best path from the current position to the original destination. Mapping, SLAM, or other detection algorithms could exist here. </li>
<li>Manipulate - this would control the device on the robot that is designed to interact with the course.</li>
<li>Mission control - this would be the higher-level function that calls everything else. </li>
</ul>

<p>So, for example, if you were given some arbitrary number of ball locations and told to deposit them in a basket, your code might look something like the following (Matlab) pseudo-code:</p>

<pre class="lang-matlab prettyprint-override"><code>function MissionControl()
basketLocation = [xBasket, yBasket];
objective(1).startPosition = [xBall1, yBall1];
objective(2).startPosition = [xBall2, yBall2];
% This continues for all objectives

% All of the objective locations are at the basket, so
% assign all of the objective goals to that location.
[objective.goal] = deal(basketLocation);

for currentObjective = 1:numel(objective)
    currentPosition = Localize();
    path = Navigate(currentPosition, objective(currentObjective).startPosition);
    for currentWaypoint = 1:numel(path)
        Locomotion(currentPosition,path(currentWaypoint));
        currentPosition = Localize();
    end
    Manipulate('get');
    currentPosition = Localize();
    path = Navigate(currentPosition,objective(currentObjective).goal);
    for currentWaypoint = 1:numel(path)
        Locomotion(currentPosition,path(currentWaypoint));
        currentPosition = Localize();
    end
    Manipulate('put')
end
</code></pre>

<p>Each subfunction has its own parameters - again, things related to how the robot moves goes in <code>Locomotion()</code>. How the robot <code>'get'</code>s the ball goes in <code>Manipulate()</code>, etc. If you were going to insist on using AI, I would encapsulate each AI routine in a similar manner, such that there are actually several AI routines. </p>

<p>Again, if there are any dramatic changes, such as a dramatically different footprint or something similar, you'll probably need to wind up retraining the AI. If you don't discard the previous AI, then all of the new training is going to try to "fight" its previous learning of how to behave or interact, and the result may not be optimal in either scenario (old or new). </p>

<p>But like I mentioned earlier, any use of AI would, in my opinion, be a big overkill. Parameterize your code - don't use any <a href="https://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants" rel="nofollow noreferrer">magic numbers</a> - and you should be able to update/tune your performance relatively quickly by tweaking the configuration parameters.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11131" data-toggle = "popover">
				<p>user name : Chuck</p>
				<p> user reputation : 8534</p>
				<p class = "tagcontent" id = "usertaginfo-11131">{'actuator': 7, 'None': 616, 'dynamics': 7, 'joint': 7}</p>
			</div><br><h3>Comments</h3>
				<button data-toggle = 'collapse' data-target = "#commentsection-11131">Load Comments</button></br>
			<div id = "commentsection-11131" class = 'collapse'>
			<div id = "comment-20048" class = "comment">
				<p>It may be possible to implement an algorithmic optimization rather than AI, but so much depends on the specifics if your task and robot.    This paper (http://www.cs.cmu.edu/~cga/papers/cga-icra97alt.pdf) describes some complexities for an inverted pendulum control task.   Check out the difficulties for this rather straightforward task.   Some of the references cited there might be very helpful to you.</p>
			</div>
			</div>
				<textarea id = "speech-11131" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11131">
					<img id="start_img-11131" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11131">Comment</button>
			<br><div id = "ans-11141"  class = "post">
				<h2>Answer</h2>
			<div id="vote-11141" class="upvote" style="float:left;">
				<a class="upvote"></a>
				<span class="count">0</span>
				<a class="downvote"></a>
				<a class="star"></a>
			</div>
				<p><p>Robot-Control-Systems are normally designed as Realtime-Systems. Traditionell programming concepts like loops or procedures will not work. Instead a time-based-schedule is necessary:</p>

<pre><code>0 walkforward
1 walkforward
2 stop
3 turnright
4 walkforward
5 stop
</code></pre>

<p>The first parameter is the timeindex, and the second parameter is the actual command. This plan has to be generated on the fly, according to the obstacles which can be changed during runtime. The scheduling-plan can be seen like a chessboard notation (1. a2a4 c2d2) but for the domain "robot control". </p>

<p>To create such realtime-plans one possibility is indead machinelearning. The commands of the human-operator will be recorded and set in relation to the current situation. And with a little bit of luck, this will work for new situations. Another (better) solution would be to see this as an np-hard problem like Sudoko or Travelling-salesman: for given situation and a given goal a number of actions has to be found. </p>

<p>The idea of break down a robot-control-system into different modules like lokalize, navigation, locomotion, manipulate and mission control is not bad, but it is only additionell. It is a way for generating the overall realtime-plan.</p>
</p><br>
			</div>
			<div class = "userinfosection"  id = "userinfo-11141" data-toggle = "popover">
				<p>user name : Manuel Rodriguez</p>
				<p> user reputation : 463</p>
				<p class = "tagcontent" id = "usertaginfo-11141">{'None': 18, 'motion-planning': 0, 'machine-learning': 1, 'algorithm': 0}</p>
			</div><br><h3>Comments</h3><p>no comments yet<p><br>
			<div id = "commentsection-11141" class = 'collapse'>
			</div>
				<textarea id = "speech-11141" rows="3" cols="80"></textarea><br>
				<button class="record-start" id="start-11141">
					<img id="start_img-11141" src="/mic.gif" alt="Start">
				</button>
				<button class = "comment-btn" id = "comment-btn-11141">Comment</button>
			</div>
			<div id = "resourcestab" class = "resourcestab">
				<ul class="nav nav-tabs">
					<li class="active"><a data-toggle="tab" href="#resources">Resources</a></li>
					<li><a data-toggle="tab" href="#summary">Summary</a></li>
				</ul>
					<div class="tab-content">
						<div id="resources" class="tab-pane fade in active">
							<h3>Resources</h3>
							<div id = "resourcescontent"></div>
						</div>
						<div id="summary" class="tab-pane fade">
							<h3>Summary</h3>
							<div id = "summarycontent"></div>
						</div>
			</div>
			</div>
			<footer>Moore & Peps collaboration.</footer>
	</div>
	<script src="/post.js"></script>
	<script type="text/javascript">
		$("#loginmodals").load("/loginModal.html");
		$("#issuemodals").load("/issueModal.html");
		$("#highlight_tool").load("/highlight_tool.html");
		checkLoggedInUser()
		var content = $('.content').html();
		populateResources(content)
		getHighlights()
		setOnLinksHover()
	</script>
	<script src="/media.js"></script>
	<script src="/vote.js"></script>
	<script src="/managefunction.js"></script>
	</body>
</html>